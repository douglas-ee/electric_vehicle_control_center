
sprint_10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001ec6  00001f5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ec6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045e  0080012e  0080012e  00001f88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  00001ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045a0  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce7  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000238d  00000000  00000000  0000754f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b5c  00000000  00000000  000098dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d8c  00000000  00000000  0000a438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004691  00000000  00000000  0000b1c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d8  00000000  00000000  0000f855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_13>
      38:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_14>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__vector_18>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e6 ec       	ldi	r30, 0xC6	; 198
     2bc:	fe e1       	ldi	r31, 0x1E	; 30
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ae 32       	cpi	r26, 0x2E	; 46
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ae e2       	ldi	r26, 0x2E	; 46
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ac 38       	cpi	r26, 0x8C	; 140
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 84 06 	call	0xd08	; 0xd08 <main>
     2de:	0c 94 61 0f 	jmp	0x1ec2	; 0x1ec2 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <configuracao>:
// funcao responsavel pela recepção de um frame de 5 a 8 bits
unsigned char usart_receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));								// espera o dado ser recxebido
	return UDR0;												// le o dado recebido e retorna
}
     2e6:	84 b1       	in	r24, 0x04	; 4
     2e8:	8e 6f       	ori	r24, 0xFE	; 254
     2ea:	84 b9       	out	0x04, r24	; 4
     2ec:	8a b1       	in	r24, 0x0a	; 10
     2ee:	82 7c       	andi	r24, 0xC2	; 194
     2f0:	8a b9       	out	0x0a, r24	; 10
     2f2:	88 e4       	ldi	r24, 0x48	; 72
     2f4:	87 b9       	out	0x07, r24	; 7
     2f6:	8d e3       	ldi	r24, 0x3D	; 61
     2f8:	8b b9       	out	0x0b, r24	; 11
     2fa:	e9 e6       	ldi	r30, 0x69	; 105
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	82 e8       	ldi	r24, 0x82	; 130
     300:	80 83       	st	Z, r24
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	8d bb       	out	0x1d, r24	; 29
     306:	94 e0       	ldi	r25, 0x04	; 4
     308:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
     30c:	81 e3       	ldi	r24, 0x31	; 49
     30e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
     312:	80 81       	ld	r24, Z
     314:	82 68       	ori	r24, 0x82	; 130
     316:	80 83       	st	Z, r24
     318:	82 e0       	ldi	r24, 0x02	; 2
     31a:	84 bd       	out	0x24, r24	; 36
     31c:	23 e0       	ldi	r18, 0x03	; 3
     31e:	25 bd       	out	0x25, r18	; 37
     320:	29 ef       	ldi	r18, 0xF9	; 249
     322:	27 bd       	out	0x27, r18	; 39
     324:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     328:	87 ee       	ldi	r24, 0xE7	; 231
     32a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     32e:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     332:	83 e2       	ldi	r24, 0x23	; 35
     334:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     338:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     33c:	84 e4       	ldi	r24, 0x44	; 68
     33e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     342:	81 e2       	ldi	r24, 0x21	; 33
     344:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     348:	78 94       	sei
     34a:	08 95       	ret

0000034c <__vector_14>:
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	2f 93       	push	r18
     360:	3f 93       	push	r19
     362:	4f 93       	push	r20
     364:	5f 93       	push	r21
     366:	6f 93       	push	r22
     368:	7f 93       	push	r23
     36a:	8f 93       	push	r24
     36c:	9f 93       	push	r25
     36e:	af 93       	push	r26
     370:	bf 93       	push	r27
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
     376:	c0 90 65 01 	lds	r12, 0x0165	; 0x800165 <tempo_ms>
     37a:	d0 90 66 01 	lds	r13, 0x0166	; 0x800166 <tempo_ms+0x1>
     37e:	e0 90 67 01 	lds	r14, 0x0167	; 0x800167 <tempo_ms+0x2>
     382:	f0 90 68 01 	lds	r15, 0x0168	; 0x800168 <tempo_ms+0x3>
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	c8 1a       	sub	r12, r24
     38a:	d8 0a       	sbc	r13, r24
     38c:	e8 0a       	sbc	r14, r24
     38e:	f8 0a       	sbc	r15, r24
     390:	c0 92 65 01 	sts	0x0165, r12	; 0x800165 <tempo_ms>
     394:	d0 92 66 01 	sts	0x0166, r13	; 0x800166 <tempo_ms+0x1>
     398:	e0 92 67 01 	sts	0x0167, r14	; 0x800167 <tempo_ms+0x2>
     39c:	f0 92 68 01 	sts	0x0168, r15	; 0x800168 <tempo_ms+0x3>
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	25 e0       	ldi	r18, 0x05	; 5
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     3b0:	67 2b       	or	r22, r23
     3b2:	68 2b       	or	r22, r24
     3b4:	69 2b       	or	r22, r25
     3b6:	19 f4       	brne	.+6      	; 0x3be <__vector_14+0x72>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <flag_5ms>
     3be:	c7 01       	movw	r24, r14
     3c0:	b6 01       	movw	r22, r12
     3c2:	2a ef       	ldi	r18, 0xFA	; 250
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     3ce:	67 2b       	or	r22, r23
     3d0:	68 2b       	or	r22, r24
     3d2:	69 2b       	or	r22, r25
     3d4:	19 f4       	brne	.+6      	; 0x3dc <__vector_14+0x90>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <flag_250ms>
     3dc:	c7 01       	movw	r24, r14
     3de:	b6 01       	movw	r22, r12
     3e0:	24 ef       	ldi	r18, 0xF4	; 244
     3e2:	31 e0       	ldi	r19, 0x01	; 1
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     3ec:	67 2b       	or	r22, r23
     3ee:	68 2b       	or	r22, r24
     3f0:	69 2b       	or	r22, r25
     3f2:	19 f4       	brne	.+6      	; 0x3fa <__vector_14+0xae>
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <flag_500ms>
     3fa:	ff 91       	pop	r31
     3fc:	ef 91       	pop	r30
     3fe:	bf 91       	pop	r27
     400:	af 91       	pop	r26
     402:	9f 91       	pop	r25
     404:	8f 91       	pop	r24
     406:	7f 91       	pop	r23
     408:	6f 91       	pop	r22
     40a:	5f 91       	pop	r21
     40c:	4f 91       	pop	r20
     40e:	3f 91       	pop	r19
     410:	2f 91       	pop	r18
     412:	ff 90       	pop	r15
     414:	ef 90       	pop	r14
     416:	df 90       	pop	r13
     418:	cf 90       	pop	r12
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <__vector_13>:
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	8f 93       	push	r24
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <flag_over_flow>
     436:	8f 91       	pop	r24
     438:	0f 90       	pop	r0
     43a:	0f be       	out	0x3f, r0	; 63
     43c:	0f 90       	pop	r0
     43e:	1f 90       	pop	r1
     440:	18 95       	reti

00000442 <__vector_10>:
     442:	1f 92       	push	r1
     444:	0f 92       	push	r0
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	0f 92       	push	r0
     44a:	11 24       	eor	r1, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
     464:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     468:	86 ff       	sbrs	r24, 6
     46a:	0f c0       	rjmp	.+30     	; 0x48a <__vector_10+0x48>
     46c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     470:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <tempo_up>
     47c:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <tempo_up+0x1>
     480:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <tempo_up+0x2>
     484:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <tempo_up+0x3>
     488:	2a c0       	rjmp	.+84     	; 0x4de <__vector_10+0x9c>
     48a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     48e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     492:	a0 e0       	ldi	r26, 0x00	; 0
     494:	b0 e0       	ldi	r27, 0x00	; 0
     496:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <tempo_up>
     49a:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <tempo_up+0x1>
     49e:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <tempo_up+0x2>
     4a2:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <tempo_up+0x3>
     4a6:	84 1b       	sub	r24, r20
     4a8:	95 0b       	sbc	r25, r21
     4aa:	a6 0b       	sbc	r26, r22
     4ac:	b7 0b       	sbc	r27, r23
     4ae:	88 0f       	add	r24, r24
     4b0:	99 1f       	adc	r25, r25
     4b2:	aa 1f       	adc	r26, r26
     4b4:	bb 1f       	adc	r27, r27
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	aa 1f       	adc	r26, r26
     4bc:	bb 1f       	adc	r27, r27
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	aa 1f       	adc	r26, r26
     4c4:	bb 1f       	adc	r27, r27
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	aa 1f       	adc	r26, r26
     4cc:	bb 1f       	adc	r27, r27
     4ce:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tempo_down>
     4d2:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tempo_down+0x1>
     4d6:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <tempo_down+0x2>
     4da:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <tempo_down+0x3>
     4de:	e1 e8       	ldi	r30, 0x81	; 129
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	90 81       	ld	r25, Z
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	89 27       	eor	r24, r25
     4e8:	80 83       	st	Z, r24
     4ea:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <flag_over_flow>
     4ee:	81 11       	cpse	r24, r1
     4f0:	13 c0       	rjmp	.+38     	; 0x518 <__vector_10+0xd6>
     4f2:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <tempo_down>
     4f6:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <tempo_down+0x1>
     4fa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <tempo_down+0x2>
     4fe:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <tempo_down+0x3>
     502:	2a e3       	ldi	r18, 0x3A	; 58
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	40 e0       	ldi	r20, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     50e:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <Distancia_objeto_cm+0x1>
     512:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <Distancia_objeto_cm>
     516:	02 c0       	rjmp	.+4      	; 0x51c <__vector_10+0xda>
     518:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <flag_over_flow>
     51c:	ff 91       	pop	r31
     51e:	ef 91       	pop	r30
     520:	bf 91       	pop	r27
     522:	af 91       	pop	r26
     524:	9f 91       	pop	r25
     526:	8f 91       	pop	r24
     528:	7f 91       	pop	r23
     52a:	6f 91       	pop	r22
     52c:	5f 91       	pop	r21
     52e:	4f 91       	pop	r20
     530:	3f 91       	pop	r19
     532:	2f 91       	pop	r18
     534:	0f 90       	pop	r0
     536:	0f be       	out	0x3f, r0	; 63
     538:	0f 90       	pop	r0
     53a:	1f 90       	pop	r1
     53c:	18 95       	reti

0000053e <__vector_1>:
     53e:	1f 92       	push	r1
     540:	0f 92       	push	r0
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	0f 92       	push	r0
     546:	11 24       	eor	r1, r1
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	2f 93       	push	r18
     552:	3f 93       	push	r19
     554:	4f 93       	push	r20
     556:	5f 93       	push	r21
     558:	6f 93       	push	r22
     55a:	7f 93       	push	r23
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	af 93       	push	r26
     562:	bf 93       	push	r27
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
     568:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <cont_5voltas.2651>
     56c:	85 30       	cpi	r24, 0x05	; 5
     56e:	b9 f5       	brne	.+110    	; 0x5de <__vector_1+0xa0>
     570:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tempo_ms>
     574:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <tempo_ms+0x1>
     578:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <tempo_ms+0x2>
     57c:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <tempo_ms+0x3>
     580:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <tempo_ms_anterior.2652>
     584:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tempo_ms_anterior.2652+0x1>
     588:	6c 01       	movw	r12, r24
     58a:	c2 1a       	sub	r12, r18
     58c:	d3 0a       	sbc	r13, r19
     58e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <tempo_ms_anterior.2652>
     592:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <tempo_ms_anterior.2652+0x1>
     596:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <tempo_ms_anterior.2652+0x2>
     59a:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <tempo_ms_anterior.2652+0x3>
     59e:	e1 2c       	mov	r14, r1
     5a0:	f1 2c       	mov	r15, r1
     5a2:	60 ee       	ldi	r22, 0xE0	; 224
     5a4:	73 e9       	ldi	r23, 0x93	; 147
     5a6:	84 e0       	ldi	r24, 0x04	; 4
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	a7 01       	movw	r20, r14
     5ac:	96 01       	movw	r18, r12
     5ae:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <__divmodsi4>
     5b2:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <RPM_motor+0x1>
     5b6:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <RPM_motor>
     5ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5c2:	a5 e3       	ldi	r26, 0x35	; 53
     5c4:	b2 e0       	ldi	r27, 0x02	; 2
     5c6:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
     5ca:	a7 01       	movw	r20, r14
     5cc:	96 01       	movw	r18, r12
     5ce:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     5d2:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <Velocidade_carro_kmH+0x1>
     5d6:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <Velocidade_carro_kmH>
     5da:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <cont_5voltas.2651>
     5de:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Velocidade_carro_kmH>
     5e2:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Velocidade_carro_kmH+0x1>
     5e6:	45 97       	sbiw	r24, 0x15	; 21
     5e8:	10 f1       	brcs	.+68     	; 0x62e <__vector_1+0xf0>
     5ea:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Distancia_objeto_cm>
     5ee:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <Distancia_objeto_cm+0x1>
     5f2:	8c 32       	cpi	r24, 0x2C	; 44
     5f4:	91 40       	sbci	r25, 0x01	; 1
     5f6:	d8 f4       	brcc	.+54     	; 0x62e <__vector_1+0xf0>
     5f8:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <acelerador>
     5fc:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <acelerador+0x1>
     600:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <acelerador+0x2>
     604:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <acelerador+0x3>
     608:	af ef       	ldi	r26, 0xFF	; 255
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__muluhisi3>
     610:	26 ef       	ldi	r18, 0xF6	; 246
     612:	37 e2       	ldi	r19, 0x27	; 39
     614:	40 e0       	ldi	r20, 0x00	; 0
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     61c:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <acelerador_sub>
     620:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <acelerador_sub+0x1>
     624:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <acelerador_sub+0x2>
     628:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <acelerador_sub+0x3>
     62c:	1a c0       	rjmp	.+52     	; 0x662 <__vector_1+0x124>
     62e:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <acelerador>
     632:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <acelerador+0x1>
     636:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <acelerador+0x2>
     63a:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <acelerador+0x3>
     63e:	af ef       	ldi	r26, 0xFF	; 255
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__muluhisi3>
     646:	2f ef       	ldi	r18, 0xFF	; 255
     648:	33 e0       	ldi	r19, 0x03	; 3
     64a:	40 e0       	ldi	r20, 0x00	; 0
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     652:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <acelerador_sub>
     656:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <acelerador_sub+0x1>
     65a:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <acelerador_sub+0x2>
     65e:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <acelerador_sub+0x3>
     662:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <cont_5voltas.2651>
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <cont_5voltas.2651>
     66c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     670:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatunsisf>
     67c:	23 e2       	ldi	r18, 0x23	; 35
     67e:	30 e1       	ldi	r19, 0x10	; 16
     680:	49 e4       	ldi	r20, 0x49	; 73
     682:	50 e4       	ldi	r21, 0x40	; 64
     684:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     688:	6b 01       	movw	r12, r22
     68a:	7c 01       	movw	r14, r24
     68c:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <Distancia_hodometro_km_pass>
     690:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     694:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     698:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <Distancia_hodometro_km_pass+0x3>
     69c:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatunsisf>
     6a0:	a7 01       	movw	r20, r14
     6a2:	96 01       	movw	r18, r12
     6a4:	0e 94 82 0c 	call	0x1904	; 0x1904 <__addsf3>
     6a8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fixunssfsi>
     6ac:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <Distancia_hodometro_km_pass>
     6b0:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     6b4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     6b8:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <Distancia_hodometro_km_pass+0x3>
     6bc:	20 ea       	ldi	r18, 0xA0	; 160
     6be:	36 e8       	ldi	r19, 0x86	; 134
     6c0:	41 e0       	ldi	r20, 0x01	; 1
     6c2:	50 e0       	ldi	r21, 0x00	; 0
     6c4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
     6c8:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <Distancia_hodometro_km+0x1>
     6cc:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <Distancia_hodometro_km>
     6d0:	ff 91       	pop	r31
     6d2:	ef 91       	pop	r30
     6d4:	bf 91       	pop	r27
     6d6:	af 91       	pop	r26
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	7f 91       	pop	r23
     6de:	6f 91       	pop	r22
     6e0:	5f 91       	pop	r21
     6e2:	4f 91       	pop	r20
     6e4:	3f 91       	pop	r19
     6e6:	2f 91       	pop	r18
     6e8:	ff 90       	pop	r15
     6ea:	ef 90       	pop	r14
     6ec:	df 90       	pop	r13
     6ee:	cf 90       	pop	r12
     6f0:	0f 90       	pop	r0
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	0f 90       	pop	r0
     6f6:	1f 90       	pop	r1
     6f8:	18 95       	reti

000006fa <__vector_5>:
     6fa:	1f 92       	push	r1
     6fc:	0f 92       	push	r0
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	0f 92       	push	r0
     702:	11 24       	eor	r1, r1
     704:	8f 93       	push	r24
     706:	9f 93       	push	r25
     708:	4c 99       	sbic	0x09, 4	; 9
     70a:	0c c0       	rjmp	.+24     	; 0x724 <__vector_5+0x2a>
     70c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     710:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     714:	88 3c       	cpi	r24, 0xC8	; 200
     716:	91 05       	cpc	r25, r1
     718:	28 f4       	brcc	.+10     	; 0x724 <__vector_5+0x2a>
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     720:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     724:	4d 99       	sbic	0x09, 5	; 9
     726:	0c c0       	rjmp	.+24     	; 0x740 <__vector_5+0x46>
     728:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     72c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     730:	82 30       	cpi	r24, 0x02	; 2
     732:	91 05       	cpc	r25, r1
     734:	28 f0       	brcs	.+10     	; 0x740 <__vector_5+0x46>
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     73c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     740:	48 99       	sbic	0x09, 0	; 9
     742:	14 c0       	rjmp	.+40     	; 0x76c <__vector_5+0x72>
     744:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     748:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     74c:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Distancia_hodometro_km_pass>
     750:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     754:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     758:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <Distancia_hodometro_km_pass+0x3>
     75c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Temperatura_C+0x1>
     760:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Temperatura_C>
     764:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Bateria_per+0x1>
     768:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Bateria_per>
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	0f 90       	pop	r0
     772:	0f be       	out	0x3f, r0	; 63
     774:	0f 90       	pop	r0
     776:	1f 90       	pop	r1
     778:	18 95       	reti

0000077a <usart_init>:
     77a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     77e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     782:	88 e9       	ldi	r24, 0x98	; 152
     784:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     788:	8e e0       	ldi	r24, 0x0E	; 14
     78a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     78e:	08 95       	ret

00000790 <usart_transmit>:
     790:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     794:	95 ff       	sbrs	r25, 5
     796:	fc cf       	rjmp	.-8      	; 0x790 <usart_transmit>
     798:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     79c:	08 95       	ret

0000079e <__vector_18>:
     79e:	1f 92       	push	r1
     7a0:	0f 92       	push	r0
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	0f 92       	push	r0
     7a6:	11 24       	eor	r1, r1
     7a8:	1f 93       	push	r17
     7aa:	2f 93       	push	r18
     7ac:	3f 93       	push	r19
     7ae:	4f 93       	push	r20
     7b0:	5f 93       	push	r21
     7b2:	6f 93       	push	r22
     7b4:	7f 93       	push	r23
     7b6:	8f 93       	push	r24
     7b8:	9f 93       	push	r25
     7ba:	af 93       	push	r26
     7bc:	bf 93       	push	r27
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ef 93       	push	r30
     7c4:	ff 93       	push	r31
     7c6:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     7ca:	1a 37       	cpi	r17, 0x7A	; 122
     7cc:	81 f4       	brne	.+32     	; 0x7ee <__vector_18+0x50>
     7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <__vector_18+0x46>
     7d0:	fe 01       	movw	r30, r28
     7d2:	eb 5c       	subi	r30, 0xCB	; 203
     7d4:	fe 4f       	sbci	r31, 0xFE	; 254
     7d6:	10 82       	st	Z, r1
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	ce 01       	movw	r24, r28
     7dc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_write_byte>
     7e0:	21 96       	adiw	r28, 0x01	; 1
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <__vector_18+0x4a>
     7e4:	c9 e0       	ldi	r28, 0x09	; 9
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
     7e8:	cd 30       	cpi	r28, 0x0D	; 13
     7ea:	d1 05       	cpc	r29, r1
     7ec:	8c f3       	brlt	.-30     	; 0x7d0 <__vector_18+0x32>
     7ee:	14 37       	cpi	r17, 0x74	; 116
     7f0:	69 f4       	brne	.+26     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     7f2:	07 c0       	rjmp	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     7f4:	ce 01       	movw	r24, r28
     7f6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     7fa:	0e 94 c8 03 	call	0x790	; 0x790 <usart_transmit>
     7fe:	21 96       	adiw	r28, 0x01	; 1
     800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     802:	c9 e0       	ldi	r28, 0x09	; 9
     804:	d0 e0       	ldi	r29, 0x00	; 0
     806:	cd 30       	cpi	r28, 0x0D	; 13
     808:	d1 05       	cpc	r29, r1
     80a:	a4 f3       	brlt	.-24     	; 0x7f4 <__vector_18+0x56>
     80c:	15 36       	cpi	r17, 0x65	; 101
     80e:	21 f4       	brne	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     810:	98 b1       	in	r25, 0x08	; 8
     812:	88 e4       	ldi	r24, 0x48	; 72
     814:	89 27       	eor	r24, r25
     816:	88 b9       	out	0x08, r24	; 8
     818:	ff 91       	pop	r31
     81a:	ef 91       	pop	r30
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	bf 91       	pop	r27
     822:	af 91       	pop	r26
     824:	9f 91       	pop	r25
     826:	8f 91       	pop	r24
     828:	7f 91       	pop	r23
     82a:	6f 91       	pop	r22
     82c:	5f 91       	pop	r21
     82e:	4f 91       	pop	r20
     830:	3f 91       	pop	r19
     832:	2f 91       	pop	r18
     834:	1f 91       	pop	r17
     836:	0f 90       	pop	r0
     838:	0f be       	out	0x3f, r0	; 63
     83a:	0f 90       	pop	r0
     83c:	1f 90       	pop	r1
     83e:	18 95       	reti

00000840 <anima_velocidade>:

// funcao responsavel por configurar e mostrar o display de 7-Seg na simulacao
void anima_velocidade(uint16_t velocidade_carro, uint8_t *flag_disparo)
{
     840:	cf 93       	push	r28
     842:	ac 01       	movw	r20, r24
     844:	fb 01       	movw	r30, r22
	// declarando variavel local
	static int8_t cont_dig = 0;
	// condicao com *flag_disparo = &flag_5ms (sempre que &flag_5ms for true ele dispara
	if(*flag_disparo)
     846:	80 81       	ld	r24, Z
     848:	88 23       	and	r24, r24
     84a:	09 f4       	brne	.+2      	; 0x84e <anima_velocidade+0xe>
     84c:	99 c0       	rjmp	.+306    	; 0x980 <__stack+0x81>
	{
		// switch case responsavel por dividir o acionamento em 3 partes
		switch(cont_dig)
     84e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <cont_dig.2678>
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	59 f1       	breq	.+86     	; 0x8ac <anima_velocidade+0x6c>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	09 f4       	brne	.+2      	; 0x85c <anima_velocidade+0x1c>
     85a:	58 c0       	rjmp	.+176    	; 0x90c <__stack+0xd>
     85c:	81 11       	cpse	r24, r1
     85e:	8a c0       	rjmp	.+276    	; 0x974 <__stack+0x75>
		{
		case 0:
			PORTB &= 0b00000001;												// resetando PB1 - PB7
     860:	85 b1       	in	r24, 0x05	; 5
     862:	81 70       	andi	r24, 0x01	; 1
     864:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b11000000;												// resetando PB4, pino que habilita o display das unidades
     866:	85 b1       	in	r24, 0x05	; 5
     868:	80 6c       	ori	r24, 0xC0	; 192
     86a:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 1) % 10) & 0b00001111) << 1);		// separa o digito das unidades e coloca em PB0 - PB3
     86c:	c5 b1       	in	r28, 0x05	; 5
     86e:	9a 01       	movw	r18, r20
     870:	ad ec       	ldi	r26, 0xCD	; 205
     872:	bc ec       	ldi	r27, 0xCC	; 204
     874:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	96 95       	lsr	r25
     87e:	87 95       	ror	r24
     880:	96 95       	lsr	r25
     882:	87 95       	ror	r24
     884:	9c 01       	movw	r18, r24
     886:	22 0f       	add	r18, r18
     888:	33 1f       	adc	r19, r19
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	82 0f       	add	r24, r18
     898:	93 1f       	adc	r25, r19
     89a:	9a 01       	movw	r18, r20
     89c:	28 1b       	sub	r18, r24
     89e:	39 0b       	sbc	r19, r25
     8a0:	c9 01       	movw	r24, r18
     8a2:	8f 70       	andi	r24, 0x0F	; 15
     8a4:	88 0f       	add	r24, r24
     8a6:	8c 2b       	or	r24, r28
     8a8:	85 b9       	out	0x05, r24	; 5
			break;
     8aa:	64 c0       	rjmp	.+200    	; 0x974 <__stack+0x75>

		case 1:
			PORTB &= 0b00000001;												// resetando PB1 - PB7
     8ac:	85 b1       	in	r24, 0x05	; 5
     8ae:	81 70       	andi	r24, 0x01	; 1
     8b0:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b10100000;												// resetando PB5 e PB7, pino que habilita o display das dezenas
     8b2:	85 b1       	in	r24, 0x05	; 5
     8b4:	80 6a       	ori	r24, 0xA0	; 160
     8b6:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 10) % 10) & 0b00001111) << 1);		// separa o digito das unidades e coloca em PB0 - PB3
     8b8:	c5 b1       	in	r28, 0x05	; 5
     8ba:	9a 01       	movw	r18, r20
     8bc:	ad ec       	ldi	r26, 0xCD	; 205
     8be:	bc ec       	ldi	r27, 0xCC	; 204
     8c0:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
     8c4:	ac 01       	movw	r20, r24
     8c6:	56 95       	lsr	r21
     8c8:	47 95       	ror	r20
     8ca:	56 95       	lsr	r21
     8cc:	47 95       	ror	r20
     8ce:	56 95       	lsr	r21
     8d0:	47 95       	ror	r20
     8d2:	9a 01       	movw	r18, r20
     8d4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
     8d8:	96 95       	lsr	r25
     8da:	87 95       	ror	r24
     8dc:	96 95       	lsr	r25
     8de:	87 95       	ror	r24
     8e0:	96 95       	lsr	r25
     8e2:	87 95       	ror	r24
     8e4:	9c 01       	movw	r18, r24
     8e6:	22 0f       	add	r18, r18
     8e8:	33 1f       	adc	r19, r19
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	88 0f       	add	r24, r24
     8f4:	99 1f       	adc	r25, r25
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	9a 01       	movw	r18, r20
     8fc:	28 1b       	sub	r18, r24
     8fe:	39 0b       	sbc	r19, r25
     900:	c9 01       	movw	r24, r18
     902:	8f 70       	andi	r24, 0x0F	; 15
     904:	88 0f       	add	r24, r24
     906:	8c 2b       	or	r24, r28
     908:	85 b9       	out	0x05, r24	; 5
			break;
     90a:	34 c0       	rjmp	.+104    	; 0x974 <__stack+0x75>

		case 2:
			PORTB &= 0b00000001;												// resetando PB1 - PB7
     90c:	85 b1       	in	r24, 0x05	; 5
     90e:	81 70       	andi	r24, 0x01	; 1
     910:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b01100000;												// resetando PB5 e PB7, pino que habilita o display das centenas
     912:	85 b1       	in	r24, 0x05	; 5
     914:	80 66       	ori	r24, 0x60	; 96
     916:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 100) % 10) & 0b00001111) << 1);		// separa o digito das unidades e coloca em PB0 - PB3
     918:	c5 b1       	in	r28, 0x05	; 5
     91a:	9a 01       	movw	r18, r20
     91c:	36 95       	lsr	r19
     91e:	27 95       	ror	r18
     920:	36 95       	lsr	r19
     922:	27 95       	ror	r18
     924:	ab e7       	ldi	r26, 0x7B	; 123
     926:	b4 e1       	ldi	r27, 0x14	; 20
     928:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
     92c:	ac 01       	movw	r20, r24
     92e:	56 95       	lsr	r21
     930:	47 95       	ror	r20
     932:	9a 01       	movw	r18, r20
     934:	ad ec       	ldi	r26, 0xCD	; 205
     936:	bc ec       	ldi	r27, 0xCC	; 204
     938:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
     93c:	96 95       	lsr	r25
     93e:	87 95       	ror	r24
     940:	96 95       	lsr	r25
     942:	87 95       	ror	r24
     944:	96 95       	lsr	r25
     946:	87 95       	ror	r24
     948:	9c 01       	movw	r18, r24
     94a:	22 0f       	add	r18, r18
     94c:	33 1f       	adc	r19, r19
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	82 0f       	add	r24, r18
     95c:	93 1f       	adc	r25, r19
     95e:	9a 01       	movw	r18, r20
     960:	28 1b       	sub	r18, r24
     962:	39 0b       	sbc	r19, r25
     964:	c9 01       	movw	r24, r18
     966:	8f 70       	andi	r24, 0x0F	; 15
     968:	88 0f       	add	r24, r24
     96a:	8c 2b       	or	r24, r28
     96c:	85 b9       	out	0x05, r24	; 5
			cont_dig = -1;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cont_dig.2678>
			break;
		}
		cont_dig++;
     974:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <cont_dig.2678>
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cont_dig.2678>
		*flag_disparo = 0;
     97e:	10 82       	st	Z, r1
	}
}
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <anima_ADC>:
	}
}

// funcao responsavel por configurar o ADC da aceleracao, temperatura e bateria
void anima_ADC(uint16_t *bateria, uint16_t *temperatura, uint8_t *flag_disparo)
{
     984:	8f 92       	push	r8
     986:	9f 92       	push	r9
     988:	af 92       	push	r10
     98a:	bf 92       	push	r11
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	9c 01       	movw	r18, r24
	// declarando variavel local
	static uint8_t cont_dig = 0;

	// condicao com *flag_disparo = &flag_5ms (sempre que &flag_5ms for true ele dispara
	if (*flag_disparo)
     99a:	fa 01       	movw	r30, r20
     99c:	90 81       	ld	r25, Z
     99e:	99 23       	and	r25, r25
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <anima_ADC+0x20>
     9a2:	87 c0       	rjmp	.+270    	; 0xab2 <anima_ADC+0x12e>
     9a4:	ea 01       	movw	r28, r20
     9a6:	7b 01       	movw	r14, r22
     9a8:	89 01       	movw	r16, r18
	{
		// switch case responsavel por dividir o acionamento em 3 partes
		switch(cont_dig)
     9aa:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
     9ae:	91 30       	cpi	r25, 0x01	; 1
     9b0:	d1 f0       	breq	.+52     	; 0x9e6 <anima_ADC+0x62>
     9b2:	18 f0       	brcs	.+6      	; 0x9ba <anima_ADC+0x36>
     9b4:	92 30       	cpi	r25, 0x02	; 2
     9b6:	71 f1       	breq	.+92     	; 0xa14 <anima_ADC+0x90>
     9b8:	76 c0       	rjmp	.+236    	; 0xaa6 <anima_ADC+0x122>
		{
		case 0: // canal 0 - ADMUX funciona como acelerador
			ADMUX = 0b01000000; // ADMUX 0
     9ba:	80 e4       	ldi	r24, 0x40	; 64
     9bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			acelerador = ADC;
     9c0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9c4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     9c8:	a0 e0       	ldi	r26, 0x00	; 0
     9ca:	b0 e0       	ldi	r27, 0x00	; 0
     9cc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <acelerador>
     9d0:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <acelerador+0x1>
     9d4:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <acelerador+0x2>
     9d8:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <acelerador+0x3>
			OCR2B = acelerador_sub;
     9dc:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <acelerador_sub>
     9e0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			break;
     9e4:	60 c0       	rjmp	.+192    	; 0xaa6 <anima_ADC+0x122>

		case 1: // canal 1 - ADMUX funciona como bateria
			ADMUX = 0b01000001; // ADMUX 1
     9e6:	81 e4       	ldi	r24, 0x41	; 65
     9e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			*bateria = (((double)100 / 1023) * ADC);
     9ec:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9f0:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatunsisf>
     9fc:	2d e0       	ldi	r18, 0x0D	; 13
     9fe:	32 e3       	ldi	r19, 0x32	; 50
     a00:	48 ec       	ldi	r20, 0xC8	; 200
     a02:	5d e3       	ldi	r21, 0x3D	; 61
     a04:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     a08:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fixunssfsi>
     a0c:	f8 01       	movw	r30, r16
     a0e:	71 83       	std	Z+1, r23	; 0x01
     a10:	60 83       	st	Z, r22
			break;
     a12:	49 c0       	rjmp	.+146    	; 0xaa6 <anima_ADC+0x122>

		case 2: // canal 2 - ADMUX funciona como acelerador
			ADMUX = 0b01000010; // ADMUX 2
     a14:	82 e4       	ldi	r24, 0x42	; 66
     a16:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			// equacao de tensao		[Vt = (5/1023)*ADC]
			// equacao de resistencia	[Rt = (1000*Vt)/(5 - Vt)]
			// equacao de temperatura	[T = 2,6*Rt - 260]
			*temperatura = (((double)2.6 * (((double)1000 * (((double)5 / 1023) * ADC)) / (5 - (((double)5 / 1023) * ADC)))) - 260);
     a1a:	08 e7       	ldi	r16, 0x78	; 120
     a1c:	10 e0       	ldi	r17, 0x00	; 0
     a1e:	f8 01       	movw	r30, r16
     a20:	60 81       	ld	r22, Z
     a22:	71 81       	ldd	r23, Z+1	; 0x01
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatunsisf>
     a2c:	2a e0       	ldi	r18, 0x0A	; 10
     a2e:	38 e2       	ldi	r19, 0x28	; 40
     a30:	40 ea       	ldi	r20, 0xA0	; 160
     a32:	5b e3       	ldi	r21, 0x3B	; 59
     a34:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	4a e7       	ldi	r20, 0x7A	; 122
     a3e:	54 e4       	ldi	r21, 0x44	; 68
     a40:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     a44:	4b 01       	movw	r8, r22
     a46:	5c 01       	movw	r10, r24
     a48:	f8 01       	movw	r30, r16
     a4a:	60 81       	ld	r22, Z
     a4c:	71 81       	ldd	r23, Z+1	; 0x01
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <__floatunsisf>
     a56:	2a e0       	ldi	r18, 0x0A	; 10
     a58:	38 e2       	ldi	r19, 0x28	; 40
     a5a:	40 ea       	ldi	r20, 0xA0	; 160
     a5c:	5b e3       	ldi	r21, 0x3B	; 59
     a5e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     a62:	9b 01       	movw	r18, r22
     a64:	ac 01       	movw	r20, r24
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 ea       	ldi	r24, 0xA0	; 160
     a6c:	90 e4       	ldi	r25, 0x40	; 64
     a6e:	0e 94 81 0c 	call	0x1902	; 0x1902 <__subsf3>
     a72:	9b 01       	movw	r18, r22
     a74:	ac 01       	movw	r20, r24
     a76:	c5 01       	movw	r24, r10
     a78:	b4 01       	movw	r22, r8
     a7a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__divsf3>
     a7e:	26 e6       	ldi	r18, 0x66	; 102
     a80:	36 e6       	ldi	r19, 0x66	; 102
     a82:	46 e2       	ldi	r20, 0x26	; 38
     a84:	50 e4       	ldi	r21, 0x40	; 64
     a86:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <__mulsf3>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	42 e8       	ldi	r20, 0x82	; 130
     a90:	53 e4       	ldi	r21, 0x43	; 67
     a92:	0e 94 81 0c 	call	0x1902	; 0x1902 <__subsf3>
     a96:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__fixunssfsi>
     a9a:	f7 01       	movw	r30, r14
     a9c:	71 83       	std	Z+1, r23	; 0x01
     a9e:	60 83       	st	Z, r22
			cont_dig = -1;
     aa0:	8f ef       	ldi	r24, 0xFF	; 255
     aa2:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			break;
		}
		cont_dig++;
     aa6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     aaa:	8f 5f       	subi	r24, 0xFF	; 255
     aac:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
		*flag_disparo = 0;
     ab0:	18 82       	st	Y, r1
	}
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	ef 90       	pop	r14
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	08 95       	ret

00000ac8 <anima_LCD>:
	}
}

// funcao responsavel por configurar e mostrar o LCD SSD1306
void anima_LCD(uint16_t diametro_pneu_cm, uint16_t rpm_motor, uint16_t distancia_hodometro_km, uint16_t distancia_objeto_cm, uint8_t *flag_disparo)
{
     ac8:	8f 92       	push	r8
     aca:	9f 92       	push	r9
     acc:	af 92       	push	r10
     ace:	bf 92       	push	r11
     ad0:	cf 92       	push	r12
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ec 01       	movw	r28, r24
     ae2:	4b 01       	movw	r8, r22
     ae4:	6a 01       	movw	r12, r20
     ae6:	59 01       	movw	r10, r18
     ae8:	78 01       	movw	r14, r16
	// chamada do prototipo da funcao ADC
	anima_ADC(&Bateria_per, &Temperatura_C, &flag_5ms);
     aea:	42 e8       	ldi	r20, 0x82	; 130
     aec:	51 e0       	ldi	r21, 0x01	; 1
     aee:	63 e7       	ldi	r22, 0x73	; 115
     af0:	71 e0       	ldi	r23, 0x01	; 1
     af2:	85 e7       	ldi	r24, 0x75	; 117
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 c2 04 	call	0x984	; 0x984 <anima_ADC>

	// condicao com *flag_disparo = &flag_500ms (sempre que &flag_5ms for true ele dispara
	if(*flag_disparo)
     afa:	f8 01       	movw	r30, r16
     afc:	80 81       	ld	r24, Z
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <anima_LCD+0x3c>
     b02:	d4 c0       	rjmp	.+424    	; 0xcac <anima_LCD+0x1e4>
	{
		// iniciando o SSD1306 e configurando o display
		GLCD_Setup();											// chamada do setup() para inicializar o display
     b04:	0e 94 ed 08 	call	0x11da	; 0x11da <GLCD_Setup>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);			// chamada do setFont para chamar o tamanho, cor e tipo de fonte
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	48 e0       	ldi	r20, 0x08	; 8
     b0c:	65 e0       	ldi	r22, 0x05	; 5
     b0e:	88 e6       	ldi	r24, 0x68	; 104
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 cf 0a 	call	0x159e	; 0x159e <GLCD_SetFont>
		GLCD_InvertScreen();
     b16:	0e 94 bf 0a 	call	0x157e	; 0x157e <GLCD_InvertScreen>
		GLCD_Clear();											// limpando o display
     b1a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <GLCD_Clear>
		GLCD_GotoXY(3, 2);										// demarcando a posicao da string seguinte
     b1e:	62 e0       	ldi	r22, 0x02	; 2
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintString("LASD Car");							// printando uma string no display
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_DrawRectangle(1, 1, 50, 10 , GLCD_Black);			// printando um retagulo no display de borda preta em dada posicao desejada
     b2e:	0f ef       	ldi	r16, 0xFF	; 255
     b30:	2a e0       	ldi	r18, 0x0A	; 10
     b32:	42 e3       	ldi	r20, 0x32	; 50
     b34:	61 e0       	ldi	r22, 0x01	; 1
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	0e 94 4d 0a 	call	0x149a	; 0x149a <GLCD_DrawRectangle>
		GLCD_GotoXY(2, 16);										// demarcando a posicao da string seguinte
     b3c:	60 e1       	ldi	r22, 0x10	; 16
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintInteger(rpm_motor);							// printando uma variavel no display
     b44:	b4 01       	movw	r22, r8
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	0e 94 16 0c 	call	0x182c	; 0x182c <GLCD_PrintInteger>
		GLCD_PrintString(" rpm");								// printando uma string no display
     b4e:	8b e0       	ldi	r24, 0x0B	; 11
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_GotoXY(2, 27);										// demarcando a posicao da string seguinte
     b56:	6b e1       	ldi	r22, 0x1B	; 27
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintString("Sonar: ");							// printando uma string no display
     b5e:	80 e1       	ldi	r24, 0x10	; 16
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_PrintInteger(distancia_objeto_cm);					// printando uma variavel no display
     b66:	b5 01       	movw	r22, r10
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 16 0c 	call	0x182c	; 0x182c <GLCD_PrintInteger>
		GLCD_PrintString("cm");									// printando uma string no display
     b70:	88 e1       	ldi	r24, 0x18	; 24
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_GotoXY(2, 40);										// demarcando a posicao da string seguinte
     b78:	68 e2       	ldi	r22, 0x28	; 40
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintString("D. Pneu: ");							// printando uma string no display
     b80:	8b e1       	ldi	r24, 0x1B	; 27
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_PrintInteger(diametro_pneu_cm);					// printando uma variavel no display
     b88:	be 01       	movw	r22, r28
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 16 0c 	call	0x182c	; 0x182c <GLCD_PrintInteger>
		GLCD_PrintString("cm");									// printando uma string no display
     b92:	88 e1       	ldi	r24, 0x18	; 24
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_GotoXY(20, 53);									// demarcando a posicao da string seguinte
     b9a:	65 e3       	ldi	r22, 0x35	; 53
     b9c:	84 e1       	ldi	r24, 0x14	; 20
     b9e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintInteger(distancia_hodometro_km);				// printando uma variavel no display
     ba2:	b6 01       	movw	r22, r12
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 16 0c 	call	0x182c	; 0x182c <GLCD_PrintInteger>
		GLCD_PrintString("km");									// printando uma string no display
     bac:	85 e2       	ldi	r24, 0x25	; 37
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_DrawRectangle(10, 50, 58, 62 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     bb4:	2e e3       	ldi	r18, 0x3E	; 62
     bb6:	4a e3       	ldi	r20, 0x3A	; 58
     bb8:	62 e3       	ldi	r22, 0x32	; 50
     bba:	8a e0       	ldi	r24, 0x0A	; 10
     bbc:	0e 94 4d 0a 	call	0x149a	; 0x149a <GLCD_DrawRectangle>
		GLCD_DrawRectangle(90, 2, 125, 32 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     bc0:	20 e2       	ldi	r18, 0x20	; 32
     bc2:	4d e7       	ldi	r20, 0x7D	; 125
     bc4:	62 e0       	ldi	r22, 0x02	; 2
     bc6:	8a e5       	ldi	r24, 0x5A	; 90
     bc8:	0e 94 4d 0a 	call	0x149a	; 0x149a <GLCD_DrawRectangle>
		GLCD_GotoXY(93, 8);										// demarcando a posicao da string seguinte
     bcc:	68 e0       	ldi	r22, 0x08	; 8
     bce:	8d e5       	ldi	r24, 0x5D	; 93
     bd0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintInteger(Bateria_per);							// printando uma variavel no display
     bd4:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <Bateria_per>
     bd8:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <Bateria_per+0x1>
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 16 0c 	call	0x182c	; 0x182c <GLCD_PrintInteger>
		GLCD_PrintString(" %");									// printando uma string no display
     be4:	88 e2       	ldi	r24, 0x28	; 40
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_GotoXY(93, 21);									// demarcando a posicao da string seguinte
     bec:	65 e1       	ldi	r22, 0x15	; 21
     bee:	8d e5       	ldi	r24, 0x5D	; 93
     bf0:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
		GLCD_PrintInteger(Temperatura_C);						// printando uma variavel no display
     bf4:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <Temperatura_C>
     bf8:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <Temperatura_C+0x1>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 16 0c 	call	0x182c	; 0x182c <GLCD_PrintInteger>
		GLCD_PrintString(" C");									// printando uma string no display
     c04:	8b e2       	ldi	r24, 0x2B	; 43
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
		GLCD_DrawRectangle(90, 35, 125, 60 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     c0c:	2c e3       	ldi	r18, 0x3C	; 60
     c0e:	4d e7       	ldi	r20, 0x7D	; 125
     c10:	63 e2       	ldi	r22, 0x23	; 35
     c12:	8a e5       	ldi	r24, 0x5A	; 90
     c14:	0e 94 4d 0a 	call	0x149a	; 0x149a <GLCD_DrawRectangle>
		GLCD_DrawRectangle(94, 39, 121, 56 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     c18:	28 e3       	ldi	r18, 0x38	; 56
     c1a:	49 e7       	ldi	r20, 0x79	; 121
     c1c:	67 e2       	ldi	r22, 0x27	; 39
     c1e:	8e e5       	ldi	r24, 0x5E	; 94
     c20:	0e 94 4d 0a 	call	0x149a	; 0x149a <GLCD_DrawRectangle>
		GLCD_DrawRectangle(60, 1, 80, 21 , GLCD_Black);			// printando um retagulo no display de borda preta em dada posicao desejada
     c24:	25 e1       	ldi	r18, 0x15	; 21
     c26:	40 e5       	ldi	r20, 0x50	; 80
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	8c e3       	ldi	r24, 0x3C	; 60
     c2c:	0e 94 4d 0a 	call	0x149a	; 0x149a <GLCD_DrawRectangle>

		// condicao responsavel por identificar se o motor_dc se encontra [P] - parado, ou girando para [D] - direita, [E] - esquerda
		if(!(PIND & 0b10000000))
     c30:	4f 99       	sbic	0x09, 7	; 9
     c32:	07 c0       	rjmp	.+14     	; 0xc42 <anima_LCD+0x17a>
		{
			GLCD_GotoXY(106, 45);								// demarcando a posicao da string seguinte
     c34:	6d e2       	ldi	r22, 0x2D	; 45
     c36:	8a e6       	ldi	r24, 0x6A	; 106
     c38:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
			GLCD_PrintChar('P');								// printando uma variavel [P] no display
     c3c:	80 e5       	ldi	r24, 0x50	; 80
     c3e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
		}
		if((PIND & 0b10000000))
     c42:	4f 9b       	sbis	0x09, 7	; 9
     c44:	12 c0       	rjmp	.+36     	; 0xc6a <anima_LCD+0x1a2>
		{
			if(!(PIND & 0b01000000))
     c46:	4e 99       	sbic	0x09, 6	; 9
     c48:	07 c0       	rjmp	.+14     	; 0xc58 <anima_LCD+0x190>
			{
				GLCD_GotoXY(106, 45);							// demarcando a posicao da string seguinte
     c4a:	6d e2       	ldi	r22, 0x2D	; 45
     c4c:	8a e6       	ldi	r24, 0x6A	; 106
     c4e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
				GLCD_PrintChar('D');							// printando uma variavel [D] no display
     c52:	84 e4       	ldi	r24, 0x44	; 68
     c54:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
			}
			if((PIND & 0b01000000))
     c58:	4e 9b       	sbis	0x09, 6	; 9
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <anima_LCD+0x1a2>
			{
				GLCD_GotoXY(106, 45);							// demarcando a posicao da string seguinte
     c5c:	6d e2       	ldi	r22, 0x2D	; 45
     c5e:	8a e6       	ldi	r24, 0x6A	; 106
     c60:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
				GLCD_PrintChar('E');							// printando uma variavel [E] no display
     c64:	85 e4       	ldi	r24, 0x45	; 69
     c66:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
			}
		}
		if(diametro_pneu_cm > 2)
     c6a:	c3 30       	cpi	r28, 0x03	; 3
     c6c:	d1 05       	cpc	r29, r1
     c6e:	38 f0       	brcs	.+14     	; 0xc7e <anima_LCD+0x1b6>
		{
			GLCD_GotoXY(68, 8);									// demarcando a posicao da string seguinte
     c70:	68 e0       	ldi	r22, 0x08	; 8
     c72:	84 e4       	ldi	r24, 0x44	; 68
     c74:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
			GLCD_PrintChar('>');								// printando uma variavel [>] no display
     c78:	8e e3       	ldi	r24, 0x3E	; 62
     c7a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
		}
		if(diametro_pneu_cm < 3)
     c7e:	c3 30       	cpi	r28, 0x03	; 3
     c80:	d1 05       	cpc	r29, r1
     c82:	38 f4       	brcc	.+14     	; 0xc92 <anima_LCD+0x1ca>
		{
			GLCD_GotoXY(68, 8);									// demarcando a posicao da string seguinte
     c84:	68 e0       	ldi	r22, 0x08	; 8
     c86:	84 e4       	ldi	r24, 0x44	; 68
     c88:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
			GLCD_PrintChar('!');								// printando uma variavel [!] no display
     c8c:	81 e2       	ldi	r24, 0x21	; 33
     c8e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
		}
		if(diametro_pneu_cm == 3)
     c92:	23 97       	sbiw	r28, 0x03	; 3
     c94:	39 f4       	brne	.+14     	; 0xca4 <anima_LCD+0x1dc>
		{
			GLCD_GotoXY(68, 8);									// demarcando a posicao da string seguinte
     c96:	68 e0       	ldi	r22, 0x08	; 8
     c98:	84 e4       	ldi	r24, 0x44	; 68
     c9a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
			GLCD_PrintChar('?');								// printando uma variavel [?] no display
     c9e:	8f e3       	ldi	r24, 0x3F	; 63
     ca0:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
		}
		*flag_disparo = 0;
     ca4:	f7 01       	movw	r30, r14
     ca6:	10 82       	st	Z, r1
		GLCD_Render();
     ca8:	0e 94 b6 08 	call	0x116c	; 0x116c <GLCD_Render>
	}
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	8f 90       	pop	r8
     cc4:	08 95       	ret

00000cc6 <anima_LED>:

// funcao responsavel acionar de forma automatica os LED do carro
void anima_LED(uint16_t diametro_pneu_cm, uint16_t velocidade_carro, uint8_t *flag_disparo)
{
	// condicao responsavel por acionar o farol alto caso o carro esteja em movimento
	if(velocidade_carro > 0)
     cc6:	67 2b       	or	r22, r23
     cc8:	29 f0       	breq	.+10     	; 0xcd4 <anima_LED+0xe>
	{
		PORTC ^= 0b01000000;	// ligando LED PORTC6
     cca:	98 b1       	in	r25, 0x08	; 8
     ccc:	80 e4       	ldi	r24, 0x40	; 64
     cce:	89 27       	eor	r24, r25
     cd0:	88 b9       	out	0x08, r24	; 8
     cd2:	04 c0       	rjmp	.+8      	; 0xcdc <anima_LED+0x16>
	}
	else
		PORTC ^= 0b00001000;	// desligando LED PORTC6, se carro estiver parado
     cd4:	98 b1       	in	r25, 0x08	; 8
     cd6:	88 e0       	ldi	r24, 0x08	; 8
     cd8:	89 27       	eor	r24, r25
     cda:	88 b9       	out	0x08, r24	; 8

	// condicao responsavel por acionar o pisca alerta caso o carro esteja em situacao adversa como parado de forma desconhecida ou pneu furado com diametro reduzido exageradamente
	if(*flag_disparo)
     cdc:	fa 01       	movw	r30, r20
     cde:	80 81       	ld	r24, Z
     ce0:	88 23       	and	r24, r24
     ce2:	89 f0       	breq	.+34     	; 0xd06 <anima_LED+0x40>
	{
		if(Diametro_pneu_cm <= 3)
     ce4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ce8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cec:	04 97       	sbiw	r24, 0x04	; 4
     cee:	28 f4       	brcc	.+10     	; 0xcfa <anima_LED+0x34>
		{
			PORTC ^= 0b00001000;	// ligando LED PORTC3
     cf0:	98 b1       	in	r25, 0x08	; 8
     cf2:	88 e0       	ldi	r24, 0x08	; 8
     cf4:	89 27       	eor	r24, r25
     cf6:	88 b9       	out	0x08, r24	; 8
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <anima_LED+0x3c>
		}
		else
			PORTC ^= 0b01000000;	// desligando LED PORTC3
     cfa:	98 b1       	in	r25, 0x08	; 8
     cfc:	80 e4       	ldi	r24, 0x40	; 64
     cfe:	89 27       	eor	r24, r25
     d00:	88 b9       	out	0x08, r24	; 8
		*flag_disparo = 0;
     d02:	fa 01       	movw	r30, r20
     d04:	10 82       	st	Z, r1
     d06:	08 95       	ret

00000d08 <main>:
void anima_LED(uint16_t diametro_pneu_cm, uint16_t velocidade_carro, uint8_t *flag_disparo);

int main(void)
{
	// chamada da funcao usart de inicializacao
	usart_init(MYUBRR);
     d08:	87 e6       	ldi	r24, 0x67	; 103
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 bd 03 	call	0x77a	; 0x77a <usart_init>

	// chamando funcao que configura GPIO, interruptores, timers, ADC, PWM
	configuracao();
     d10:	0e 94 73 01 	call	0x2e6	; 0x2e6 <configuracao>

	// loop responsavel por separar e ler os dados do diametro que serao armazenados na eeprom, nos espacos 0 ate 3
	for (int i = 0; i < 4; i++)
     d14:	c0 e0       	ldi	r28, 0x00	; 0
     d16:	d0 e0       	ldi	r29, 0x00	; 0
     d18:	10 c0       	rjmp	.+32     	; 0xd3a <main+0x32>
	{
		aux_eeprom[i] = eeprom_read_byte(i);
     d1a:	ce 01       	movw	r24, r28
     d1c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     d20:	fe 01       	movw	r30, r28
     d22:	e9 5b       	subi	r30, 0xB9	; 185
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 83       	st	Z, r24
		Diametro_pneu_cm = atoi(aux_eeprom); // convertendo de char para int
     d28:	87 e4       	ldi	r24, 0x47	; 71
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <atoi>
     d30:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d34:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	// chamando funcao que configura GPIO, interruptores, timers, ADC, PWM
	configuracao();

	// loop responsavel por separar e ler os dados do diametro que serao armazenados na eeprom, nos espacos 0 ate 3
	for (int i = 0; i < 4; i++)
     d38:	21 96       	adiw	r28, 0x01	; 1
     d3a:	c4 30       	cpi	r28, 0x04	; 4
     d3c:	d1 05       	cpc	r29, r1
     d3e:	6c f3       	brlt	.-38     	; 0xd1a <main+0x12>
     d40:	c4 e0       	ldi	r28, 0x04	; 4
     d42:	d0 e0       	ldi	r29, 0x00	; 0
     d44:	13 c0       	rjmp	.+38     	; 0xd6c <main+0x64>
	}

	// loop responsavel por separar e ler os dados do distancia que serao armazenados na eeprom, nos espacos 4 ate 8
	for (int i = 4; i < 9; i++)
	{
		aux_eeprom[i - 4] = eeprom_read_byte(i);
     d46:	8e 01       	movw	r16, r28
     d48:	04 50       	subi	r16, 0x04	; 4
     d4a:	11 09       	sbc	r17, r1
     d4c:	ce 01       	movw	r24, r28
     d4e:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     d52:	f8 01       	movw	r30, r16
     d54:	e9 5b       	subi	r30, 0xB9	; 185
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	80 83       	st	Z, r24
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
     d5a:	87 e4       	ldi	r24, 0x47	; 71
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <atoi>
     d62:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <Distancia_hodometro_km+0x1>
     d66:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <Distancia_hodometro_km>
		aux_eeprom[i] = eeprom_read_byte(i);
		Diametro_pneu_cm = atoi(aux_eeprom); // convertendo de char para int
	}

	// loop responsavel por separar e ler os dados do distancia que serao armazenados na eeprom, nos espacos 4 ate 8
	for (int i = 4; i < 9; i++)
     d6a:	21 96       	adiw	r28, 0x01	; 1
     d6c:	c9 30       	cpi	r28, 0x09	; 9
     d6e:	d1 05       	cpc	r29, r1
     d70:	54 f3       	brlt	.-44     	; 0xd46 <main+0x3e>
	{
		aux_eeprom[i - 4] = eeprom_read_byte(i);
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
	}
	Distancia_hodometro_km_pass = Distancia_hodometro_km * 100000;
     d72:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <Distancia_hodometro_km>
     d76:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <Distancia_hodometro_km+0x1>
     d7a:	20 ea       	ldi	r18, 0xA0	; 160
     d7c:	36 e8       	ldi	r19, 0x86	; 134
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <__muluhisi3>
     d86:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <Distancia_hodometro_km_pass>
     d8a:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     d8e:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     d92:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <Distancia_hodometro_km_pass+0x3>

	// loop responsavel por separar e ler os dados da temperatura que serao armazenados na eeprom, nos espacos 9 ate 12
	for (int i = 9; i < 13; i++)
     d96:	c9 e0       	ldi	r28, 0x09	; 9
     d98:	d0 e0       	ldi	r29, 0x00	; 0
     d9a:	13 c0       	rjmp	.+38     	; 0xdc2 <main+0xba>
	{
		aux_eeprom[i - 9] = eeprom_read_byte(i);
     d9c:	8e 01       	movw	r16, r28
     d9e:	09 50       	subi	r16, 0x09	; 9
     da0:	11 09       	sbc	r17, r1
     da2:	ce 01       	movw	r24, r28
     da4:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     da8:	f8 01       	movw	r30, r16
     daa:	e9 5b       	subi	r30, 0xB9	; 185
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	80 83       	st	Z, r24
		Temperatura_C = atoi(aux_eeprom); // convertendo de char para int
     db0:	87 e4       	ldi	r24, 0x47	; 71
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <atoi>
     db8:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <Temperatura_C+0x1>
     dbc:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Temperatura_C>
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
	}
	Distancia_hodometro_km_pass = Distancia_hodometro_km * 100000;

	// loop responsavel por separar e ler os dados da temperatura que serao armazenados na eeprom, nos espacos 9 ate 12
	for (int i = 9; i < 13; i++)
     dc0:	21 96       	adiw	r28, 0x01	; 1
     dc2:	cd 30       	cpi	r28, 0x0D	; 13
     dc4:	d1 05       	cpc	r29, r1
     dc6:	54 f3       	brlt	.-44     	; 0xd9c <main+0x94>
     dc8:	cd e0       	ldi	r28, 0x0D	; 13
     dca:	d0 e0       	ldi	r29, 0x00	; 0
     dcc:	13 c0       	rjmp	.+38     	; 0xdf4 <main+0xec>
	}

	// loop responsavel por separar e ler os dados da bateria que serao armazenados na eeprom, nos espacos 13 ate 16
	for (int i = 13; i < 17; i++)
	{
		aux_eeprom[i - 13] = eeprom_read_byte(i);
     dce:	8e 01       	movw	r16, r28
     dd0:	0d 50       	subi	r16, 0x0D	; 13
     dd2:	11 09       	sbc	r17, r1
     dd4:	ce 01       	movw	r24, r28
     dd6:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <eeprom_read_byte>
     dda:	f8 01       	movw	r30, r16
     ddc:	e9 5b       	subi	r30, 0xB9	; 185
     dde:	fe 4f       	sbci	r31, 0xFE	; 254
     de0:	80 83       	st	Z, r24
		Bateria_per = atoi(aux_eeprom); // convertendo de char para int
     de2:	87 e4       	ldi	r24, 0x47	; 71
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <atoi>
     dea:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <Bateria_per+0x1>
     dee:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <Bateria_per>
		aux_eeprom[i - 9] = eeprom_read_byte(i);
		Temperatura_C = atoi(aux_eeprom); // convertendo de char para int
	}

	// loop responsavel por separar e ler os dados da bateria que serao armazenados na eeprom, nos espacos 13 ate 16
	for (int i = 13; i < 17; i++)
     df2:	21 96       	adiw	r28, 0x01	; 1
     df4:	c1 31       	cpi	r28, 0x11	; 17
     df6:	d1 05       	cpc	r29, r1
     df8:	54 f3       	brlt	.-44     	; 0xdce <main+0xc6>
	}

	while (1)
	{
		// chamada da funcao responsavel por retornar a velocidade no display 7-Seg com flag_5ms
		anima_velocidade(Velocidade_carro_kmH, &flag_5ms);
     dfa:	62 e8       	ldi	r22, 0x82	; 130
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Velocidade_carro_kmH>
     e02:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Velocidade_carro_kmH+0x1>
     e06:	0e 94 20 04 	call	0x840	; 0x840 <anima_velocidade>

		// funcao responsavel por retornar variaveis para o display nokia com flag_500ms
		anima_LCD(Diametro_pneu_cm, RPM_motor, Distancia_hodometro_km, Distancia_objeto_cm, &flag_500ms);
     e0a:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <Distancia_objeto_cm>
     e0e:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <Distancia_objeto_cm+0x1>
     e12:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <Distancia_hodometro_km>
     e16:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <Distancia_hodometro_km+0x1>
     e1a:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <RPM_motor>
     e1e:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <RPM_motor+0x1>
     e22:	01 e8       	ldi	r16, 0x81	; 129
     e24:	11 e0       	ldi	r17, 0x01	; 1
     e26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e2a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e2e:	0e 94 64 05 	call	0xac8	; 0xac8 <anima_LCD>

		// funcao responsavel acionar de forma automatica os LED com flag_250ms
		anima_LED(Diametro_pneu_cm, Velocidade_carro_kmH, &flag_250ms);
     e32:	60 91 7d 01 	lds	r22, 0x017D	; 0x80017d <Velocidade_carro_kmH>
     e36:	70 91 7e 01 	lds	r23, 0x017E	; 0x80017e <Velocidade_carro_kmH+0x1>
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	51 e0       	ldi	r21, 0x01	; 1
     e3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e42:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e46:	0e 94 63 06 	call	0xcc6	; 0xcc6 <anima_LED>

		itoa(Diametro_pneu_cm, aux_2_eeprom, 10);	// convertendo de int para char
     e4a:	4a e0       	ldi	r20, 0x0A	; 10
     e4c:	50 e0       	ldi	r21, 0x00	; 0
     e4e:	65 e3       	ldi	r22, 0x35	; 53
     e50:	71 e0       	ldi	r23, 0x01	; 1
     e52:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e56:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e5a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <itoa>
		// loop responsavel por separar e inserir os dados do diametro na eeprom, nos espacos 0 ate 3
		for (int i = 0; i < 4; i++)
     e5e:	c0 e0       	ldi	r28, 0x00	; 0
     e60:	d0 e0       	ldi	r29, 0x00	; 0
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <main+0x16c>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
     e64:	fe 01       	movw	r30, r28
     e66:	eb 5c       	subi	r30, 0xCB	; 203
     e68:	fe 4f       	sbci	r31, 0xFE	; 254
     e6a:	60 81       	ld	r22, Z
     e6c:	ce 01       	movw	r24, r28
     e6e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_write_byte>
		// funcao responsavel acionar de forma automatica os LED com flag_250ms
		anima_LED(Diametro_pneu_cm, Velocidade_carro_kmH, &flag_250ms);

		itoa(Diametro_pneu_cm, aux_2_eeprom, 10);	// convertendo de int para char
		// loop responsavel por separar e inserir os dados do diametro na eeprom, nos espacos 0 ate 3
		for (int i = 0; i < 4; i++)
     e72:	21 96       	adiw	r28, 0x01	; 1
     e74:	c4 30       	cpi	r28, 0x04	; 4
     e76:	d1 05       	cpc	r29, r1
     e78:	ac f3       	brlt	.-22     	; 0xe64 <main+0x15c>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
		}
		itoa(Distancia_hodometro_km, aux_2_eeprom, 10); // convertendo de int para char
     e7a:	4a e0       	ldi	r20, 0x0A	; 10
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	65 e3       	ldi	r22, 0x35	; 53
     e80:	71 e0       	ldi	r23, 0x01	; 1
     e82:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <Distancia_hodometro_km>
     e86:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <Distancia_hodometro_km+0x1>
     e8a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <itoa>
		// loop responsavel por separar e inserir os dados da distancia na eeprom, nos espacos 4 ate 8
		for (int i = 4; i < 9; i++)
     e8e:	c4 e0       	ldi	r28, 0x04	; 4
     e90:	d0 e0       	ldi	r29, 0x00	; 0
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <main+0x19c>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 4]);
     e94:	fe 01       	movw	r30, r28
     e96:	ef 5c       	subi	r30, 0xCF	; 207
     e98:	fe 4f       	sbci	r31, 0xFE	; 254
     e9a:	60 81       	ld	r22, Z
     e9c:	ce 01       	movw	r24, r28
     e9e:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_write_byte>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
		}
		itoa(Distancia_hodometro_km, aux_2_eeprom, 10); // convertendo de int para char
		// loop responsavel por separar e inserir os dados da distancia na eeprom, nos espacos 4 ate 8
		for (int i = 4; i < 9; i++)
     ea2:	21 96       	adiw	r28, 0x01	; 1
     ea4:	c9 30       	cpi	r28, 0x09	; 9
     ea6:	d1 05       	cpc	r29, r1
     ea8:	ac f3       	brlt	.-22     	; 0xe94 <main+0x18c>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 4]);
		}

		// condicao responsavel por limitar a isercao dos dados da temperatura na eeprom quando forem maiores que o anterior
		if(Temperatura_C > temperatura_pass)
     eaa:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Temperatura_C>
     eae:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Temperatura_C+0x1>
     eb2:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <temperatura_pass>
     eb6:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <temperatura_pass+0x1>
     eba:	28 17       	cp	r18, r24
     ebc:	39 07       	cpc	r19, r25
     ebe:	a0 f4       	brcc	.+40     	; 0xee8 <main+0x1e0>
		{
			itoa(Temperatura_C, aux_2_eeprom, 10); // convertendo de int para char
     ec0:	4a e0       	ldi	r20, 0x0A	; 10
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	65 e3       	ldi	r22, 0x35	; 53
     ec6:	71 e0       	ldi	r23, 0x01	; 1
     ec8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <itoa>
			// loop responsavel por separar e inserir os dados da temperatura na eeprom, nos espacos 9 ate 12
			for (int i = 9; i < 13; i++)
     ecc:	c9 e0       	ldi	r28, 0x09	; 9
     ece:	d0 e0       	ldi	r29, 0x00	; 0
     ed0:	08 c0       	rjmp	.+16     	; 0xee2 <main+0x1da>
			{
				eeprom_write_byte(i, aux_2_eeprom[i - 9]);
     ed2:	fe 01       	movw	r30, r28
     ed4:	e4 5d       	subi	r30, 0xD4	; 212
     ed6:	fe 4f       	sbci	r31, 0xFE	; 254
     ed8:	60 81       	ld	r22, Z
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_write_byte>
		// condicao responsavel por limitar a isercao dos dados da temperatura na eeprom quando forem maiores que o anterior
		if(Temperatura_C > temperatura_pass)
		{
			itoa(Temperatura_C, aux_2_eeprom, 10); // convertendo de int para char
			// loop responsavel por separar e inserir os dados da temperatura na eeprom, nos espacos 9 ate 12
			for (int i = 9; i < 13; i++)
     ee0:	21 96       	adiw	r28, 0x01	; 1
     ee2:	cd 30       	cpi	r28, 0x0D	; 13
     ee4:	d1 05       	cpc	r29, r1
     ee6:	ac f3       	brlt	.-22     	; 0xed2 <main+0x1ca>
			{
				eeprom_write_byte(i, aux_2_eeprom[i - 9]);
			}
		}
		temperatura_pass = (unsigned int)Temperatura_C;
     ee8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Temperatura_C>
     eec:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Temperatura_C+0x1>
     ef0:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <temperatura_pass+0x1>
     ef4:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <temperatura_pass>

		itoa(Bateria_per, aux_2_eeprom, 10); // convertendo de int para char
     ef8:	4a e0       	ldi	r20, 0x0A	; 10
     efa:	50 e0       	ldi	r21, 0x00	; 0
     efc:	65 e3       	ldi	r22, 0x35	; 53
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <Bateria_per>
     f04:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <Bateria_per+0x1>
     f08:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <itoa>
		// loop responsavel por separar e inserir os dados da bateria na eeprom, nos espacos 13 ate 16
		for (int i = 13; i < 17; i++)
     f0c:	cd e0       	ldi	r28, 0x0D	; 13
     f0e:	d0 e0       	ldi	r29, 0x00	; 0
     f10:	08 c0       	rjmp	.+16     	; 0xf22 <main+0x21a>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 13]);
     f12:	fe 01       	movw	r30, r28
     f14:	e8 5d       	subi	r30, 0xD8	; 216
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	60 81       	ld	r22, Z
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <eeprom_write_byte>
		}
		temperatura_pass = (unsigned int)Temperatura_C;

		itoa(Bateria_per, aux_2_eeprom, 10); // convertendo de int para char
		// loop responsavel por separar e inserir os dados da bateria na eeprom, nos espacos 13 ate 16
		for (int i = 13; i < 17; i++)
     f20:	21 96       	adiw	r28, 0x01	; 1
     f22:	c1 31       	cpi	r28, 0x11	; 17
     f24:	d1 05       	cpc	r29, r1
     f26:	ac f3       	brlt	.-22     	; 0xf12 <main+0x20a>
     f28:	68 cf       	rjmp	.-304    	; 0xdfa <main+0xf2>

00000f2a <GLCD_BufferWrite>:
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
     f2a:	66 95       	lsr	r22
     f2c:	66 95       	lsr	r22
     f2e:	66 95       	lsr	r22
     f30:	e8 2f       	mov	r30, r24
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 e8       	ldi	r24, 0x80	; 128
     f36:	68 9f       	mul	r22, r24
     f38:	e0 0d       	add	r30, r0
     f3a:	f1 1d       	adc	r31, r1
     f3c:	11 24       	eor	r1, r1
     f3e:	e4 57       	subi	r30, 0x74	; 116
     f40:	fe 4f       	sbci	r31, 0xFE	; 254
     f42:	40 83       	st	Z, r20
     f44:	08 95       	ret

00000f46 <GLCD_BufferRead>:
     f46:	66 95       	lsr	r22
     f48:	66 95       	lsr	r22
     f4a:	66 95       	lsr	r22
     f4c:	e8 2f       	mov	r30, r24
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	68 9f       	mul	r22, r24
     f54:	e0 0d       	add	r30, r0
     f56:	f1 1d       	adc	r31, r1
     f58:	11 24       	eor	r1, r1
     f5a:	e4 57       	subi	r30, 0x74	; 116
     f5c:	fe 4f       	sbci	r31, 0xFE	; 254
     f5e:	80 81       	ld	r24, Z
     f60:	08 95       	ret

00000f62 <Int2bcd>:
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	fa 01       	movw	r30, r20
     f6c:	20 e3       	ldi	r18, 0x30	; 48
     f6e:	22 87       	std	Z+10, r18	; 0x0a
     f70:	21 87       	std	Z+9, r18	; 0x09
     f72:	20 87       	std	Z+8, r18	; 0x08
     f74:	27 83       	std	Z+7, r18	; 0x07
     f76:	26 83       	std	Z+6, r18	; 0x06
     f78:	25 83       	std	Z+5, r18	; 0x05
     f7a:	24 83       	std	Z+4, r18	; 0x04
     f7c:	23 83       	std	Z+3, r18	; 0x03
     f7e:	22 83       	std	Z+2, r18	; 0x02
     f80:	21 83       	std	Z+1, r18	; 0x01
     f82:	20 83       	st	Z, r18
     f84:	bb 23       	and	r27, r27
     f86:	4c f4       	brge	.+18     	; 0xf9a <Int2bcd+0x38>
     f88:	b0 95       	com	r27
     f8a:	a0 95       	com	r26
     f8c:	90 95       	com	r25
     f8e:	81 95       	neg	r24
     f90:	9f 4f       	sbci	r25, 0xFF	; 255
     f92:	af 4f       	sbci	r26, 0xFF	; 255
     f94:	bf 4f       	sbci	r27, 0xFF	; 255
     f96:	31 e0       	ldi	r19, 0x01	; 1
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <Int2bcd+0x48>
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	06 c0       	rjmp	.+12     	; 0xfaa <Int2bcd+0x48>
     f9e:	9a 5c       	subi	r25, 0xCA	; 202
     fa0:	aa 49       	sbci	r26, 0x9A	; 154
     fa2:	bb 43       	sbci	r27, 0x3B	; 59
     fa4:	21 81       	ldd	r18, Z+1	; 0x01
     fa6:	2f 5f       	subi	r18, 0xFF	; 255
     fa8:	21 83       	std	Z+1, r18	; 0x01
     faa:	81 15       	cp	r24, r1
     fac:	2a ec       	ldi	r18, 0xCA	; 202
     fae:	92 07       	cpc	r25, r18
     fb0:	2a e9       	ldi	r18, 0x9A	; 154
     fb2:	a2 07       	cpc	r26, r18
     fb4:	2b e3       	ldi	r18, 0x3B	; 59
     fb6:	b2 07       	cpc	r27, r18
     fb8:	94 f7       	brge	.-28     	; 0xf9e <Int2bcd+0x3c>
     fba:	06 c0       	rjmp	.+12     	; 0xfc8 <Int2bcd+0x66>
     fbc:	91 5e       	subi	r25, 0xE1	; 225
     fbe:	a5 4f       	sbci	r26, 0xF5	; 245
     fc0:	b5 40       	sbci	r27, 0x05	; 5
     fc2:	22 81       	ldd	r18, Z+2	; 0x02
     fc4:	2f 5f       	subi	r18, 0xFF	; 255
     fc6:	22 83       	std	Z+2, r18	; 0x02
     fc8:	81 15       	cp	r24, r1
     fca:	21 ee       	ldi	r18, 0xE1	; 225
     fcc:	92 07       	cpc	r25, r18
     fce:	25 ef       	ldi	r18, 0xF5	; 245
     fd0:	a2 07       	cpc	r26, r18
     fd2:	25 e0       	ldi	r18, 0x05	; 5
     fd4:	b2 07       	cpc	r27, r18
     fd6:	94 f7       	brge	.-28     	; 0xfbc <Int2bcd+0x5a>
     fd8:	07 c0       	rjmp	.+14     	; 0xfe8 <Int2bcd+0x86>
     fda:	80 58       	subi	r24, 0x80	; 128
     fdc:	96 49       	sbci	r25, 0x96	; 150
     fde:	a8 49       	sbci	r26, 0x98	; 152
     fe0:	b1 09       	sbc	r27, r1
     fe2:	23 81       	ldd	r18, Z+3	; 0x03
     fe4:	2f 5f       	subi	r18, 0xFF	; 255
     fe6:	23 83       	std	Z+3, r18	; 0x03
     fe8:	80 38       	cpi	r24, 0x80	; 128
     fea:	26 e9       	ldi	r18, 0x96	; 150
     fec:	92 07       	cpc	r25, r18
     fee:	28 e9       	ldi	r18, 0x98	; 152
     ff0:	a2 07       	cpc	r26, r18
     ff2:	b1 05       	cpc	r27, r1
     ff4:	94 f7       	brge	.-28     	; 0xfda <Int2bcd+0x78>
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <Int2bcd+0xa4>
     ff8:	80 54       	subi	r24, 0x40	; 64
     ffa:	92 44       	sbci	r25, 0x42	; 66
     ffc:	af 40       	sbci	r26, 0x0F	; 15
     ffe:	b1 09       	sbc	r27, r1
    1000:	24 81       	ldd	r18, Z+4	; 0x04
    1002:	2f 5f       	subi	r18, 0xFF	; 255
    1004:	24 83       	std	Z+4, r18	; 0x04
    1006:	80 34       	cpi	r24, 0x40	; 64
    1008:	22 e4       	ldi	r18, 0x42	; 66
    100a:	92 07       	cpc	r25, r18
    100c:	2f e0       	ldi	r18, 0x0F	; 15
    100e:	a2 07       	cpc	r26, r18
    1010:	b1 05       	cpc	r27, r1
    1012:	94 f7       	brge	.-28     	; 0xff8 <Int2bcd+0x96>
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <Int2bcd+0xc2>
    1016:	80 5a       	subi	r24, 0xA0	; 160
    1018:	96 48       	sbci	r25, 0x86	; 134
    101a:	a1 40       	sbci	r26, 0x01	; 1
    101c:	b1 09       	sbc	r27, r1
    101e:	25 81       	ldd	r18, Z+5	; 0x05
    1020:	2f 5f       	subi	r18, 0xFF	; 255
    1022:	25 83       	std	Z+5, r18	; 0x05
    1024:	80 3a       	cpi	r24, 0xA0	; 160
    1026:	26 e8       	ldi	r18, 0x86	; 134
    1028:	92 07       	cpc	r25, r18
    102a:	21 e0       	ldi	r18, 0x01	; 1
    102c:	a2 07       	cpc	r26, r18
    102e:	b1 05       	cpc	r27, r1
    1030:	94 f7       	brge	.-28     	; 0x1016 <Int2bcd+0xb4>
    1032:	07 c0       	rjmp	.+14     	; 0x1042 <Int2bcd+0xe0>
    1034:	80 51       	subi	r24, 0x10	; 16
    1036:	97 42       	sbci	r25, 0x27	; 39
    1038:	a1 09       	sbc	r26, r1
    103a:	b1 09       	sbc	r27, r1
    103c:	26 81       	ldd	r18, Z+6	; 0x06
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	26 83       	std	Z+6, r18	; 0x06
    1042:	80 31       	cpi	r24, 0x10	; 16
    1044:	27 e2       	ldi	r18, 0x27	; 39
    1046:	92 07       	cpc	r25, r18
    1048:	a1 05       	cpc	r26, r1
    104a:	b1 05       	cpc	r27, r1
    104c:	9c f7       	brge	.-26     	; 0x1034 <Int2bcd+0xd2>
    104e:	07 c0       	rjmp	.+14     	; 0x105e <Int2bcd+0xfc>
    1050:	88 5e       	subi	r24, 0xE8	; 232
    1052:	93 40       	sbci	r25, 0x03	; 3
    1054:	a1 09       	sbc	r26, r1
    1056:	b1 09       	sbc	r27, r1
    1058:	27 81       	ldd	r18, Z+7	; 0x07
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	27 83       	std	Z+7, r18	; 0x07
    105e:	88 3e       	cpi	r24, 0xE8	; 232
    1060:	23 e0       	ldi	r18, 0x03	; 3
    1062:	92 07       	cpc	r25, r18
    1064:	a1 05       	cpc	r26, r1
    1066:	b1 05       	cpc	r27, r1
    1068:	9c f7       	brge	.-26     	; 0x1050 <Int2bcd+0xee>
    106a:	07 c0       	rjmp	.+14     	; 0x107a <Int2bcd+0x118>
    106c:	84 56       	subi	r24, 0x64	; 100
    106e:	91 09       	sbc	r25, r1
    1070:	a1 09       	sbc	r26, r1
    1072:	b1 09       	sbc	r27, r1
    1074:	20 85       	ldd	r18, Z+8	; 0x08
    1076:	2f 5f       	subi	r18, 0xFF	; 255
    1078:	20 87       	std	Z+8, r18	; 0x08
    107a:	84 36       	cpi	r24, 0x64	; 100
    107c:	91 05       	cpc	r25, r1
    107e:	a1 05       	cpc	r26, r1
    1080:	b1 05       	cpc	r27, r1
    1082:	a4 f7       	brge	.-24     	; 0x106c <Int2bcd+0x10a>
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <Int2bcd+0x130>
    1086:	0a 97       	sbiw	r24, 0x0a	; 10
    1088:	a1 09       	sbc	r26, r1
    108a:	b1 09       	sbc	r27, r1
    108c:	21 85       	ldd	r18, Z+9	; 0x09
    108e:	2f 5f       	subi	r18, 0xFF	; 255
    1090:	21 87       	std	Z+9, r18	; 0x09
    1092:	8a 30       	cpi	r24, 0x0A	; 10
    1094:	91 05       	cpc	r25, r1
    1096:	a1 05       	cpc	r26, r1
    1098:	b1 05       	cpc	r27, r1
    109a:	ac f7       	brge	.-22     	; 0x1086 <Int2bcd+0x124>
    109c:	06 c0       	rjmp	.+12     	; 0x10aa <Int2bcd+0x148>
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	a1 09       	sbc	r26, r1
    10a2:	b1 09       	sbc	r27, r1
    10a4:	22 85       	ldd	r18, Z+10	; 0x0a
    10a6:	2f 5f       	subi	r18, 0xFF	; 255
    10a8:	22 87       	std	Z+10, r18	; 0x0a
    10aa:	18 16       	cp	r1, r24
    10ac:	19 06       	cpc	r1, r25
    10ae:	1a 06       	cpc	r1, r26
    10b0:	1b 06       	cpc	r1, r27
    10b2:	ac f3       	brlt	.-22     	; 0x109e <Int2bcd+0x13c>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <Int2bcd+0x158>
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	df 01       	movw	r26, r30
    10bc:	a2 0f       	add	r26, r18
    10be:	b1 1d       	adc	r27, r1
    10c0:	8c 91       	ld	r24, X
    10c2:	80 33       	cpi	r24, 0x30	; 48
    10c4:	c9 f3       	breq	.-14     	; 0x10b8 <Int2bcd+0x156>
    10c6:	33 23       	and	r19, r19
    10c8:	31 f0       	breq	.+12     	; 0x10d6 <Int2bcd+0x174>
    10ca:	21 50       	subi	r18, 0x01	; 1
    10cc:	df 01       	movw	r26, r30
    10ce:	a2 0f       	add	r26, r18
    10d0:	b1 1d       	adc	r27, r1
    10d2:	8d e2       	ldi	r24, 0x2D	; 45
    10d4:	8c 93       	st	X, r24
    10d6:	4a e0       	ldi	r20, 0x0A	; 10
    10d8:	42 1b       	sub	r20, r18
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	0d c0       	rjmp	.+26     	; 0x10f8 <Int2bcd+0x196>
    10de:	83 2f       	mov	r24, r19
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	ef 01       	movw	r28, r30
    10e4:	c8 0f       	add	r28, r24
    10e6:	d9 1f       	adc	r29, r25
    10e8:	82 0f       	add	r24, r18
    10ea:	91 1d       	adc	r25, r1
    10ec:	df 01       	movw	r26, r30
    10ee:	a8 0f       	add	r26, r24
    10f0:	b9 1f       	adc	r27, r25
    10f2:	8c 91       	ld	r24, X
    10f4:	88 83       	st	Y, r24
    10f6:	3f 5f       	subi	r19, 0xFF	; 255
    10f8:	43 17       	cp	r20, r19
    10fa:	88 f7       	brcc	.-30     	; 0x10de <Int2bcd+0x17c>
    10fc:	e3 0f       	add	r30, r19
    10fe:	f1 1d       	adc	r31, r1
    1100:	10 82       	st	Z, r1
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <GLCD_Send>:
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	c8 2f       	mov	r28, r24
    1112:	8b 01       	movw	r16, r22
    1114:	d4 2f       	mov	r29, r20
    1116:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <TWI_BeginTransmission>
    111a:	88 e7       	ldi	r24, 0x78	; 120
    111c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <TWI_Transmit>
    1120:	8c 2f       	mov	r24, r28
    1122:	0e 94 75 0c 	call	0x18ea	; 0x18ea <TWI_Transmit>
    1126:	c0 e0       	ldi	r28, 0x00	; 0
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <GLCD_Send+0x30>
    112a:	f8 01       	movw	r30, r16
    112c:	ec 0f       	add	r30, r28
    112e:	f1 1d       	adc	r31, r1
    1130:	80 81       	ld	r24, Z
    1132:	0e 94 75 0c 	call	0x18ea	; 0x18ea <TWI_Transmit>
    1136:	cf 5f       	subi	r28, 0xFF	; 255
    1138:	cd 17       	cp	r28, r29
    113a:	b8 f3       	brcs	.-18     	; 0x112a <GLCD_Send+0x22>
    113c:	0e 94 6d 0c 	call	0x18da	; 0x18da <TWI_EndTransmission>
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	08 95       	ret

0000114a <GLCD_SendCommand>:
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	1f 92       	push	r1
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	41 e0       	ldi	r20, 0x01	; 1
    1158:	be 01       	movw	r22, r28
    115a:	6f 5f       	subi	r22, 0xFF	; 255
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0e 94 84 08 	call	0x1108	; 0x1108 <GLCD_Send>
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <GLCD_Render>:
    116c:	cf 93       	push	r28
    116e:	81 e2       	ldi	r24, 0x21	; 33
    1170:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    117a:	8f e7       	ldi	r24, 0x7F	; 127
    117c:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1180:	82 e2       	ldi	r24, 0x22	; 34
    1182:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    118c:	87 e0       	ldi	r24, 0x07	; 7
    118e:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1192:	c0 e0       	ldi	r28, 0x00	; 0
    1194:	0b c0       	rjmp	.+22     	; 0x11ac <GLCD_Render+0x40>
    1196:	80 e1       	ldi	r24, 0x10	; 16
    1198:	c8 9f       	mul	r28, r24
    119a:	b0 01       	movw	r22, r0
    119c:	11 24       	eor	r1, r1
    119e:	64 57       	subi	r22, 0x74	; 116
    11a0:	7e 4f       	sbci	r23, 0xFE	; 254
    11a2:	40 e1       	ldi	r20, 0x10	; 16
    11a4:	80 e4       	ldi	r24, 0x40	; 64
    11a6:	0e 94 84 08 	call	0x1108	; 0x1108 <GLCD_Send>
    11aa:	cf 5f       	subi	r28, 0xFF	; 255
    11ac:	c0 34       	cpi	r28, 0x40	; 64
    11ae:	98 f3       	brcs	.-26     	; 0x1196 <GLCD_Render+0x2a>
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <GLCD_GotoX>:
    11b4:	88 23       	and	r24, r24
    11b6:	14 f0       	brlt	.+4      	; 0x11bc <GLCD_GotoX+0x8>
    11b8:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__GLCD>
    11bc:	08 95       	ret

000011be <GLCD_GotoY>:
    11be:	80 34       	cpi	r24, 0x40	; 64
    11c0:	10 f4       	brcc	.+4      	; 0x11c6 <GLCD_GotoY+0x8>
    11c2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__GLCD+0x1>
    11c6:	08 95       	ret

000011c8 <GLCD_GotoXY>:
    11c8:	cf 93       	push	r28
    11ca:	c6 2f       	mov	r28, r22
    11cc:	0e 94 da 08 	call	0x11b4	; 0x11b4 <GLCD_GotoX>
    11d0:	8c 2f       	mov	r24, r28
    11d2:	0e 94 df 08 	call	0x11be	; 0x11be <GLCD_GotoY>
    11d6:	cf 91       	pop	r28
    11d8:	08 95       	ret

000011da <GLCD_Setup>:
    11da:	0e 94 4a 0c 	call	0x1894	; 0x1894 <TWI_Setup>
    11de:	8e ea       	ldi	r24, 0xAE	; 174
    11e0:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    11e4:	85 ed       	ldi	r24, 0xD5	; 213
    11e6:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    11ea:	80 ef       	ldi	r24, 0xF0	; 240
    11ec:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    11f0:	88 ea       	ldi	r24, 0xA8	; 168
    11f2:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    11f6:	8f e3       	ldi	r24, 0x3F	; 63
    11f8:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    11fc:	83 ed       	ldi	r24, 0xD3	; 211
    11fe:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1208:	8d e8       	ldi	r24, 0x8D	; 141
    120a:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    120e:	84 e1       	ldi	r24, 0x14	; 20
    1210:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1214:	80 e4       	ldi	r24, 0x40	; 64
    1216:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1226:	81 ea       	ldi	r24, 0xA1	; 161
    1228:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1232:	8a ed       	ldi	r24, 0xDA	; 218
    1234:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1238:	82 e1       	ldi	r24, 0x12	; 18
    123a:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    123e:	81 e8       	ldi	r24, 0x81	; 129
    1240:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    124a:	89 ed       	ldi	r24, 0xD9	; 217
    124c:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1250:	81 ef       	ldi	r24, 0xF1	; 241
    1252:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1256:	8b ed       	ldi	r24, 0xDB	; 219
    1258:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    125c:	80 e2       	ldi	r24, 0x20	; 32
    125e:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1262:	84 ea       	ldi	r24, 0xA4	; 164
    1264:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1268:	86 ea       	ldi	r24, 0xA6	; 166
    126a:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    126e:	8e e2       	ldi	r24, 0x2E	; 46
    1270:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    1274:	8f ea       	ldi	r24, 0xAF	; 175
    1276:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    1282:	e3 e8       	ldi	r30, 0x83	; 131
    1284:	f1 e0       	ldi	r31, 0x01	; 1
    1286:	86 ea       	ldi	r24, 0xA6	; 166
    1288:	82 83       	std	Z+2, r24	; 0x02
    128a:	17 82       	std	Z+7, r1	; 0x07
    128c:	16 82       	std	Z+6, r1	; 0x06
    128e:	15 82       	std	Z+5, r1	; 0x05
    1290:	11 82       	std	Z+1, r1	; 0x01
    1292:	10 82       	st	Z, r1
    1294:	08 95       	ret

00001296 <GLCD_SetPixel>:
    1296:	ff 92       	push	r15
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	c6 2f       	mov	r28, r22
    12a2:	14 2f       	mov	r17, r20
    12a4:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    12a8:	e3 e8       	ldi	r30, 0x83	; 131
    12aa:	f1 e0       	ldi	r31, 0x01	; 1
    12ac:	f1 80       	ldd	r15, Z+1	; 0x01
    12ae:	d0 81       	ld	r29, Z
    12b0:	6f 2d       	mov	r22, r15
    12b2:	8d 2f       	mov	r24, r29
    12b4:	0e 94 a3 07 	call	0xf46	; 0xf46 <GLCD_BufferRead>
    12b8:	1f 3f       	cpi	r17, 0xFF	; 255
    12ba:	79 f4       	brne	.+30     	; 0x12da <GLCD_SetPixel+0x44>
    12bc:	c7 70       	andi	r28, 0x07	; 7
    12be:	01 e0       	ldi	r16, 0x01	; 1
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <GLCD_SetPixel+0x3a>
    12c8:	00 0f       	add	r16, r16
    12ca:	11 1f       	adc	r17, r17
    12cc:	22 1f       	adc	r18, r18
    12ce:	33 1f       	adc	r19, r19
    12d0:	ca 95       	dec	r28
    12d2:	d2 f7       	brpl	.-12     	; 0x12c8 <GLCD_SetPixel+0x32>
    12d4:	48 2f       	mov	r20, r24
    12d6:	40 2b       	or	r20, r16
    12d8:	0f c0       	rjmp	.+30     	; 0x12f8 <GLCD_SetPixel+0x62>
    12da:	c7 70       	andi	r28, 0x07	; 7
    12dc:	01 e0       	ldi	r16, 0x01	; 1
    12de:	10 e0       	ldi	r17, 0x00	; 0
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <GLCD_SetPixel+0x58>
    12e6:	00 0f       	add	r16, r16
    12e8:	11 1f       	adc	r17, r17
    12ea:	22 1f       	adc	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	ca 95       	dec	r28
    12f0:	d2 f7       	brpl	.-12     	; 0x12e6 <GLCD_SetPixel+0x50>
    12f2:	00 95       	com	r16
    12f4:	40 2f       	mov	r20, r16
    12f6:	48 23       	and	r20, r24
    12f8:	6f 2d       	mov	r22, r15
    12fa:	8d 2f       	mov	r24, r29
    12fc:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    1300:	df 91       	pop	r29
    1302:	cf 91       	pop	r28
    1304:	1f 91       	pop	r17
    1306:	0f 91       	pop	r16
    1308:	ff 90       	pop	r15
    130a:	08 95       	ret

0000130c <GLCD_SetPixels>:
    130c:	6f 92       	push	r6
    130e:	7f 92       	push	r7
    1310:	8f 92       	push	r8
    1312:	9f 92       	push	r9
    1314:	af 92       	push	r10
    1316:	bf 92       	push	r11
    1318:	cf 92       	push	r12
    131a:	df 92       	push	r13
    131c:	ef 92       	push	r14
    131e:	ff 92       	push	r15
    1320:	0f 93       	push	r16
    1322:	1f 93       	push	r17
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	88 23       	and	r24, r24
    132a:	0c f4       	brge	.+2      	; 0x132e <GLCD_SetPixels+0x22>
    132c:	a7 c0       	rjmp	.+334    	; 0x147c <GLCD_SetPixels+0x170>
    132e:	44 23       	and	r20, r20
    1330:	0c f4       	brge	.+2      	; 0x1334 <GLCD_SetPixels+0x28>
    1332:	a4 c0       	rjmp	.+328    	; 0x147c <GLCD_SetPixels+0x170>
    1334:	60 34       	cpi	r22, 0x40	; 64
    1336:	08 f0       	brcs	.+2      	; 0x133a <GLCD_SetPixels+0x2e>
    1338:	a1 c0       	rjmp	.+322    	; 0x147c <GLCD_SetPixels+0x170>
    133a:	20 34       	cpi	r18, 0x40	; 64
    133c:	08 f0       	brcs	.+2      	; 0x1340 <GLCD_SetPixels+0x34>
    133e:	9e c0       	rjmp	.+316    	; 0x147c <GLCD_SetPixels+0x170>
    1340:	26 1b       	sub	r18, r22
    1342:	99 24       	eor	r9, r9
    1344:	93 94       	inc	r9
    1346:	92 0e       	add	r9, r18
    1348:	48 1b       	sub	r20, r24
    134a:	d1 e0       	ldi	r29, 0x01	; 1
    134c:	d4 0f       	add	r29, r20
    134e:	96 2f       	mov	r25, r22
    1350:	97 70       	andi	r25, 0x07	; 7
    1352:	16 2f       	mov	r17, r22
    1354:	19 1b       	sub	r17, r25
    1356:	e9 2c       	mov	r14, r9
    1358:	f1 2c       	mov	r15, r1
    135a:	28 e0       	ldi	r18, 0x08	; 8
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	29 1b       	sub	r18, r25
    1360:	31 09       	sbc	r19, r1
    1362:	e2 16       	cp	r14, r18
    1364:	f3 06       	cpc	r15, r19
    1366:	7c f4       	brge	.+30     	; 0x1386 <GLCD_SetPixels+0x7a>
    1368:	28 e0       	ldi	r18, 0x08	; 8
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	2e 19       	sub	r18, r14
    136e:	3f 09       	sbc	r19, r15
    1370:	4f ef       	ldi	r20, 0xFF	; 255
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	6a 01       	movw	r12, r20
    1376:	02 c0       	rjmp	.+4      	; 0x137c <GLCD_SetPixels+0x70>
    1378:	d5 94       	asr	r13
    137a:	c7 94       	ror	r12
    137c:	2a 95       	dec	r18
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <GLCD_SetPixels+0x6c>
    1380:	2c 2d       	mov	r18, r12
    1382:	b9 2c       	mov	r11, r9
    1384:	04 c0       	rjmp	.+8      	; 0x138e <GLCD_SetPixels+0x82>
    1386:	28 e0       	ldi	r18, 0x08	; 8
    1388:	b2 2e       	mov	r11, r18
    138a:	b9 1a       	sub	r11, r25
    138c:	2f ef       	ldi	r18, 0xFF	; 255
    138e:	a8 2e       	mov	r10, r24
    1390:	c2 2e       	mov	r12, r18
    1392:	d1 2c       	mov	r13, r1
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GLCD_SetPixels+0x8e>
    1396:	cc 0c       	add	r12, r12
    1398:	dd 1c       	adc	r13, r13
    139a:	9a 95       	dec	r25
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GLCD_SetPixels+0x8a>
    139e:	6c 2c       	mov	r6, r12
    13a0:	61 2f       	mov	r22, r17
    13a2:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    13a6:	81 2c       	mov	r8, r1
    13a8:	19 c0       	rjmp	.+50     	; 0x13dc <GLCD_SetPixels+0xd0>
    13aa:	e3 e8       	ldi	r30, 0x83	; 131
    13ac:	f1 e0       	ldi	r31, 0x01	; 1
    13ae:	71 80       	ldd	r7, Z+1	; 0x01
    13b0:	c0 81       	ld	r28, Z
    13b2:	67 2d       	mov	r22, r7
    13b4:	8c 2f       	mov	r24, r28
    13b6:	0e 94 a3 07 	call	0xf46	; 0xf46 <GLCD_BufferRead>
    13ba:	0f 3f       	cpi	r16, 0xFF	; 255
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <GLCD_SetPixels+0xb8>
    13be:	46 2d       	mov	r20, r6
    13c0:	48 2b       	or	r20, r24
    13c2:	03 c0       	rjmp	.+6      	; 0x13ca <GLCD_SetPixels+0xbe>
    13c4:	4c 2d       	mov	r20, r12
    13c6:	40 95       	com	r20
    13c8:	48 23       	and	r20, r24
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	8c 0f       	add	r24, r28
    13ce:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__GLCD>
    13d2:	67 2d       	mov	r22, r7
    13d4:	8c 2f       	mov	r24, r28
    13d6:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    13da:	83 94       	inc	r8
    13dc:	8d 16       	cp	r8, r29
    13de:	28 f3       	brcs	.-54     	; 0x13aa <GLCD_SetPixels+0x9e>
    13e0:	16 c0       	rjmp	.+44     	; 0x140e <GLCD_SetPixels+0x102>
    13e2:	88 e0       	ldi	r24, 0x08	; 8
    13e4:	b8 0e       	add	r11, r24
    13e6:	18 5f       	subi	r17, 0xF8	; 248
    13e8:	61 2f       	mov	r22, r17
    13ea:	8a 2d       	mov	r24, r10
    13ec:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    13f0:	c0 e0       	ldi	r28, 0x00	; 0
    13f2:	0b c0       	rjmp	.+22     	; 0x140a <GLCD_SetPixels+0xfe>
    13f4:	e3 e8       	ldi	r30, 0x83	; 131
    13f6:	f1 e0       	ldi	r31, 0x01	; 1
    13f8:	61 81       	ldd	r22, Z+1	; 0x01
    13fa:	80 81       	ld	r24, Z
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	98 0f       	add	r25, r24
    1400:	90 83       	st	Z, r25
    1402:	40 2f       	mov	r20, r16
    1404:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    1408:	cf 5f       	subi	r28, 0xFF	; 255
    140a:	cd 17       	cp	r28, r29
    140c:	98 f3       	brcs	.-26     	; 0x13f4 <GLCD_SetPixels+0xe8>
    140e:	8b 2d       	mov	r24, r11
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 01       	movw	r18, r24
    1414:	28 5f       	subi	r18, 0xF8	; 248
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	e2 16       	cp	r14, r18
    141a:	f3 06       	cpc	r15, r19
    141c:	14 f7       	brge	.-60     	; 0x13e2 <GLCD_SetPixels+0xd6>
    141e:	b9 14       	cp	r11, r9
    1420:	68 f5       	brcc	.+90     	; 0x147c <GLCD_SetPixels+0x170>
    1422:	e8 1a       	sub	r14, r24
    1424:	f9 0a       	sbc	r15, r25
    1426:	8f ef       	ldi	r24, 0xFF	; 255
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <GLCD_SetPixels+0x124>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	ea 94       	dec	r14
    1432:	e2 f7       	brpl	.-8      	; 0x142c <GLCD_SetPixels+0x120>
    1434:	e8 2e       	mov	r14, r24
    1436:	e0 94       	com	r14
    1438:	68 e0       	ldi	r22, 0x08	; 8
    143a:	61 0f       	add	r22, r17
    143c:	8a 2d       	mov	r24, r10
    143e:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    1442:	10 e0       	ldi	r17, 0x00	; 0
    1444:	19 c0       	rjmp	.+50     	; 0x1478 <GLCD_SetPixels+0x16c>
    1446:	e3 e8       	ldi	r30, 0x83	; 131
    1448:	f1 e0       	ldi	r31, 0x01	; 1
    144a:	f1 80       	ldd	r15, Z+1	; 0x01
    144c:	c0 81       	ld	r28, Z
    144e:	6f 2d       	mov	r22, r15
    1450:	8c 2f       	mov	r24, r28
    1452:	0e 94 a3 07 	call	0xf46	; 0xf46 <GLCD_BufferRead>
    1456:	0f 3f       	cpi	r16, 0xFF	; 255
    1458:	19 f4       	brne	.+6      	; 0x1460 <GLCD_SetPixels+0x154>
    145a:	4e 2d       	mov	r20, r14
    145c:	48 2b       	or	r20, r24
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <GLCD_SetPixels+0x15a>
    1460:	4e 2d       	mov	r20, r14
    1462:	40 95       	com	r20
    1464:	48 23       	and	r20, r24
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8c 0f       	add	r24, r28
    146a:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__GLCD>
    146e:	6f 2d       	mov	r22, r15
    1470:	8c 2f       	mov	r24, r28
    1472:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    1476:	1f 5f       	subi	r17, 0xFF	; 255
    1478:	1d 17       	cp	r17, r29
    147a:	28 f3       	brcs	.-54     	; 0x1446 <GLCD_SetPixels+0x13a>
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	df 90       	pop	r13
    148a:	cf 90       	pop	r12
    148c:	bf 90       	pop	r11
    148e:	af 90       	pop	r10
    1490:	9f 90       	pop	r9
    1492:	8f 90       	pop	r8
    1494:	7f 90       	pop	r7
    1496:	6f 90       	pop	r6
    1498:	08 95       	ret

0000149a <GLCD_DrawRectangle>:
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	88 23       	and	r24, r24
    14aa:	0c f4       	brge	.+2      	; 0x14ae <GLCD_DrawRectangle+0x14>
    14ac:	45 c0       	rjmp	.+138    	; 0x1538 <GLCD_DrawRectangle+0x9e>
    14ae:	44 23       	and	r20, r20
    14b0:	0c f4       	brge	.+2      	; 0x14b4 <GLCD_DrawRectangle+0x1a>
    14b2:	42 c0       	rjmp	.+132    	; 0x1538 <GLCD_DrawRectangle+0x9e>
    14b4:	60 34       	cpi	r22, 0x40	; 64
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <GLCD_DrawRectangle+0x20>
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <GLCD_DrawRectangle+0x9e>
    14ba:	20 34       	cpi	r18, 0x40	; 64
    14bc:	e8 f5       	brcc	.+122    	; 0x1538 <GLCD_DrawRectangle+0x9e>
    14be:	d0 2f       	mov	r29, r16
    14c0:	12 2f       	mov	r17, r18
    14c2:	d4 2e       	mov	r13, r20
    14c4:	f6 2e       	mov	r15, r22
    14c6:	e8 2e       	mov	r14, r24
    14c8:	48 17       	cp	r20, r24
    14ca:	18 f0       	brcs	.+6      	; 0x14d2 <GLCD_DrawRectangle+0x38>
    14cc:	04 2f       	mov	r16, r20
    14ce:	c8 2f       	mov	r28, r24
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <GLCD_DrawRectangle+0x4a>
    14d2:	08 2f       	mov	r16, r24
    14d4:	c4 2f       	mov	r28, r20
    14d6:	06 c0       	rjmp	.+12     	; 0x14e4 <GLCD_DrawRectangle+0x4a>
    14d8:	4d 2f       	mov	r20, r29
    14da:	6f 2d       	mov	r22, r15
    14dc:	8c 2f       	mov	r24, r28
    14de:	0e 94 4b 09 	call	0x1296	; 0x1296 <GLCD_SetPixel>
    14e2:	cf 5f       	subi	r28, 0xFF	; 255
    14e4:	0c 17       	cp	r16, r28
    14e6:	c0 f7       	brcc	.-16     	; 0x14d8 <GLCD_DrawRectangle+0x3e>
    14e8:	de 14       	cp	r13, r14
    14ea:	18 f0       	brcs	.+6      	; 0x14f2 <GLCD_DrawRectangle+0x58>
    14ec:	0d 2d       	mov	r16, r13
    14ee:	ce 2d       	mov	r28, r14
    14f0:	09 c0       	rjmp	.+18     	; 0x1504 <GLCD_DrawRectangle+0x6a>
    14f2:	0e 2d       	mov	r16, r14
    14f4:	cd 2d       	mov	r28, r13
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <GLCD_DrawRectangle+0x6a>
    14f8:	4d 2f       	mov	r20, r29
    14fa:	61 2f       	mov	r22, r17
    14fc:	8c 2f       	mov	r24, r28
    14fe:	0e 94 4b 09 	call	0x1296	; 0x1296 <GLCD_SetPixel>
    1502:	cf 5f       	subi	r28, 0xFF	; 255
    1504:	0c 17       	cp	r16, r28
    1506:	c0 f7       	brcc	.-16     	; 0x14f8 <GLCD_DrawRectangle+0x5e>
    1508:	1f 15       	cp	r17, r15
    150a:	18 f0       	brcs	.+6      	; 0x1512 <GLCD_DrawRectangle+0x78>
    150c:	21 2f       	mov	r18, r17
    150e:	6f 2d       	mov	r22, r15
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GLCD_DrawRectangle+0x7c>
    1512:	2f 2d       	mov	r18, r15
    1514:	61 2f       	mov	r22, r17
    1516:	0d 2f       	mov	r16, r29
    1518:	4e 2d       	mov	r20, r14
    151a:	8e 2d       	mov	r24, r14
    151c:	0e 94 86 09 	call	0x130c	; 0x130c <GLCD_SetPixels>
    1520:	1f 15       	cp	r17, r15
    1522:	18 f0       	brcs	.+6      	; 0x152a <GLCD_DrawRectangle+0x90>
    1524:	21 2f       	mov	r18, r17
    1526:	6f 2d       	mov	r22, r15
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GLCD_DrawRectangle+0x94>
    152a:	2f 2d       	mov	r18, r15
    152c:	61 2f       	mov	r22, r17
    152e:	0d 2f       	mov	r16, r29
    1530:	4d 2d       	mov	r20, r13
    1532:	8d 2d       	mov	r24, r13
    1534:	0e 94 86 09 	call	0x130c	; 0x130c <GLCD_SetPixels>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	08 95       	ret

00001548 <GLCD_FillScreen>:
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	18 2f       	mov	r17, r24
    1550:	d0 e0       	ldi	r29, 0x00	; 0
    1552:	0b c0       	rjmp	.+22     	; 0x156a <GLCD_FillScreen+0x22>
    1554:	41 2f       	mov	r20, r17
    1556:	6d 2f       	mov	r22, r29
    1558:	8c 2f       	mov	r24, r28
    155a:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    155e:	cf 5f       	subi	r28, 0xFF	; 255
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <GLCD_FillScreen+0x1c>
    1562:	c0 e0       	ldi	r28, 0x00	; 0
    1564:	cc 23       	and	r28, r28
    1566:	b4 f7       	brge	.-20     	; 0x1554 <GLCD_FillScreen+0xc>
    1568:	d8 5f       	subi	r29, 0xF8	; 248
    156a:	d0 34       	cpi	r29, 0x40	; 64
    156c:	d0 f3       	brcs	.-12     	; 0x1562 <GLCD_FillScreen+0x1a>
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	08 95       	ret

00001576 <GLCD_Clear>:
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	0e 94 a4 0a 	call	0x1548	; 0x1548 <GLCD_FillScreen>
    157c:	08 95       	ret

0000157e <GLCD_InvertScreen>:
    157e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <__GLCD+0x2>
    1582:	87 3a       	cpi	r24, 0xA7	; 167
    1584:	21 f4       	brne	.+8      	; 0x158e <GLCD_InvertScreen+0x10>
    1586:	86 ea       	ldi	r24, 0xA6	; 166
    1588:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <__GLCD+0x2>
    158c:	03 c0       	rjmp	.+6      	; 0x1594 <GLCD_InvertScreen+0x16>
    158e:	87 ea       	ldi	r24, 0xA7	; 167
    1590:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <__GLCD+0x2>
    1594:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <__GLCD+0x2>
    1598:	0e 94 a5 08 	call	0x114a	; 0x114a <GLCD_SendCommand>
    159c:	08 95       	ret

0000159e <GLCD_SetFont>:
    159e:	66 23       	and	r22, r22
    15a0:	e4 f0       	brlt	.+56     	; 0x15da <GLCD_SetFont+0x3c>
    15a2:	40 34       	cpi	r20, 0x40	; 64
    15a4:	d0 f4       	brcc	.+52     	; 0x15da <GLCD_SetFont+0x3c>
    15a6:	22 30       	cpi	r18, 0x02	; 2
    15a8:	c0 f4       	brcc	.+48     	; 0x15da <GLCD_SetFont+0x3c>
    15aa:	e3 e8       	ldi	r30, 0x83	; 131
    15ac:	f1 e0       	ldi	r31, 0x01	; 1
    15ae:	94 83       	std	Z+4, r25	; 0x04
    15b0:	83 83       	std	Z+3, r24	; 0x03
    15b2:	65 83       	std	Z+5, r22	; 0x05
    15b4:	46 83       	std	Z+6, r20	; 0x06
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	41 50       	subi	r20, 0x01	; 1
    15ba:	51 09       	sbc	r21, r1
    15bc:	ca 01       	movw	r24, r20
    15be:	99 23       	and	r25, r25
    15c0:	0c f4       	brge	.+2      	; 0x15c4 <GLCD_SetFont+0x26>
    15c2:	07 96       	adiw	r24, 0x07	; 7
    15c4:	95 95       	asr	r25
    15c6:	87 95       	ror	r24
    15c8:	95 95       	asr	r25
    15ca:	87 95       	ror	r24
    15cc:	95 95       	asr	r25
    15ce:	87 95       	ror	r24
    15d0:	e3 e8       	ldi	r30, 0x83	; 131
    15d2:	f1 e0       	ldi	r31, 0x01	; 1
    15d4:	8f 5f       	subi	r24, 0xFF	; 255
    15d6:	87 83       	std	Z+7, r24	; 0x07
    15d8:	20 87       	std	Z+8, r18	; 0x08
    15da:	08 95       	ret

000015dc <GLCD_PrintChar>:
    15dc:	4f 92       	push	r4
    15de:	5f 92       	push	r5
    15e0:	6f 92       	push	r6
    15e2:	7f 92       	push	r7
    15e4:	8f 92       	push	r8
    15e6:	9f 92       	push	r9
    15e8:	af 92       	push	r10
    15ea:	bf 92       	push	r11
    15ec:	cf 92       	push	r12
    15ee:	df 92       	push	r13
    15f0:	ef 92       	push	r14
    15f2:	ff 92       	push	r15
    15f4:	0f 93       	push	r16
    15f6:	1f 93       	push	r17
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	a3 e8       	ldi	r26, 0x83	; 131
    15fe:	b1 e0       	ldi	r27, 0x01	; 1
    1600:	5c 90       	ld	r5, X
    1602:	11 96       	adiw	r26, 0x01	; 1
    1604:	4c 90       	ld	r4, X
    1606:	11 97       	sbiw	r26, 0x01	; 1
    1608:	80 52       	subi	r24, 0x20	; 32
    160a:	15 96       	adiw	r26, 0x05	; 5
    160c:	9c 91       	ld	r25, X
    160e:	15 97       	sbiw	r26, 0x05	; 5
    1610:	17 96       	adiw	r26, 0x07	; 7
    1612:	2c 91       	ld	r18, X
    1614:	17 97       	sbiw	r26, 0x07	; 7
    1616:	92 9f       	mul	r25, r18
    1618:	90 01       	movw	r18, r0
    161a:	11 24       	eor	r1, r1
    161c:	2f 5f       	subi	r18, 0xFF	; 255
    161e:	3f 4f       	sbci	r19, 0xFF	; 255
    1620:	82 9f       	mul	r24, r18
    1622:	a0 01       	movw	r20, r0
    1624:	83 9f       	mul	r24, r19
    1626:	50 0d       	add	r21, r0
    1628:	11 24       	eor	r1, r1
    162a:	13 96       	adiw	r26, 0x03	; 3
    162c:	ed 91       	ld	r30, X+
    162e:	fc 91       	ld	r31, X
    1630:	14 97       	sbiw	r26, 0x04	; 4
    1632:	5a 01       	movw	r10, r20
    1634:	8f ef       	ldi	r24, 0xFF	; 255
    1636:	a8 1a       	sub	r10, r24
    1638:	b8 0a       	sbc	r11, r24
    163a:	e4 0f       	add	r30, r20
    163c:	f5 1f       	adc	r31, r21
    163e:	74 90       	lpm	r7, Z
    1640:	84 2d       	mov	r24, r4
    1642:	87 70       	andi	r24, 0x07	; 7
    1644:	98 2e       	mov	r9, r24
    1646:	64 2c       	mov	r6, r4
    1648:	81 2c       	mov	r8, r1
    164a:	5f c0       	rjmp	.+190    	; 0x170a <GLCD_PrintChar+0x12e>
    164c:	66 2d       	mov	r22, r6
    164e:	85 2d       	mov	r24, r5
    1650:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    1654:	75 01       	movw	r14, r10
    1656:	e8 0c       	add	r14, r8
    1658:	f1 1c       	adc	r15, r1
    165a:	67 01       	movw	r12, r14
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	c8 1a       	sub	r12, r24
    1660:	d1 08       	sbc	r13, r1
    1662:	10 e0       	ldi	r17, 0x00	; 0
    1664:	41 c0       	rjmp	.+130    	; 0x16e8 <GLCD_PrintChar+0x10c>
    1666:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <__GLCD+0x3>
    166a:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <__GLCD+0x4>
    166e:	fc 01       	movw	r30, r24
    1670:	ee 0d       	add	r30, r14
    1672:	ff 1d       	adc	r31, r15
    1674:	24 91       	lpm	r18, Z
    1676:	49 2d       	mov	r20, r9
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	09 2c       	mov	r0, r9
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <GLCD_PrintChar+0xa8>
    1680:	22 0f       	add	r18, r18
    1682:	33 1f       	adc	r19, r19
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <GLCD_PrintChar+0xa4>
    1688:	02 2f       	mov	r16, r18
    168a:	88 20       	and	r8, r8
    168c:	a1 f0       	breq	.+40     	; 0x16b6 <GLCD_PrintChar+0xda>
    168e:	fc 01       	movw	r30, r24
    1690:	ec 0d       	add	r30, r12
    1692:	fd 1d       	adc	r31, r13
    1694:	e4 91       	lpm	r30, Z
    1696:	88 e0       	ldi	r24, 0x08	; 8
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	84 1b       	sub	r24, r20
    169c:	95 0b       	sbc	r25, r21
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <GLCD_PrintChar+0xca>
    16a2:	f5 95       	asr	r31
    16a4:	e7 95       	ror	r30
    16a6:	8a 95       	dec	r24
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <GLCD_PrintChar+0xc6>
    16aa:	0e 2f       	mov	r16, r30
    16ac:	02 2b       	or	r16, r18
    16ae:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__GLCD+0x7>
    16b2:	c8 0e       	add	r12, r24
    16b4:	d1 1c       	adc	r13, r1
    16b6:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <__GLCD+0x8>
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	39 f4       	brne	.+14     	; 0x16cc <GLCD_PrintChar+0xf0>
    16be:	e3 e8       	ldi	r30, 0x83	; 131
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	61 81       	ldd	r22, Z+1	; 0x01
    16c4:	80 81       	ld	r24, Z
    16c6:	0e 94 a3 07 	call	0xf46	; 0xf46 <GLCD_BufferRead>
    16ca:	08 2b       	or	r16, r24
    16cc:	c3 e8       	ldi	r28, 0x83	; 131
    16ce:	d1 e0       	ldi	r29, 0x01	; 1
    16d0:	69 81       	ldd	r22, Y+1	; 0x01
    16d2:	88 81       	ld	r24, Y
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	98 0f       	add	r25, r24
    16d8:	98 83       	st	Y, r25
    16da:	40 2f       	mov	r20, r16
    16dc:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	e8 0e       	add	r14, r24
    16e4:	f1 1c       	adc	r15, r1
    16e6:	1f 5f       	subi	r17, 0xFF	; 255
    16e8:	17 15       	cp	r17, r7
    16ea:	08 f4       	brcc	.+2      	; 0x16ee <GLCD_PrintChar+0x112>
    16ec:	bc cf       	rjmp	.-136    	; 0x1666 <GLCD_PrintChar+0x8a>
    16ee:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <__GLCD+0x8>
    16f2:	81 11       	cpse	r24, r1
    16f4:	07 c0       	rjmp	.+14     	; 0x1704 <GLCD_PrintChar+0x128>
    16f6:	e3 e8       	ldi	r30, 0x83	; 131
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	40 e0       	ldi	r20, 0x00	; 0
    16fc:	61 81       	ldd	r22, Z+1	; 0x01
    16fe:	80 81       	ld	r24, Z
    1700:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    1704:	88 e0       	ldi	r24, 0x08	; 8
    1706:	68 0e       	add	r6, r24
    1708:	83 94       	inc	r8
    170a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__GLCD+0x7>
    170e:	88 16       	cp	r8, r24
    1710:	08 f4       	brcc	.+2      	; 0x1714 <GLCD_PrintChar+0x138>
    1712:	9c cf       	rjmp	.-200    	; 0x164c <GLCD_PrintChar+0x70>
    1714:	24 2d       	mov	r18, r4
    1716:	26 95       	lsr	r18
    1718:	26 95       	lsr	r18
    171a:	26 95       	lsr	r18
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <__GLCD+0x6>
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	84 0d       	add	r24, r4
    1726:	91 1d       	adc	r25, r1
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	ac 01       	movw	r20, r24
    172c:	12 f4       	brpl	.+4      	; 0x1732 <GLCD_PrintChar+0x156>
    172e:	49 5f       	subi	r20, 0xF9	; 249
    1730:	5f 4f       	sbci	r21, 0xFF	; 255
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	55 95       	asr	r21
    1738:	47 95       	ror	r20
    173a:	55 95       	asr	r21
    173c:	47 95       	ror	r20
    173e:	24 17       	cp	r18, r20
    1740:	35 07       	cpc	r19, r21
    1742:	09 f4       	brne	.+2      	; 0x1746 <GLCD_PrintChar+0x16a>
    1744:	45 c0       	rjmp	.+138    	; 0x17d0 <GLCD_PrintChar+0x1f4>
    1746:	8f e3       	ldi	r24, 0x3F	; 63
    1748:	86 15       	cp	r24, r6
    174a:	08 f4       	brcc	.+2      	; 0x174e <GLCD_PrintChar+0x172>
    174c:	41 c0       	rjmp	.+130    	; 0x17d0 <GLCD_PrintChar+0x1f4>
    174e:	66 2d       	mov	r22, r6
    1750:	85 2d       	mov	r24, r5
    1752:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    1756:	a8 0c       	add	r10, r8
    1758:	b1 1c       	adc	r11, r1
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	a8 1a       	sub	r10, r24
    175e:	b1 08       	sbc	r11, r1
    1760:	00 e0       	ldi	r16, 0x00	; 0
    1762:	29 c0       	rjmp	.+82     	; 0x17b6 <GLCD_PrintChar+0x1da>
    1764:	c3 e8       	ldi	r28, 0x83	; 131
    1766:	d1 e0       	ldi	r29, 0x01	; 1
    1768:	f9 80       	ldd	r15, Y+1	; 0x01
    176a:	18 81       	ld	r17, Y
    176c:	6f 2d       	mov	r22, r15
    176e:	81 2f       	mov	r24, r17
    1770:	0e 94 a3 07 	call	0xf46	; 0xf46 <GLCD_BufferRead>
    1774:	eb 81       	ldd	r30, Y+3	; 0x03
    1776:	fc 81       	ldd	r31, Y+4	; 0x04
    1778:	ea 0d       	add	r30, r10
    177a:	fb 1d       	adc	r31, r11
    177c:	44 91       	lpm	r20, Z
    177e:	28 e0       	ldi	r18, 0x08	; 8
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	29 19       	sub	r18, r9
    1784:	31 09       	sbc	r19, r1
    1786:	50 e0       	ldi	r21, 0x00	; 0
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GLCD_PrintChar+0x1b2>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	2a 95       	dec	r18
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GLCD_PrintChar+0x1ae>
    1792:	48 2b       	or	r20, r24
    1794:	98 85       	ldd	r25, Y+8	; 0x08
    1796:	91 30       	cpi	r25, 0x01	; 1
    1798:	09 f4       	brne	.+2      	; 0x179c <GLCD_PrintChar+0x1c0>
    179a:	48 2b       	or	r20, r24
    179c:	c3 e8       	ldi	r28, 0x83	; 131
    179e:	d1 e0       	ldi	r29, 0x01	; 1
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	81 0f       	add	r24, r17
    17a4:	88 83       	st	Y, r24
    17a6:	6f 2d       	mov	r22, r15
    17a8:	81 2f       	mov	r24, r17
    17aa:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    17ae:	8f 81       	ldd	r24, Y+7	; 0x07
    17b0:	a8 0e       	add	r10, r24
    17b2:	b1 1c       	adc	r11, r1
    17b4:	0f 5f       	subi	r16, 0xFF	; 255
    17b6:	07 15       	cp	r16, r7
    17b8:	a8 f2       	brcs	.-86     	; 0x1764 <GLCD_PrintChar+0x188>
    17ba:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <__GLCD+0x8>
    17be:	81 11       	cpse	r24, r1
    17c0:	07 c0       	rjmp	.+14     	; 0x17d0 <GLCD_PrintChar+0x1f4>
    17c2:	e3 e8       	ldi	r30, 0x83	; 131
    17c4:	f1 e0       	ldi	r31, 0x01	; 1
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	61 81       	ldd	r22, Z+1	; 0x01
    17ca:	80 81       	ld	r24, Z
    17cc:	0e 94 95 07 	call	0xf2a	; 0xf2a <GLCD_BufferWrite>
    17d0:	85 2d       	mov	r24, r5
    17d2:	87 0d       	add	r24, r7
    17d4:	64 2d       	mov	r22, r4
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_GotoXY>
    17dc:	df 91       	pop	r29
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	bf 90       	pop	r11
    17ee:	af 90       	pop	r10
    17f0:	9f 90       	pop	r9
    17f2:	8f 90       	pop	r8
    17f4:	7f 90       	pop	r7
    17f6:	6f 90       	pop	r6
    17f8:	5f 90       	pop	r5
    17fa:	4f 90       	pop	r4
    17fc:	08 95       	ret

000017fe <GLCD_PrintString>:
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	ec 01       	movw	r28, r24
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <GLCD_PrintString+0x22>
    1806:	e3 e8       	ldi	r30, 0x83	; 131
    1808:	f1 e0       	ldi	r31, 0x01	; 1
    180a:	90 81       	ld	r25, Z
    180c:	25 81       	ldd	r18, Z+5	; 0x05
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	29 0f       	add	r18, r25
    1812:	31 1d       	adc	r19, r1
    1814:	20 38       	cpi	r18, 0x80	; 128
    1816:	31 05       	cpc	r19, r1
    1818:	34 f4       	brge	.+12     	; 0x1826 <GLCD_PrintString+0x28>
    181a:	21 96       	adiw	r28, 0x01	; 1
    181c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
    1820:	88 81       	ld	r24, Y
    1822:	81 11       	cpse	r24, r1
    1824:	f0 cf       	rjmp	.-32     	; 0x1806 <GLCD_PrintString+0x8>
    1826:	df 91       	pop	r29
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	2c 97       	sbiw	r28, 0x0c	; 12
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    1844:	61 15       	cp	r22, r1
    1846:	71 05       	cpc	r23, r1
    1848:	81 05       	cpc	r24, r1
    184a:	91 05       	cpc	r25, r1
    184c:	21 f4       	brne	.+8      	; 0x1856 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    184e:	80 e3       	ldi	r24, 0x30	; 48
    1850:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <GLCD_PrintChar>
    1854:	14 c0       	rjmp	.+40     	; 0x187e <GLCD_PrintInteger+0x52>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    1856:	61 15       	cp	r22, r1
    1858:	71 05       	cpc	r23, r1
    185a:	81 05       	cpc	r24, r1
    185c:	20 e8       	ldi	r18, 0x80	; 128
    185e:	92 07       	cpc	r25, r18
    1860:	71 f0       	breq	.+28     	; 0x187e <GLCD_PrintInteger+0x52>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    1862:	8e 01       	movw	r16, r28
    1864:	0f 5f       	subi	r16, 0xFF	; 255
    1866:	1f 4f       	sbci	r17, 0xFF	; 255
    1868:	2c e0       	ldi	r18, 0x0C	; 12
    186a:	f8 01       	movw	r30, r16
    186c:	11 92       	st	Z+, r1
    186e:	2a 95       	dec	r18
    1870:	e9 f7       	brne	.-6      	; 0x186c <GLCD_PrintInteger+0x40>
		
		//Convert integer to array
		Int2bcd(Value, bcd);
    1872:	a8 01       	movw	r20, r16
    1874:	0e 94 b1 07 	call	0xf62	; 0xf62 <Int2bcd>
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    1878:	c8 01       	movw	r24, r16
    187a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <GLCD_PrintString>
	}
}
    187e:	2c 96       	adiw	r28, 0x0c	; 12
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	08 95       	ret

00001894 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    1894:	87 b1       	in	r24, 0x07	; 7
    1896:	80 61       	ori	r24, 0x10	; 16
    1898:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    189a:	87 b1       	in	r24, 0x07	; 7
    189c:	80 62       	ori	r24, 0x20	; 32
    189e:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    18a0:	88 b1       	in	r24, 0x08	; 8
    18a2:	80 61       	ori	r24, 0x10	; 16
    18a4:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    18a6:	88 b1       	in	r24, 0x08	; 8
    18a8:	80 62       	ori	r24, 0x20	; 32
    18aa:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    18ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    18b0:	88 e4       	ldi	r24, 0x48	; 72
    18b2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    18b6:	84 e0       	ldi	r24, 0x04	; 4
    18b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18bc:	08 95       	ret

000018be <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    18be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    18c2:	88 7f       	andi	r24, 0xF8	; 248
    18c4:	08 95       	ret

000018c6 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    18c6:	84 ea       	ldi	r24, 0xA4	; 164
    18c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    18cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18d0:	88 23       	and	r24, r24
    18d2:	e4 f7       	brge	.-8      	; 0x18cc <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    18d4:	0e 94 5f 0c 	call	0x18be	; 0x18be <TWI_Status>
}
    18d8:	08 95       	ret

000018da <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    18da:	85 ed       	ldi	r24, 0xD5	; 213
    18dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    18e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18e4:	84 fd       	sbrc	r24, 4
    18e6:	fc cf       	rjmp	.-8      	; 0x18e0 <TWI_EndTransmission+0x6>
}
    18e8:	08 95       	ret

000018ea <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    18ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    18ee:	84 e8       	ldi	r24, 0x84	; 132
    18f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    18f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    18f8:	88 23       	and	r24, r24
    18fa:	e4 f7       	brge	.-8      	; 0x18f4 <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    18fc:	0e 94 5f 0c 	call	0x18be	; 0x18be <TWI_Status>
}
    1900:	08 95       	ret

00001902 <__subsf3>:
    1902:	50 58       	subi	r21, 0x80	; 128

00001904 <__addsf3>:
    1904:	bb 27       	eor	r27, r27
    1906:	aa 27       	eor	r26, r26
    1908:	0e 94 99 0c 	call	0x1932	; 0x1932 <__addsf3x>
    190c:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_round>
    1910:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__fp_pscA>
    1914:	38 f0       	brcs	.+14     	; 0x1924 <__addsf3+0x20>
    1916:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_pscB>
    191a:	20 f0       	brcs	.+8      	; 0x1924 <__addsf3+0x20>
    191c:	39 f4       	brne	.+14     	; 0x192c <__addsf3+0x28>
    191e:	9f 3f       	cpi	r25, 0xFF	; 255
    1920:	19 f4       	brne	.+6      	; 0x1928 <__addsf3+0x24>
    1922:	26 f4       	brtc	.+8      	; 0x192c <__addsf3+0x28>
    1924:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__fp_nan>
    1928:	0e f4       	brtc	.+2      	; 0x192c <__addsf3+0x28>
    192a:	e0 95       	com	r30
    192c:	e7 fb       	bst	r30, 7
    192e:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_inf>

00001932 <__addsf3x>:
    1932:	e9 2f       	mov	r30, r25
    1934:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fp_split3>
    1938:	58 f3       	brcs	.-42     	; 0x1910 <__addsf3+0xc>
    193a:	ba 17       	cp	r27, r26
    193c:	62 07       	cpc	r22, r18
    193e:	73 07       	cpc	r23, r19
    1940:	84 07       	cpc	r24, r20
    1942:	95 07       	cpc	r25, r21
    1944:	20 f0       	brcs	.+8      	; 0x194e <__addsf3x+0x1c>
    1946:	79 f4       	brne	.+30     	; 0x1966 <__addsf3x+0x34>
    1948:	a6 f5       	brtc	.+104    	; 0x19b2 <__addsf3x+0x80>
    194a:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_zero>
    194e:	0e f4       	brtc	.+2      	; 0x1952 <__addsf3x+0x20>
    1950:	e0 95       	com	r30
    1952:	0b 2e       	mov	r0, r27
    1954:	ba 2f       	mov	r27, r26
    1956:	a0 2d       	mov	r26, r0
    1958:	0b 01       	movw	r0, r22
    195a:	b9 01       	movw	r22, r18
    195c:	90 01       	movw	r18, r0
    195e:	0c 01       	movw	r0, r24
    1960:	ca 01       	movw	r24, r20
    1962:	a0 01       	movw	r20, r0
    1964:	11 24       	eor	r1, r1
    1966:	ff 27       	eor	r31, r31
    1968:	59 1b       	sub	r21, r25
    196a:	99 f0       	breq	.+38     	; 0x1992 <__addsf3x+0x60>
    196c:	59 3f       	cpi	r21, 0xF9	; 249
    196e:	50 f4       	brcc	.+20     	; 0x1984 <__addsf3x+0x52>
    1970:	50 3e       	cpi	r21, 0xE0	; 224
    1972:	68 f1       	brcs	.+90     	; 0x19ce <__addsf3x+0x9c>
    1974:	1a 16       	cp	r1, r26
    1976:	f0 40       	sbci	r31, 0x00	; 0
    1978:	a2 2f       	mov	r26, r18
    197a:	23 2f       	mov	r18, r19
    197c:	34 2f       	mov	r19, r20
    197e:	44 27       	eor	r20, r20
    1980:	58 5f       	subi	r21, 0xF8	; 248
    1982:	f3 cf       	rjmp	.-26     	; 0x196a <__addsf3x+0x38>
    1984:	46 95       	lsr	r20
    1986:	37 95       	ror	r19
    1988:	27 95       	ror	r18
    198a:	a7 95       	ror	r26
    198c:	f0 40       	sbci	r31, 0x00	; 0
    198e:	53 95       	inc	r21
    1990:	c9 f7       	brne	.-14     	; 0x1984 <__addsf3x+0x52>
    1992:	7e f4       	brtc	.+30     	; 0x19b2 <__addsf3x+0x80>
    1994:	1f 16       	cp	r1, r31
    1996:	ba 0b       	sbc	r27, r26
    1998:	62 0b       	sbc	r22, r18
    199a:	73 0b       	sbc	r23, r19
    199c:	84 0b       	sbc	r24, r20
    199e:	ba f0       	brmi	.+46     	; 0x19ce <__addsf3x+0x9c>
    19a0:	91 50       	subi	r25, 0x01	; 1
    19a2:	a1 f0       	breq	.+40     	; 0x19cc <__addsf3x+0x9a>
    19a4:	ff 0f       	add	r31, r31
    19a6:	bb 1f       	adc	r27, r27
    19a8:	66 1f       	adc	r22, r22
    19aa:	77 1f       	adc	r23, r23
    19ac:	88 1f       	adc	r24, r24
    19ae:	c2 f7       	brpl	.-16     	; 0x19a0 <__addsf3x+0x6e>
    19b0:	0e c0       	rjmp	.+28     	; 0x19ce <__addsf3x+0x9c>
    19b2:	ba 0f       	add	r27, r26
    19b4:	62 1f       	adc	r22, r18
    19b6:	73 1f       	adc	r23, r19
    19b8:	84 1f       	adc	r24, r20
    19ba:	48 f4       	brcc	.+18     	; 0x19ce <__addsf3x+0x9c>
    19bc:	87 95       	ror	r24
    19be:	77 95       	ror	r23
    19c0:	67 95       	ror	r22
    19c2:	b7 95       	ror	r27
    19c4:	f7 95       	ror	r31
    19c6:	9e 3f       	cpi	r25, 0xFE	; 254
    19c8:	08 f0       	brcs	.+2      	; 0x19cc <__addsf3x+0x9a>
    19ca:	b0 cf       	rjmp	.-160    	; 0x192c <__addsf3+0x28>
    19cc:	93 95       	inc	r25
    19ce:	88 0f       	add	r24, r24
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <__addsf3x+0xa2>
    19d2:	99 27       	eor	r25, r25
    19d4:	ee 0f       	add	r30, r30
    19d6:	97 95       	ror	r25
    19d8:	87 95       	ror	r24
    19da:	08 95       	ret

000019dc <__divsf3>:
    19dc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__divsf3x>
    19e0:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_round>
    19e4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_pscB>
    19e8:	58 f0       	brcs	.+22     	; 0x1a00 <__divsf3+0x24>
    19ea:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__fp_pscA>
    19ee:	40 f0       	brcs	.+16     	; 0x1a00 <__divsf3+0x24>
    19f0:	29 f4       	brne	.+10     	; 0x19fc <__divsf3+0x20>
    19f2:	5f 3f       	cpi	r21, 0xFF	; 255
    19f4:	29 f0       	breq	.+10     	; 0x1a00 <__divsf3+0x24>
    19f6:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_inf>
    19fa:	51 11       	cpse	r21, r1
    19fc:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_szero>
    1a00:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__fp_nan>

00001a04 <__divsf3x>:
    1a04:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fp_split3>
    1a08:	68 f3       	brcs	.-38     	; 0x19e4 <__divsf3+0x8>

00001a0a <__divsf3_pse>:
    1a0a:	99 23       	and	r25, r25
    1a0c:	b1 f3       	breq	.-20     	; 0x19fa <__divsf3+0x1e>
    1a0e:	55 23       	and	r21, r21
    1a10:	91 f3       	breq	.-28     	; 0x19f6 <__divsf3+0x1a>
    1a12:	95 1b       	sub	r25, r21
    1a14:	55 0b       	sbc	r21, r21
    1a16:	bb 27       	eor	r27, r27
    1a18:	aa 27       	eor	r26, r26
    1a1a:	62 17       	cp	r22, r18
    1a1c:	73 07       	cpc	r23, r19
    1a1e:	84 07       	cpc	r24, r20
    1a20:	38 f0       	brcs	.+14     	; 0x1a30 <__divsf3_pse+0x26>
    1a22:	9f 5f       	subi	r25, 0xFF	; 255
    1a24:	5f 4f       	sbci	r21, 0xFF	; 255
    1a26:	22 0f       	add	r18, r18
    1a28:	33 1f       	adc	r19, r19
    1a2a:	44 1f       	adc	r20, r20
    1a2c:	aa 1f       	adc	r26, r26
    1a2e:	a9 f3       	breq	.-22     	; 0x1a1a <__divsf3_pse+0x10>
    1a30:	35 d0       	rcall	.+106    	; 0x1a9c <__divsf3_pse+0x92>
    1a32:	0e 2e       	mov	r0, r30
    1a34:	3a f0       	brmi	.+14     	; 0x1a44 <__divsf3_pse+0x3a>
    1a36:	e0 e8       	ldi	r30, 0x80	; 128
    1a38:	32 d0       	rcall	.+100    	; 0x1a9e <__divsf3_pse+0x94>
    1a3a:	91 50       	subi	r25, 0x01	; 1
    1a3c:	50 40       	sbci	r21, 0x00	; 0
    1a3e:	e6 95       	lsr	r30
    1a40:	00 1c       	adc	r0, r0
    1a42:	ca f7       	brpl	.-14     	; 0x1a36 <__divsf3_pse+0x2c>
    1a44:	2b d0       	rcall	.+86     	; 0x1a9c <__divsf3_pse+0x92>
    1a46:	fe 2f       	mov	r31, r30
    1a48:	29 d0       	rcall	.+82     	; 0x1a9c <__divsf3_pse+0x92>
    1a4a:	66 0f       	add	r22, r22
    1a4c:	77 1f       	adc	r23, r23
    1a4e:	88 1f       	adc	r24, r24
    1a50:	bb 1f       	adc	r27, r27
    1a52:	26 17       	cp	r18, r22
    1a54:	37 07       	cpc	r19, r23
    1a56:	48 07       	cpc	r20, r24
    1a58:	ab 07       	cpc	r26, r27
    1a5a:	b0 e8       	ldi	r27, 0x80	; 128
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <__divsf3_pse+0x56>
    1a5e:	bb 0b       	sbc	r27, r27
    1a60:	80 2d       	mov	r24, r0
    1a62:	bf 01       	movw	r22, r30
    1a64:	ff 27       	eor	r31, r31
    1a66:	93 58       	subi	r25, 0x83	; 131
    1a68:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6a:	3a f0       	brmi	.+14     	; 0x1a7a <__divsf3_pse+0x70>
    1a6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a6e:	51 05       	cpc	r21, r1
    1a70:	78 f0       	brcs	.+30     	; 0x1a90 <__divsf3_pse+0x86>
    1a72:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_inf>
    1a76:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_szero>
    1a7a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7c:	e4 f3       	brlt	.-8      	; 0x1a76 <__divsf3_pse+0x6c>
    1a7e:	98 3e       	cpi	r25, 0xE8	; 232
    1a80:	d4 f3       	brlt	.-12     	; 0x1a76 <__divsf3_pse+0x6c>
    1a82:	86 95       	lsr	r24
    1a84:	77 95       	ror	r23
    1a86:	67 95       	ror	r22
    1a88:	b7 95       	ror	r27
    1a8a:	f7 95       	ror	r31
    1a8c:	9f 5f       	subi	r25, 0xFF	; 255
    1a8e:	c9 f7       	brne	.-14     	; 0x1a82 <__divsf3_pse+0x78>
    1a90:	88 0f       	add	r24, r24
    1a92:	91 1d       	adc	r25, r1
    1a94:	96 95       	lsr	r25
    1a96:	87 95       	ror	r24
    1a98:	97 f9       	bld	r25, 7
    1a9a:	08 95       	ret
    1a9c:	e1 e0       	ldi	r30, 0x01	; 1
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	62 17       	cp	r22, r18
    1aa8:	73 07       	cpc	r23, r19
    1aaa:	84 07       	cpc	r24, r20
    1aac:	ba 07       	cpc	r27, r26
    1aae:	20 f0       	brcs	.+8      	; 0x1ab8 <__divsf3_pse+0xae>
    1ab0:	62 1b       	sub	r22, r18
    1ab2:	73 0b       	sbc	r23, r19
    1ab4:	84 0b       	sbc	r24, r20
    1ab6:	ba 0b       	sbc	r27, r26
    1ab8:	ee 1f       	adc	r30, r30
    1aba:	88 f7       	brcc	.-30     	; 0x1a9e <__divsf3_pse+0x94>
    1abc:	e0 95       	com	r30
    1abe:	08 95       	ret

00001ac0 <__fixunssfsi>:
    1ac0:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <__fp_splitA>
    1ac4:	88 f0       	brcs	.+34     	; 0x1ae8 <__fixunssfsi+0x28>
    1ac6:	9f 57       	subi	r25, 0x7F	; 127
    1ac8:	98 f0       	brcs	.+38     	; 0x1af0 <__fixunssfsi+0x30>
    1aca:	b9 2f       	mov	r27, r25
    1acc:	99 27       	eor	r25, r25
    1ace:	b7 51       	subi	r27, 0x17	; 23
    1ad0:	b0 f0       	brcs	.+44     	; 0x1afe <__fixunssfsi+0x3e>
    1ad2:	e1 f0       	breq	.+56     	; 0x1b0c <__fixunssfsi+0x4c>
    1ad4:	66 0f       	add	r22, r22
    1ad6:	77 1f       	adc	r23, r23
    1ad8:	88 1f       	adc	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	1a f0       	brmi	.+6      	; 0x1ae4 <__fixunssfsi+0x24>
    1ade:	ba 95       	dec	r27
    1ae0:	c9 f7       	brne	.-14     	; 0x1ad4 <__fixunssfsi+0x14>
    1ae2:	14 c0       	rjmp	.+40     	; 0x1b0c <__fixunssfsi+0x4c>
    1ae4:	b1 30       	cpi	r27, 0x01	; 1
    1ae6:	91 f0       	breq	.+36     	; 0x1b0c <__fixunssfsi+0x4c>
    1ae8:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_zero>
    1aec:	b1 e0       	ldi	r27, 0x01	; 1
    1aee:	08 95       	ret
    1af0:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__fp_zero>
    1af4:	67 2f       	mov	r22, r23
    1af6:	78 2f       	mov	r23, r24
    1af8:	88 27       	eor	r24, r24
    1afa:	b8 5f       	subi	r27, 0xF8	; 248
    1afc:	39 f0       	breq	.+14     	; 0x1b0c <__fixunssfsi+0x4c>
    1afe:	b9 3f       	cpi	r27, 0xF9	; 249
    1b00:	cc f3       	brlt	.-14     	; 0x1af4 <__fixunssfsi+0x34>
    1b02:	86 95       	lsr	r24
    1b04:	77 95       	ror	r23
    1b06:	67 95       	ror	r22
    1b08:	b3 95       	inc	r27
    1b0a:	d9 f7       	brne	.-10     	; 0x1b02 <__fixunssfsi+0x42>
    1b0c:	3e f4       	brtc	.+14     	; 0x1b1c <__fixunssfsi+0x5c>
    1b0e:	90 95       	com	r25
    1b10:	80 95       	com	r24
    1b12:	70 95       	com	r23
    1b14:	61 95       	neg	r22
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	8f 4f       	sbci	r24, 0xFF	; 255
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	08 95       	ret

00001b1e <__floatunsisf>:
    1b1e:	e8 94       	clt
    1b20:	09 c0       	rjmp	.+18     	; 0x1b34 <__floatsisf+0x12>

00001b22 <__floatsisf>:
    1b22:	97 fb       	bst	r25, 7
    1b24:	3e f4       	brtc	.+14     	; 0x1b34 <__floatsisf+0x12>
    1b26:	90 95       	com	r25
    1b28:	80 95       	com	r24
    1b2a:	70 95       	com	r23
    1b2c:	61 95       	neg	r22
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	8f 4f       	sbci	r24, 0xFF	; 255
    1b32:	9f 4f       	sbci	r25, 0xFF	; 255
    1b34:	99 23       	and	r25, r25
    1b36:	a9 f0       	breq	.+42     	; 0x1b62 <__floatsisf+0x40>
    1b38:	f9 2f       	mov	r31, r25
    1b3a:	96 e9       	ldi	r25, 0x96	; 150
    1b3c:	bb 27       	eor	r27, r27
    1b3e:	93 95       	inc	r25
    1b40:	f6 95       	lsr	r31
    1b42:	87 95       	ror	r24
    1b44:	77 95       	ror	r23
    1b46:	67 95       	ror	r22
    1b48:	b7 95       	ror	r27
    1b4a:	f1 11       	cpse	r31, r1
    1b4c:	f8 cf       	rjmp	.-16     	; 0x1b3e <__floatsisf+0x1c>
    1b4e:	fa f4       	brpl	.+62     	; 0x1b8e <__floatsisf+0x6c>
    1b50:	bb 0f       	add	r27, r27
    1b52:	11 f4       	brne	.+4      	; 0x1b58 <__floatsisf+0x36>
    1b54:	60 ff       	sbrs	r22, 0
    1b56:	1b c0       	rjmp	.+54     	; 0x1b8e <__floatsisf+0x6c>
    1b58:	6f 5f       	subi	r22, 0xFF	; 255
    1b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b60:	16 c0       	rjmp	.+44     	; 0x1b8e <__floatsisf+0x6c>
    1b62:	88 23       	and	r24, r24
    1b64:	11 f0       	breq	.+4      	; 0x1b6a <__floatsisf+0x48>
    1b66:	96 e9       	ldi	r25, 0x96	; 150
    1b68:	11 c0       	rjmp	.+34     	; 0x1b8c <__floatsisf+0x6a>
    1b6a:	77 23       	and	r23, r23
    1b6c:	21 f0       	breq	.+8      	; 0x1b76 <__floatsisf+0x54>
    1b6e:	9e e8       	ldi	r25, 0x8E	; 142
    1b70:	87 2f       	mov	r24, r23
    1b72:	76 2f       	mov	r23, r22
    1b74:	05 c0       	rjmp	.+10     	; 0x1b80 <__floatsisf+0x5e>
    1b76:	66 23       	and	r22, r22
    1b78:	71 f0       	breq	.+28     	; 0x1b96 <__floatsisf+0x74>
    1b7a:	96 e8       	ldi	r25, 0x86	; 134
    1b7c:	86 2f       	mov	r24, r22
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	2a f0       	brmi	.+10     	; 0x1b8e <__floatsisf+0x6c>
    1b84:	9a 95       	dec	r25
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	da f7       	brpl	.-10     	; 0x1b84 <__floatsisf+0x62>
    1b8e:	88 0f       	add	r24, r24
    1b90:	96 95       	lsr	r25
    1b92:	87 95       	ror	r24
    1b94:	97 f9       	bld	r25, 7
    1b96:	08 95       	ret

00001b98 <__fp_inf>:
    1b98:	97 f9       	bld	r25, 7
    1b9a:	9f 67       	ori	r25, 0x7F	; 127
    1b9c:	80 e8       	ldi	r24, 0x80	; 128
    1b9e:	70 e0       	ldi	r23, 0x00	; 0
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	08 95       	ret

00001ba4 <__fp_nan>:
    1ba4:	9f ef       	ldi	r25, 0xFF	; 255
    1ba6:	80 ec       	ldi	r24, 0xC0	; 192
    1ba8:	08 95       	ret

00001baa <__fp_pscA>:
    1baa:	00 24       	eor	r0, r0
    1bac:	0a 94       	dec	r0
    1bae:	16 16       	cp	r1, r22
    1bb0:	17 06       	cpc	r1, r23
    1bb2:	18 06       	cpc	r1, r24
    1bb4:	09 06       	cpc	r0, r25
    1bb6:	08 95       	ret

00001bb8 <__fp_pscB>:
    1bb8:	00 24       	eor	r0, r0
    1bba:	0a 94       	dec	r0
    1bbc:	12 16       	cp	r1, r18
    1bbe:	13 06       	cpc	r1, r19
    1bc0:	14 06       	cpc	r1, r20
    1bc2:	05 06       	cpc	r0, r21
    1bc4:	08 95       	ret

00001bc6 <__fp_round>:
    1bc6:	09 2e       	mov	r0, r25
    1bc8:	03 94       	inc	r0
    1bca:	00 0c       	add	r0, r0
    1bcc:	11 f4       	brne	.+4      	; 0x1bd2 <__fp_round+0xc>
    1bce:	88 23       	and	r24, r24
    1bd0:	52 f0       	brmi	.+20     	; 0x1be6 <__fp_round+0x20>
    1bd2:	bb 0f       	add	r27, r27
    1bd4:	40 f4       	brcc	.+16     	; 0x1be6 <__fp_round+0x20>
    1bd6:	bf 2b       	or	r27, r31
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <__fp_round+0x18>
    1bda:	60 ff       	sbrs	r22, 0
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__fp_round+0x20>
    1bde:	6f 5f       	subi	r22, 0xFF	; 255
    1be0:	7f 4f       	sbci	r23, 0xFF	; 255
    1be2:	8f 4f       	sbci	r24, 0xFF	; 255
    1be4:	9f 4f       	sbci	r25, 0xFF	; 255
    1be6:	08 95       	ret

00001be8 <__fp_split3>:
    1be8:	57 fd       	sbrc	r21, 7
    1bea:	90 58       	subi	r25, 0x80	; 128
    1bec:	44 0f       	add	r20, r20
    1bee:	55 1f       	adc	r21, r21
    1bf0:	59 f0       	breq	.+22     	; 0x1c08 <__fp_splitA+0x10>
    1bf2:	5f 3f       	cpi	r21, 0xFF	; 255
    1bf4:	71 f0       	breq	.+28     	; 0x1c12 <__fp_splitA+0x1a>
    1bf6:	47 95       	ror	r20

00001bf8 <__fp_splitA>:
    1bf8:	88 0f       	add	r24, r24
    1bfa:	97 fb       	bst	r25, 7
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	61 f0       	breq	.+24     	; 0x1c18 <__fp_splitA+0x20>
    1c00:	9f 3f       	cpi	r25, 0xFF	; 255
    1c02:	79 f0       	breq	.+30     	; 0x1c22 <__fp_splitA+0x2a>
    1c04:	87 95       	ror	r24
    1c06:	08 95       	ret
    1c08:	12 16       	cp	r1, r18
    1c0a:	13 06       	cpc	r1, r19
    1c0c:	14 06       	cpc	r1, r20
    1c0e:	55 1f       	adc	r21, r21
    1c10:	f2 cf       	rjmp	.-28     	; 0x1bf6 <__fp_split3+0xe>
    1c12:	46 95       	lsr	r20
    1c14:	f1 df       	rcall	.-30     	; 0x1bf8 <__fp_splitA>
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <__fp_splitA+0x30>
    1c18:	16 16       	cp	r1, r22
    1c1a:	17 06       	cpc	r1, r23
    1c1c:	18 06       	cpc	r1, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	f1 cf       	rjmp	.-30     	; 0x1c04 <__fp_splitA+0xc>
    1c22:	86 95       	lsr	r24
    1c24:	71 05       	cpc	r23, r1
    1c26:	61 05       	cpc	r22, r1
    1c28:	08 94       	sec
    1c2a:	08 95       	ret

00001c2c <__fp_zero>:
    1c2c:	e8 94       	clt

00001c2e <__fp_szero>:
    1c2e:	bb 27       	eor	r27, r27
    1c30:	66 27       	eor	r22, r22
    1c32:	77 27       	eor	r23, r23
    1c34:	cb 01       	movw	r24, r22
    1c36:	97 f9       	bld	r25, 7
    1c38:	08 95       	ret

00001c3a <__mulsf3>:
    1c3a:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__mulsf3x>
    1c3e:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__fp_round>
    1c42:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <__fp_pscA>
    1c46:	38 f0       	brcs	.+14     	; 0x1c56 <__mulsf3+0x1c>
    1c48:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__fp_pscB>
    1c4c:	20 f0       	brcs	.+8      	; 0x1c56 <__mulsf3+0x1c>
    1c4e:	95 23       	and	r25, r21
    1c50:	11 f0       	breq	.+4      	; 0x1c56 <__mulsf3+0x1c>
    1c52:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_inf>
    1c56:	0c 94 d2 0d 	jmp	0x1ba4	; 0x1ba4 <__fp_nan>
    1c5a:	11 24       	eor	r1, r1
    1c5c:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_szero>

00001c60 <__mulsf3x>:
    1c60:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <__fp_split3>
    1c64:	70 f3       	brcs	.-36     	; 0x1c42 <__mulsf3+0x8>

00001c66 <__mulsf3_pse>:
    1c66:	95 9f       	mul	r25, r21
    1c68:	c1 f3       	breq	.-16     	; 0x1c5a <__mulsf3+0x20>
    1c6a:	95 0f       	add	r25, r21
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	55 1f       	adc	r21, r21
    1c70:	62 9f       	mul	r22, r18
    1c72:	f0 01       	movw	r30, r0
    1c74:	72 9f       	mul	r23, r18
    1c76:	bb 27       	eor	r27, r27
    1c78:	f0 0d       	add	r31, r0
    1c7a:	b1 1d       	adc	r27, r1
    1c7c:	63 9f       	mul	r22, r19
    1c7e:	aa 27       	eor	r26, r26
    1c80:	f0 0d       	add	r31, r0
    1c82:	b1 1d       	adc	r27, r1
    1c84:	aa 1f       	adc	r26, r26
    1c86:	64 9f       	mul	r22, r20
    1c88:	66 27       	eor	r22, r22
    1c8a:	b0 0d       	add	r27, r0
    1c8c:	a1 1d       	adc	r26, r1
    1c8e:	66 1f       	adc	r22, r22
    1c90:	82 9f       	mul	r24, r18
    1c92:	22 27       	eor	r18, r18
    1c94:	b0 0d       	add	r27, r0
    1c96:	a1 1d       	adc	r26, r1
    1c98:	62 1f       	adc	r22, r18
    1c9a:	73 9f       	mul	r23, r19
    1c9c:	b0 0d       	add	r27, r0
    1c9e:	a1 1d       	adc	r26, r1
    1ca0:	62 1f       	adc	r22, r18
    1ca2:	83 9f       	mul	r24, r19
    1ca4:	a0 0d       	add	r26, r0
    1ca6:	61 1d       	adc	r22, r1
    1ca8:	22 1f       	adc	r18, r18
    1caa:	74 9f       	mul	r23, r20
    1cac:	33 27       	eor	r19, r19
    1cae:	a0 0d       	add	r26, r0
    1cb0:	61 1d       	adc	r22, r1
    1cb2:	23 1f       	adc	r18, r19
    1cb4:	84 9f       	mul	r24, r20
    1cb6:	60 0d       	add	r22, r0
    1cb8:	21 1d       	adc	r18, r1
    1cba:	82 2f       	mov	r24, r18
    1cbc:	76 2f       	mov	r23, r22
    1cbe:	6a 2f       	mov	r22, r26
    1cc0:	11 24       	eor	r1, r1
    1cc2:	9f 57       	subi	r25, 0x7F	; 127
    1cc4:	50 40       	sbci	r21, 0x00	; 0
    1cc6:	9a f0       	brmi	.+38     	; 0x1cee <__mulsf3_pse+0x88>
    1cc8:	f1 f0       	breq	.+60     	; 0x1d06 <__mulsf3_pse+0xa0>
    1cca:	88 23       	and	r24, r24
    1ccc:	4a f0       	brmi	.+18     	; 0x1ce0 <__mulsf3_pse+0x7a>
    1cce:	ee 0f       	add	r30, r30
    1cd0:	ff 1f       	adc	r31, r31
    1cd2:	bb 1f       	adc	r27, r27
    1cd4:	66 1f       	adc	r22, r22
    1cd6:	77 1f       	adc	r23, r23
    1cd8:	88 1f       	adc	r24, r24
    1cda:	91 50       	subi	r25, 0x01	; 1
    1cdc:	50 40       	sbci	r21, 0x00	; 0
    1cde:	a9 f7       	brne	.-22     	; 0x1cca <__mulsf3_pse+0x64>
    1ce0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce2:	51 05       	cpc	r21, r1
    1ce4:	80 f0       	brcs	.+32     	; 0x1d06 <__mulsf3_pse+0xa0>
    1ce6:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__fp_inf>
    1cea:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__fp_szero>
    1cee:	5f 3f       	cpi	r21, 0xFF	; 255
    1cf0:	e4 f3       	brlt	.-8      	; 0x1cea <__mulsf3_pse+0x84>
    1cf2:	98 3e       	cpi	r25, 0xE8	; 232
    1cf4:	d4 f3       	brlt	.-12     	; 0x1cea <__mulsf3_pse+0x84>
    1cf6:	86 95       	lsr	r24
    1cf8:	77 95       	ror	r23
    1cfa:	67 95       	ror	r22
    1cfc:	b7 95       	ror	r27
    1cfe:	f7 95       	ror	r31
    1d00:	e7 95       	ror	r30
    1d02:	9f 5f       	subi	r25, 0xFF	; 255
    1d04:	c1 f7       	brne	.-16     	; 0x1cf6 <__mulsf3_pse+0x90>
    1d06:	fe 2b       	or	r31, r30
    1d08:	88 0f       	add	r24, r24
    1d0a:	91 1d       	adc	r25, r1
    1d0c:	96 95       	lsr	r25
    1d0e:	87 95       	ror	r24
    1d10:	97 f9       	bld	r25, 7
    1d12:	08 95       	ret

00001d14 <__udivmodsi4>:
    1d14:	a1 e2       	ldi	r26, 0x21	; 33
    1d16:	1a 2e       	mov	r1, r26
    1d18:	aa 1b       	sub	r26, r26
    1d1a:	bb 1b       	sub	r27, r27
    1d1c:	fd 01       	movw	r30, r26
    1d1e:	0d c0       	rjmp	.+26     	; 0x1d3a <__udivmodsi4_ep>

00001d20 <__udivmodsi4_loop>:
    1d20:	aa 1f       	adc	r26, r26
    1d22:	bb 1f       	adc	r27, r27
    1d24:	ee 1f       	adc	r30, r30
    1d26:	ff 1f       	adc	r31, r31
    1d28:	a2 17       	cp	r26, r18
    1d2a:	b3 07       	cpc	r27, r19
    1d2c:	e4 07       	cpc	r30, r20
    1d2e:	f5 07       	cpc	r31, r21
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <__udivmodsi4_ep>
    1d32:	a2 1b       	sub	r26, r18
    1d34:	b3 0b       	sbc	r27, r19
    1d36:	e4 0b       	sbc	r30, r20
    1d38:	f5 0b       	sbc	r31, r21

00001d3a <__udivmodsi4_ep>:
    1d3a:	66 1f       	adc	r22, r22
    1d3c:	77 1f       	adc	r23, r23
    1d3e:	88 1f       	adc	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	1a 94       	dec	r1
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <__udivmodsi4_loop>
    1d46:	60 95       	com	r22
    1d48:	70 95       	com	r23
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	9b 01       	movw	r18, r22
    1d50:	ac 01       	movw	r20, r24
    1d52:	bd 01       	movw	r22, r26
    1d54:	cf 01       	movw	r24, r30
    1d56:	08 95       	ret

00001d58 <__divmodsi4>:
    1d58:	05 2e       	mov	r0, r21
    1d5a:	97 fb       	bst	r25, 7
    1d5c:	1e f4       	brtc	.+6      	; 0x1d64 <__divmodsi4+0xc>
    1d5e:	00 94       	com	r0
    1d60:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <__negsi2>
    1d64:	57 fd       	sbrc	r21, 7
    1d66:	07 d0       	rcall	.+14     	; 0x1d76 <__divmodsi4_neg2>
    1d68:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <__udivmodsi4>
    1d6c:	07 fc       	sbrc	r0, 7
    1d6e:	03 d0       	rcall	.+6      	; 0x1d76 <__divmodsi4_neg2>
    1d70:	4e f4       	brtc	.+18     	; 0x1d84 <__divmodsi4_exit>
    1d72:	0c 94 c3 0e 	jmp	0x1d86	; 0x1d86 <__negsi2>

00001d76 <__divmodsi4_neg2>:
    1d76:	50 95       	com	r21
    1d78:	40 95       	com	r20
    1d7a:	30 95       	com	r19
    1d7c:	21 95       	neg	r18
    1d7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d80:	4f 4f       	sbci	r20, 0xFF	; 255
    1d82:	5f 4f       	sbci	r21, 0xFF	; 255

00001d84 <__divmodsi4_exit>:
    1d84:	08 95       	ret

00001d86 <__negsi2>:
    1d86:	90 95       	com	r25
    1d88:	80 95       	com	r24
    1d8a:	70 95       	com	r23
    1d8c:	61 95       	neg	r22
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	8f 4f       	sbci	r24, 0xFF	; 255
    1d92:	9f 4f       	sbci	r25, 0xFF	; 255
    1d94:	08 95       	ret

00001d96 <__umulhisi3>:
    1d96:	a2 9f       	mul	r26, r18
    1d98:	b0 01       	movw	r22, r0
    1d9a:	b3 9f       	mul	r27, r19
    1d9c:	c0 01       	movw	r24, r0
    1d9e:	a3 9f       	mul	r26, r19
    1da0:	70 0d       	add	r23, r0
    1da2:	81 1d       	adc	r24, r1
    1da4:	11 24       	eor	r1, r1
    1da6:	91 1d       	adc	r25, r1
    1da8:	b2 9f       	mul	r27, r18
    1daa:	70 0d       	add	r23, r0
    1dac:	81 1d       	adc	r24, r1
    1dae:	11 24       	eor	r1, r1
    1db0:	91 1d       	adc	r25, r1
    1db2:	08 95       	ret

00001db4 <__muluhisi3>:
    1db4:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <__umulhisi3>
    1db8:	a5 9f       	mul	r26, r21
    1dba:	90 0d       	add	r25, r0
    1dbc:	b4 9f       	mul	r27, r20
    1dbe:	90 0d       	add	r25, r0
    1dc0:	a4 9f       	mul	r26, r20
    1dc2:	80 0d       	add	r24, r0
    1dc4:	91 1d       	adc	r25, r1
    1dc6:	11 24       	eor	r1, r1
    1dc8:	08 95       	ret

00001dca <atoi>:
    1dca:	fc 01       	movw	r30, r24
    1dcc:	88 27       	eor	r24, r24
    1dce:	99 27       	eor	r25, r25
    1dd0:	e8 94       	clt
    1dd2:	21 91       	ld	r18, Z+
    1dd4:	20 32       	cpi	r18, 0x20	; 32
    1dd6:	e9 f3       	breq	.-6      	; 0x1dd2 <atoi+0x8>
    1dd8:	29 30       	cpi	r18, 0x09	; 9
    1dda:	10 f0       	brcs	.+4      	; 0x1de0 <atoi+0x16>
    1ddc:	2e 30       	cpi	r18, 0x0E	; 14
    1dde:	c8 f3       	brcs	.-14     	; 0x1dd2 <atoi+0x8>
    1de0:	2b 32       	cpi	r18, 0x2B	; 43
    1de2:	41 f0       	breq	.+16     	; 0x1df4 <atoi+0x2a>
    1de4:	2d 32       	cpi	r18, 0x2D	; 45
    1de6:	39 f4       	brne	.+14     	; 0x1df6 <atoi+0x2c>
    1de8:	68 94       	set
    1dea:	04 c0       	rjmp	.+8      	; 0x1df4 <atoi+0x2a>
    1dec:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <__mulhi_const_10>
    1df0:	82 0f       	add	r24, r18
    1df2:	91 1d       	adc	r25, r1
    1df4:	21 91       	ld	r18, Z+
    1df6:	20 53       	subi	r18, 0x30	; 48
    1df8:	2a 30       	cpi	r18, 0x0A	; 10
    1dfa:	c0 f3       	brcs	.-16     	; 0x1dec <atoi+0x22>
    1dfc:	1e f4       	brtc	.+6      	; 0x1e04 <atoi+0x3a>
    1dfe:	90 95       	com	r25
    1e00:	81 95       	neg	r24
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	08 95       	ret

00001e06 <itoa>:
    1e06:	45 32       	cpi	r20, 0x25	; 37
    1e08:	51 05       	cpc	r21, r1
    1e0a:	20 f4       	brcc	.+8      	; 0x1e14 <itoa+0xe>
    1e0c:	42 30       	cpi	r20, 0x02	; 2
    1e0e:	10 f0       	brcs	.+4      	; 0x1e14 <itoa+0xe>
    1e10:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <__itoa_ncheck>
    1e14:	fb 01       	movw	r30, r22
    1e16:	10 82       	st	Z, r1
    1e18:	cb 01       	movw	r24, r22
    1e1a:	08 95       	ret

00001e1c <__itoa_ncheck>:
    1e1c:	bb 27       	eor	r27, r27
    1e1e:	4a 30       	cpi	r20, 0x0A	; 10
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <__itoa_ncheck+0x12>
    1e22:	99 23       	and	r25, r25
    1e24:	22 f4       	brpl	.+8      	; 0x1e2e <__itoa_ncheck+0x12>
    1e26:	bd e2       	ldi	r27, 0x2D	; 45
    1e28:	90 95       	com	r25
    1e2a:	81 95       	neg	r24
    1e2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e2e:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__utoa_common>

00001e32 <__mulhi_const_10>:
    1e32:	7a e0       	ldi	r23, 0x0A	; 10
    1e34:	97 9f       	mul	r25, r23
    1e36:	90 2d       	mov	r25, r0
    1e38:	87 9f       	mul	r24, r23
    1e3a:	80 2d       	mov	r24, r0
    1e3c:	91 0d       	add	r25, r1
    1e3e:	11 24       	eor	r1, r1
    1e40:	08 95       	ret

00001e42 <__utoa_ncheck>:
    1e42:	bb 27       	eor	r27, r27

00001e44 <__utoa_common>:
    1e44:	fb 01       	movw	r30, r22
    1e46:	55 27       	eor	r21, r21
    1e48:	aa 27       	eor	r26, r26
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	aa 1f       	adc	r26, r26
    1e50:	a4 17       	cp	r26, r20
    1e52:	10 f0       	brcs	.+4      	; 0x1e58 <__utoa_common+0x14>
    1e54:	a4 1b       	sub	r26, r20
    1e56:	83 95       	inc	r24
    1e58:	50 51       	subi	r21, 0x10	; 16
    1e5a:	b9 f7       	brne	.-18     	; 0x1e4a <__utoa_common+0x6>
    1e5c:	a0 5d       	subi	r26, 0xD0	; 208
    1e5e:	aa 33       	cpi	r26, 0x3A	; 58
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <__utoa_common+0x20>
    1e62:	a9 5d       	subi	r26, 0xD9	; 217
    1e64:	a1 93       	st	Z+, r26
    1e66:	00 97       	sbiw	r24, 0x00	; 0
    1e68:	79 f7       	brne	.-34     	; 0x1e48 <__utoa_common+0x4>
    1e6a:	b1 11       	cpse	r27, r1
    1e6c:	b1 93       	st	Z+, r27
    1e6e:	11 92       	st	Z+, r1
    1e70:	cb 01       	movw	r24, r22
    1e72:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <strrev>

00001e76 <strrev>:
    1e76:	dc 01       	movw	r26, r24
    1e78:	fc 01       	movw	r30, r24
    1e7a:	67 2f       	mov	r22, r23
    1e7c:	71 91       	ld	r23, Z+
    1e7e:	77 23       	and	r23, r23
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <strrev+0x4>
    1e82:	32 97       	sbiw	r30, 0x02	; 2
    1e84:	04 c0       	rjmp	.+8      	; 0x1e8e <strrev+0x18>
    1e86:	7c 91       	ld	r23, X
    1e88:	6d 93       	st	X+, r22
    1e8a:	70 83       	st	Z, r23
    1e8c:	62 91       	ld	r22, -Z
    1e8e:	ae 17       	cp	r26, r30
    1e90:	bf 07       	cpc	r27, r31
    1e92:	c8 f3       	brcs	.-14     	; 0x1e86 <strrev+0x10>
    1e94:	08 95       	ret

00001e96 <eeprom_read_byte>:
    1e96:	f9 99       	sbic	0x1f, 1	; 31
    1e98:	fe cf       	rjmp	.-4      	; 0x1e96 <eeprom_read_byte>
    1e9a:	92 bd       	out	0x22, r25	; 34
    1e9c:	81 bd       	out	0x21, r24	; 33
    1e9e:	f8 9a       	sbi	0x1f, 0	; 31
    1ea0:	99 27       	eor	r25, r25
    1ea2:	80 b5       	in	r24, 0x20	; 32
    1ea4:	08 95       	ret

00001ea6 <eeprom_write_byte>:
    1ea6:	26 2f       	mov	r18, r22

00001ea8 <eeprom_write_r18>:
    1ea8:	f9 99       	sbic	0x1f, 1	; 31
    1eaa:	fe cf       	rjmp	.-4      	; 0x1ea8 <eeprom_write_r18>
    1eac:	1f ba       	out	0x1f, r1	; 31
    1eae:	92 bd       	out	0x22, r25	; 34
    1eb0:	81 bd       	out	0x21, r24	; 33
    1eb2:	20 bd       	out	0x20, r18	; 32
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	fa 9a       	sbi	0x1f, 2	; 31
    1eba:	f9 9a       	sbi	0x1f, 1	; 31
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	08 95       	ret

00001ec2 <_exit>:
    1ec2:	f8 94       	cli

00001ec4 <__stop_program>:
    1ec4:	ff cf       	rjmp	.-2      	; 0x1ec4 <__stop_program>
