
sprint_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000282  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ef  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ce  00000000  00000000  00000b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f0  00000000  00000000  000011e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e7  00000000  00000000  00001560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  00001947  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  88:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
//variavel global
uint16_t velocidade_carro = 0;

//interrupcao externa INT0
ISR(INT0_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	if(velocidade_carro < 300)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  a8:	8c 32       	cpi	r24, 0x2C	; 44
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	92 07       	cpc	r25, r18
  ae:	28 f4       	brcc	.+10     	; 0xba <__vector_1+0x2a>
		velocidade_carro += 10;
  b0:	0a 96       	adiw	r24, 0x0a	; 10
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  ba:	9f 91       	pop	r25
  bc:	8f 91       	pop	r24
  be:	2f 91       	pop	r18
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_2>:
//interrupcao externa INT1
ISR(INT1_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
	if(velocidade_carro > 0)
  d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	29 f0       	breq	.+10     	; 0xee <__vector_2+0x24>
		velocidade_carro -= 10;
  e4:	0a 97       	sbiw	r24, 0x0a	; 10
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <anima_velocidade>:
		anima_velocidade(velocidade_carro);
	}
}

void anima_velocidade(uint16_t velocidade_carro)
{
  fc:	ac 01       	movw	r20, r24
	PORTB &= 0b00000000;
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	15 b8       	out	0x05, r1	; 5
	PORTB = ((velocidade_carro / 1) % 10) | (0b110 << 4); //carrega a unidade
 102:	9a 01       	movw	r18, r20
 104:	ad ec       	ldi	r26, 0xCD	; 205
 106:	bc ec       	ldi	r27, 0xCC	; 204
 108:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	96 95       	lsr	r25
 112:	87 95       	ror	r24
 114:	96 95       	lsr	r25
 116:	87 95       	ror	r24
 118:	9c 01       	movw	r18, r24
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	82 0f       	add	r24, r18
 12c:	93 1f       	adc	r25, r19
 12e:	9a 01       	movw	r18, r20
 130:	28 1b       	sub	r18, r24
 132:	39 0b       	sbc	r19, r25
 134:	c9 01       	movw	r24, r18
 136:	80 66       	ori	r24, 0x60	; 96
 138:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e9       	ldi	r24, 0x9F	; 159
 13c:	9f e0       	ldi	r25, 0x0F	; 15
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <anima_velocidade+0x42>
 142:	00 c0       	rjmp	.+0      	; 0x144 <anima_velocidade+0x48>
 144:	00 00       	nop
	_delay_ms(1);
	PORTB = ((velocidade_carro / 10) % 10) | (0b101 << 4); //carrega a dezena
 146:	9a 01       	movw	r18, r20
 148:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 14c:	fc 01       	movw	r30, r24
 14e:	f6 95       	lsr	r31
 150:	e7 95       	ror	r30
 152:	f6 95       	lsr	r31
 154:	e7 95       	ror	r30
 156:	f6 95       	lsr	r31
 158:	e7 95       	ror	r30
 15a:	9f 01       	movw	r18, r30
 15c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 160:	96 95       	lsr	r25
 162:	87 95       	ror	r24
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	9c 01       	movw	r18, r24
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	9f 01       	movw	r18, r30
 184:	28 1b       	sub	r18, r24
 186:	39 0b       	sbc	r19, r25
 188:	c9 01       	movw	r24, r18
 18a:	80 65       	ori	r24, 0x50	; 80
 18c:	85 b9       	out	0x05, r24	; 5
 18e:	8f e9       	ldi	r24, 0x9F	; 159
 190:	9f e0       	ldi	r25, 0x0F	; 15
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <anima_velocidade+0x96>
 196:	00 c0       	rjmp	.+0      	; 0x198 <anima_velocidade+0x9c>
 198:	00 00       	nop
	_delay_ms(1);
	PORTB = (velocidade_carro / 100) | (0b011 << 4); //carrega a centena
 19a:	9a 01       	movw	r18, r20
 19c:	36 95       	lsr	r19
 19e:	27 95       	ror	r18
 1a0:	36 95       	lsr	r19
 1a2:	27 95       	ror	r18
 1a4:	ab e7       	ldi	r26, 0x7B	; 123
 1a6:	b4 e1       	ldi	r27, 0x14	; 20
 1a8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__umulhisi3>
 1ac:	96 95       	lsr	r25
 1ae:	87 95       	ror	r24
 1b0:	80 63       	ori	r24, 0x30	; 48
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	8f e9       	ldi	r24, 0x9F	; 159
 1b6:	9f e0       	ldi	r25, 0x0F	; 15
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <anima_velocidade+0xbc>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <anima_velocidade+0xc2>
 1be:	00 00       	nop
 1c0:	08 95       	ret

000001c2 <main>:
void anima_velocidade(uint16_t velocidade_carro);

int main(void)
{
	//GPIO
	DDRB |= 0b11111111;	//habilita os pinos
 1c2:	84 b1       	in	r24, 0x04	; 4
 1c4:	8f ef       	ldi	r24, 0xFF	; 255
 1c6:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0b11110011; //PD2 e PD3 como entrada
 1c8:	8a b1       	in	r24, 0x0a	; 10
 1ca:	83 7f       	andi	r24, 0xF3	; 243
 1cc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0b00001100; //PullUp PD2 e PD3
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	8b b9       	out	0x0b, r24	; 11
	//configuracao das interrupcoes
	EICRA = 0b00001010;
 1d2:	8a e0       	ldi	r24, 0x0A	; 10
 1d4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	8d bb       	out	0x1d, r24	; 29
	sei();
 1dc:	78 94       	sei
	//chamada da funcao
	while (1)
	{
		anima_velocidade(velocidade_carro);
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e6:	0e 94 7e 00 	call	0xfc	; 0xfc <anima_velocidade>
 1ea:	f9 cf       	rjmp	.-14     	; 0x1de <main+0x1c>

000001ec <__umulhisi3>:
 1ec:	a2 9f       	mul	r26, r18
 1ee:	b0 01       	movw	r22, r0
 1f0:	b3 9f       	mul	r27, r19
 1f2:	c0 01       	movw	r24, r0
 1f4:	a3 9f       	mul	r26, r19
 1f6:	70 0d       	add	r23, r0
 1f8:	81 1d       	adc	r24, r1
 1fa:	11 24       	eor	r1, r1
 1fc:	91 1d       	adc	r25, r1
 1fe:	b2 9f       	mul	r27, r18
 200:	70 0d       	add	r23, r0
 202:	81 1d       	adc	r24, r1
 204:	11 24       	eor	r1, r1
 206:	91 1d       	adc	r25, r1
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
