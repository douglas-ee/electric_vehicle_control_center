
sprint_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001df8  00001e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000045d  0080012e  0080012e  00001eba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001eec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c8  00000000  00000000  00001f30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000446a  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf6  00000000  00000000  00006662  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022f0  00000000  00000000  00007358  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b4c  00000000  00000000  00009648  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d75  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000464d  00000000  00000000  0000af09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0000f556  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_13>
      38:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_14>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 c0 03 	jmp	0x780	; 0x780 <__vector_18>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e8 ef       	ldi	r30, 0xF8	; 248
     2bc:	fd e1       	ldi	r31, 0x1D	; 29
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ae 32       	cpi	r26, 0x2E	; 46
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ae e2       	ldi	r26, 0x2E	; 46
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	ab 38       	cpi	r26, 0x8B	; 139
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 29 06 	call	0xc52	; 0xc52 <main>
     2de:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <configuracao>:
// funcao responsavel pela recepção de um frame de 5 a 8 bits
unsigned char usart_receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));								// espera o dado ser recxebido
	return UDR0;												// le o dado recebido e retorna
}
     2e6:	84 b1       	in	r24, 0x04	; 4
     2e8:	8e 6f       	ori	r24, 0xFE	; 254
     2ea:	84 b9       	out	0x04, r24	; 4
     2ec:	8a b1       	in	r24, 0x0a	; 10
     2ee:	82 7c       	andi	r24, 0xC2	; 194
     2f0:	8a b9       	out	0x0a, r24	; 10
     2f2:	8d e3       	ldi	r24, 0x3D	; 61
     2f4:	8b b9       	out	0x0b, r24	; 11
     2f6:	e9 e6       	ldi	r30, 0x69	; 105
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	82 e8       	ldi	r24, 0x82	; 130
     2fc:	80 83       	st	Z, r24
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	8d bb       	out	0x1d, r24	; 29
     302:	94 e0       	ldi	r25, 0x04	; 4
     304:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
     308:	81 e3       	ldi	r24, 0x31	; 49
     30a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
     30e:	80 81       	ld	r24, Z
     310:	82 68       	ori	r24, 0x82	; 130
     312:	80 83       	st	Z, r24
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	84 bd       	out	0x24, r24	; 36
     318:	23 e0       	ldi	r18, 0x03	; 3
     31a:	25 bd       	out	0x25, r18	; 37
     31c:	29 ef       	ldi	r18, 0xF9	; 249
     31e:	27 bd       	out	0x27, r18	; 39
     320:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     324:	87 ee       	ldi	r24, 0xE7	; 231
     326:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
     32a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
     32e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
     332:	83 e2       	ldi	r24, 0x23	; 35
     334:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
     338:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
     33c:	84 e4       	ldi	r24, 0x44	; 68
     33e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     342:	81 e2       	ldi	r24, 0x21	; 33
     344:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     348:	78 94       	sei
     34a:	08 95       	ret

0000034c <__vector_14>:
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	2f 93       	push	r18
     360:	3f 93       	push	r19
     362:	4f 93       	push	r20
     364:	5f 93       	push	r21
     366:	6f 93       	push	r22
     368:	7f 93       	push	r23
     36a:	8f 93       	push	r24
     36c:	9f 93       	push	r25
     36e:	af 93       	push	r26
     370:	bf 93       	push	r27
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
     376:	c0 90 65 01 	lds	r12, 0x0165	; 0x800165 <tempo_ms>
     37a:	d0 90 66 01 	lds	r13, 0x0166	; 0x800166 <tempo_ms+0x1>
     37e:	e0 90 67 01 	lds	r14, 0x0167	; 0x800167 <tempo_ms+0x2>
     382:	f0 90 68 01 	lds	r15, 0x0168	; 0x800168 <tempo_ms+0x3>
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	c8 1a       	sub	r12, r24
     38a:	d8 0a       	sbc	r13, r24
     38c:	e8 0a       	sbc	r14, r24
     38e:	f8 0a       	sbc	r15, r24
     390:	c0 92 65 01 	sts	0x0165, r12	; 0x800165 <tempo_ms>
     394:	d0 92 66 01 	sts	0x0166, r13	; 0x800166 <tempo_ms+0x1>
     398:	e0 92 67 01 	sts	0x0167, r14	; 0x800167 <tempo_ms+0x2>
     39c:	f0 92 68 01 	sts	0x0168, r15	; 0x800168 <tempo_ms+0x3>
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	25 e0       	ldi	r18, 0x05	; 5
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     3b0:	67 2b       	or	r22, r23
     3b2:	68 2b       	or	r22, r24
     3b4:	69 2b       	or	r22, r25
     3b6:	19 f4       	brne	.+6      	; 0x3be <__vector_14+0x72>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <flag_5ms>
     3be:	c7 01       	movw	r24, r14
     3c0:	b6 01       	movw	r22, r12
     3c2:	24 ef       	ldi	r18, 0xF4	; 244
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     3ce:	67 2b       	or	r22, r23
     3d0:	68 2b       	or	r22, r24
     3d2:	69 2b       	or	r22, r25
     3d4:	19 f4       	brne	.+6      	; 0x3dc <__vector_14+0x90>
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <flag_500ms>
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <__vector_13>:
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	8f 93       	push	r24
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <flag_over_flow>
     418:	8f 91       	pop	r24
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <__vector_10>:
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
     446:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     44a:	86 ff       	sbrs	r24, 6
     44c:	0f c0       	rjmp	.+30     	; 0x46c <__vector_10+0x48>
     44e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     452:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <tempo_up>
     45e:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <tempo_up+0x1>
     462:	a0 93 6f 01 	sts	0x016F, r26	; 0x80016f <tempo_up+0x2>
     466:	b0 93 70 01 	sts	0x0170, r27	; 0x800170 <tempo_up+0x3>
     46a:	2a c0       	rjmp	.+84     	; 0x4c0 <__vector_10+0x9c>
     46c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     470:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <tempo_up>
     47c:	50 91 6e 01 	lds	r21, 0x016E	; 0x80016e <tempo_up+0x1>
     480:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <tempo_up+0x2>
     484:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <tempo_up+0x3>
     488:	84 1b       	sub	r24, r20
     48a:	95 0b       	sbc	r25, r21
     48c:	a6 0b       	sbc	r26, r22
     48e:	b7 0b       	sbc	r27, r23
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	aa 1f       	adc	r26, r26
     496:	bb 1f       	adc	r27, r27
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	aa 1f       	adc	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	aa 1f       	adc	r26, r26
     4a6:	bb 1f       	adc	r27, r27
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	aa 1f       	adc	r26, r26
     4ae:	bb 1f       	adc	r27, r27
     4b0:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <tempo_down>
     4b4:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tempo_down+0x1>
     4b8:	a0 93 6b 01 	sts	0x016B, r26	; 0x80016b <tempo_down+0x2>
     4bc:	b0 93 6c 01 	sts	0x016C, r27	; 0x80016c <tempo_down+0x3>
     4c0:	e1 e8       	ldi	r30, 0x81	; 129
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	90 81       	ld	r25, Z
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	89 27       	eor	r24, r25
     4ca:	80 83       	st	Z, r24
     4cc:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <flag_over_flow>
     4d0:	81 11       	cpse	r24, r1
     4d2:	13 c0       	rjmp	.+38     	; 0x4fa <__vector_10+0xd6>
     4d4:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <tempo_down>
     4d8:	70 91 6a 01 	lds	r23, 0x016A	; 0x80016a <tempo_down+0x1>
     4dc:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <tempo_down+0x2>
     4e0:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <tempo_down+0x3>
     4e4:	2a e3       	ldi	r18, 0x3A	; 58
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     4f0:	30 93 78 01 	sts	0x0178, r19	; 0x800178 <Distancia_objeto_cm+0x1>
     4f4:	20 93 77 01 	sts	0x0177, r18	; 0x800177 <Distancia_objeto_cm>
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__vector_10+0xda>
     4fa:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <flag_over_flow>
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_1>:
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
     54a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <cont_5voltas.2646>
     54e:	85 30       	cpi	r24, 0x05	; 5
     550:	b9 f5       	brne	.+110    	; 0x5c0 <__vector_1+0xa0>
     552:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <tempo_ms>
     556:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <tempo_ms+0x1>
     55a:	a0 91 67 01 	lds	r26, 0x0167	; 0x800167 <tempo_ms+0x2>
     55e:	b0 91 68 01 	lds	r27, 0x0168	; 0x800168 <tempo_ms+0x3>
     562:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <tempo_ms_anterior.2647>
     566:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tempo_ms_anterior.2647+0x1>
     56a:	6c 01       	movw	r12, r24
     56c:	c2 1a       	sub	r12, r18
     56e:	d3 0a       	sbc	r13, r19
     570:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <tempo_ms_anterior.2647>
     574:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <tempo_ms_anterior.2647+0x1>
     578:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <tempo_ms_anterior.2647+0x2>
     57c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <tempo_ms_anterior.2647+0x3>
     580:	e1 2c       	mov	r14, r1
     582:	f1 2c       	mov	r15, r1
     584:	60 ee       	ldi	r22, 0xE0	; 224
     586:	73 e9       	ldi	r23, 0x93	; 147
     588:	84 e0       	ldi	r24, 0x04	; 4
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a7 01       	movw	r20, r14
     58e:	96 01       	movw	r18, r12
     590:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__divmodsi4>
     594:	30 93 7c 01 	sts	0x017C, r19	; 0x80017c <RPM_motor+0x1>
     598:	20 93 7b 01 	sts	0x017B, r18	; 0x80017b <RPM_motor>
     59c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5a4:	a5 e3       	ldi	r26, 0x35	; 53
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
     5ac:	a7 01       	movw	r20, r14
     5ae:	96 01       	movw	r18, r12
     5b0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     5b4:	30 93 7e 01 	sts	0x017E, r19	; 0x80017e <Velocidade_carro_kmH+0x1>
     5b8:	20 93 7d 01 	sts	0x017D, r18	; 0x80017d <Velocidade_carro_kmH>
     5bc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <cont_5voltas.2646>
     5c0:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Velocidade_carro_kmH>
     5c4:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Velocidade_carro_kmH+0x1>
     5c8:	45 97       	sbiw	r24, 0x15	; 21
     5ca:	10 f1       	brcs	.+68     	; 0x610 <__vector_1+0xf0>
     5cc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Distancia_objeto_cm>
     5d0:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <Distancia_objeto_cm+0x1>
     5d4:	8c 32       	cpi	r24, 0x2C	; 44
     5d6:	91 40       	sbci	r25, 0x01	; 1
     5d8:	d8 f4       	brcc	.+54     	; 0x610 <__vector_1+0xf0>
     5da:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <acelerador>
     5de:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <acelerador+0x1>
     5e2:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <acelerador+0x2>
     5e6:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <acelerador+0x3>
     5ea:	af ef       	ldi	r26, 0xFF	; 255
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__muluhisi3>
     5f2:	26 ef       	ldi	r18, 0xF6	; 246
     5f4:	37 e2       	ldi	r19, 0x27	; 39
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     5fe:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <acelerador_sub>
     602:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <acelerador_sub+0x1>
     606:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <acelerador_sub+0x2>
     60a:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <acelerador_sub+0x3>
     60e:	1a c0       	rjmp	.+52     	; 0x644 <__vector_1+0x124>
     610:	20 91 61 01 	lds	r18, 0x0161	; 0x800161 <acelerador>
     614:	30 91 62 01 	lds	r19, 0x0162	; 0x800162 <acelerador+0x1>
     618:	40 91 63 01 	lds	r20, 0x0163	; 0x800163 <acelerador+0x2>
     61c:	50 91 64 01 	lds	r21, 0x0164	; 0x800164 <acelerador+0x3>
     620:	af ef       	ldi	r26, 0xFF	; 255
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__muluhisi3>
     628:	2f ef       	ldi	r18, 0xFF	; 255
     62a:	33 e0       	ldi	r19, 0x03	; 3
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     634:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <acelerador_sub>
     638:	30 93 5e 01 	sts	0x015E, r19	; 0x80015e <acelerador_sub+0x1>
     63c:	40 93 5f 01 	sts	0x015F, r20	; 0x80015f <acelerador_sub+0x2>
     640:	50 93 60 01 	sts	0x0160, r21	; 0x800160 <acelerador_sub+0x3>
     644:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <cont_5voltas.2646>
     648:	8f 5f       	subi	r24, 0xFF	; 255
     64a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <cont_5voltas.2646>
     64e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     652:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatunsisf>
     65e:	23 e2       	ldi	r18, 0x23	; 35
     660:	30 e1       	ldi	r19, 0x10	; 16
     662:	49 e4       	ldi	r20, 0x49	; 73
     664:	50 e4       	ldi	r21, 0x40	; 64
     666:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3>
     66a:	6b 01       	movw	r12, r22
     66c:	7c 01       	movw	r14, r24
     66e:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <Distancia_hodometro_km_pass>
     672:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     676:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     67a:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <Distancia_hodometro_km_pass+0x3>
     67e:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatunsisf>
     682:	a7 01       	movw	r20, r14
     684:	96 01       	movw	r18, r12
     686:	0e 94 1b 0c 	call	0x1836	; 0x1836 <__addsf3>
     68a:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fixunssfsi>
     68e:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <Distancia_hodometro_km_pass>
     692:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     696:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     69a:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <Distancia_hodometro_km_pass+0x3>
     69e:	20 ea       	ldi	r18, 0xA0	; 160
     6a0:	36 e8       	ldi	r19, 0x86	; 134
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
     6aa:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <Distancia_hodometro_km+0x1>
     6ae:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <Distancia_hodometro_km>
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_5>:
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	4c 99       	sbic	0x09, 4	; 9
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <__vector_5+0x2a>
     6ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6f6:	88 3c       	cpi	r24, 0xC8	; 200
     6f8:	91 05       	cpc	r25, r1
     6fa:	28 f4       	brcc	.+10     	; 0x706 <__vector_5+0x2a>
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     702:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     706:	4d 99       	sbic	0x09, 5	; 9
     708:	0c c0       	rjmp	.+24     	; 0x722 <__vector_5+0x46>
     70a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     70e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	91 05       	cpc	r25, r1
     716:	28 f0       	brcs	.+10     	; 0x722 <__vector_5+0x46>
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     71e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     722:	48 99       	sbic	0x09, 0	; 9
     724:	14 c0       	rjmp	.+40     	; 0x74e <__vector_5+0x72>
     726:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     72a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     72e:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <Distancia_hodometro_km_pass>
     732:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     736:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     73a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <Distancia_hodometro_km_pass+0x3>
     73e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <Temperatura_C+0x1>
     742:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <Temperatura_C>
     746:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Bateria_per+0x1>
     74a:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <Bateria_per>
     74e:	9f 91       	pop	r25
     750:	8f 91       	pop	r24
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <usart_init>:
     75c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     760:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     764:	88 e9       	ldi	r24, 0x98	; 152
     766:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     76a:	8e e0       	ldi	r24, 0x0E	; 14
     76c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     770:	08 95       	ret

00000772 <usart_transmit>:
     772:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     776:	95 ff       	sbrs	r25, 5
     778:	fc cf       	rjmp	.-8      	; 0x772 <usart_transmit>
     77a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     77e:	08 95       	ret

00000780 <__vector_18>:
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	1f 93       	push	r17
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
     7a8:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     7ac:	1c 36       	cpi	r17, 0x6C	; 108
     7ae:	81 f4       	brne	.+32     	; 0x7d0 <__vector_18+0x50>
     7b0:	0a c0       	rjmp	.+20     	; 0x7c6 <__vector_18+0x46>
     7b2:	fe 01       	movw	r30, r28
     7b4:	eb 5c       	subi	r30, 0xCB	; 203
     7b6:	fe 4f       	sbci	r31, 0xFE	; 254
     7b8:	10 82       	st	Z, r1
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	ce 01       	movw	r24, r28
     7be:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <eeprom_write_byte>
     7c2:	21 96       	adiw	r28, 0x01	; 1
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <__vector_18+0x4a>
     7c6:	c9 e0       	ldi	r28, 0x09	; 9
     7c8:	d0 e0       	ldi	r29, 0x00	; 0
     7ca:	cd 30       	cpi	r28, 0x0D	; 13
     7cc:	d1 05       	cpc	r29, r1
     7ce:	8c f3       	brlt	.-30     	; 0x7b2 <__vector_18+0x32>
     7d0:	14 36       	cpi	r17, 0x64	; 100
     7d2:	69 f4       	brne	.+26     	; 0x7ee <__vector_18+0x6e>
     7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <__vector_18+0x64>
     7d6:	ce 01       	movw	r24, r28
     7d8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <eeprom_read_byte>
     7dc:	0e 94 b9 03 	call	0x772	; 0x772 <usart_transmit>
     7e0:	21 96       	adiw	r28, 0x01	; 1
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <__vector_18+0x68>
     7e4:	c9 e0       	ldi	r28, 0x09	; 9
     7e6:	d0 e0       	ldi	r29, 0x00	; 0
     7e8:	cd 30       	cpi	r28, 0x0D	; 13
     7ea:	d1 05       	cpc	r29, r1
     7ec:	a4 f3       	brlt	.-24     	; 0x7d6 <__vector_18+0x56>
     7ee:	ff 91       	pop	r31
     7f0:	ef 91       	pop	r30
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	bf 91       	pop	r27
     7f8:	af 91       	pop	r26
     7fa:	9f 91       	pop	r25
     7fc:	8f 91       	pop	r24
     7fe:	7f 91       	pop	r23
     800:	6f 91       	pop	r22
     802:	5f 91       	pop	r21
     804:	4f 91       	pop	r20
     806:	3f 91       	pop	r19
     808:	2f 91       	pop	r18
     80a:	1f 91       	pop	r17
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <anima_velocidade>:

// funcao responsavel por configurar e mostrar o display de 7-Seg na simulacao
void anima_velocidade(uint16_t velocidade_carro, uint8_t *flag_disparo)
{
     816:	cf 93       	push	r28
     818:	ac 01       	movw	r20, r24
     81a:	fb 01       	movw	r30, r22
	// declarando variavel local
	static int8_t cont_dig = 0;
	// condicao com *flag_disparo = &flag_5ms (sempre que &flag_5ms for true ele dispara
	if(*flag_disparo)
     81c:	80 81       	ld	r24, Z
     81e:	88 23       	and	r24, r24
     820:	09 f4       	brne	.+2      	; 0x824 <anima_velocidade+0xe>
     822:	99 c0       	rjmp	.+306    	; 0x956 <__stack+0x57>
	{
		// switch case responsavel por dividir o acionamento em 3 partes
		switch(cont_dig)
     824:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <cont_dig.2673>
     828:	81 30       	cpi	r24, 0x01	; 1
     82a:	59 f1       	breq	.+86     	; 0x882 <anima_velocidade+0x6c>
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	09 f4       	brne	.+2      	; 0x832 <anima_velocidade+0x1c>
     830:	58 c0       	rjmp	.+176    	; 0x8e2 <anima_velocidade+0xcc>
     832:	81 11       	cpse	r24, r1
     834:	8a c0       	rjmp	.+276    	; 0x94a <__stack+0x4b>
		{
		case 0:
			PORTB &= 0b00000001;												// resetando PB1 - PB7
     836:	85 b1       	in	r24, 0x05	; 5
     838:	81 70       	andi	r24, 0x01	; 1
     83a:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b11000000;												// resetando PB4, pino que habilita o display das unidades
     83c:	85 b1       	in	r24, 0x05	; 5
     83e:	80 6c       	ori	r24, 0xC0	; 192
     840:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 1) % 10) & 0b00001111) << 1);		// separa o digito das unidades e coloca em PB0 - PB3
     842:	c5 b1       	in	r28, 0x05	; 5
     844:	9a 01       	movw	r18, r20
     846:	ad ec       	ldi	r26, 0xCD	; 205
     848:	bc ec       	ldi	r27, 0xCC	; 204
     84a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
     84e:	96 95       	lsr	r25
     850:	87 95       	ror	r24
     852:	96 95       	lsr	r25
     854:	87 95       	ror	r24
     856:	96 95       	lsr	r25
     858:	87 95       	ror	r24
     85a:	9c 01       	movw	r18, r24
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	88 0f       	add	r24, r24
     866:	99 1f       	adc	r25, r25
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	82 0f       	add	r24, r18
     86e:	93 1f       	adc	r25, r19
     870:	9a 01       	movw	r18, r20
     872:	28 1b       	sub	r18, r24
     874:	39 0b       	sbc	r19, r25
     876:	c9 01       	movw	r24, r18
     878:	8f 70       	andi	r24, 0x0F	; 15
     87a:	88 0f       	add	r24, r24
     87c:	8c 2b       	or	r24, r28
     87e:	85 b9       	out	0x05, r24	; 5
			break;
     880:	64 c0       	rjmp	.+200    	; 0x94a <__stack+0x4b>

		case 1:
			PORTB &= 0b00000001;												// resetando PB1 - PB7
     882:	85 b1       	in	r24, 0x05	; 5
     884:	81 70       	andi	r24, 0x01	; 1
     886:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b10100000;												// resetando PB5 e PB7, pino que habilita o display das dezenas
     888:	85 b1       	in	r24, 0x05	; 5
     88a:	80 6a       	ori	r24, 0xA0	; 160
     88c:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 10) % 10) & 0b00001111) << 1);		// separa o digito das unidades e coloca em PB0 - PB3
     88e:	c5 b1       	in	r28, 0x05	; 5
     890:	9a 01       	movw	r18, r20
     892:	ad ec       	ldi	r26, 0xCD	; 205
     894:	bc ec       	ldi	r27, 0xCC	; 204
     896:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
     89a:	ac 01       	movw	r20, r24
     89c:	56 95       	lsr	r21
     89e:	47 95       	ror	r20
     8a0:	56 95       	lsr	r21
     8a2:	47 95       	ror	r20
     8a4:	56 95       	lsr	r21
     8a6:	47 95       	ror	r20
     8a8:	9a 01       	movw	r18, r20
     8aa:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
     8ae:	96 95       	lsr	r25
     8b0:	87 95       	ror	r24
     8b2:	96 95       	lsr	r25
     8b4:	87 95       	ror	r24
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	9c 01       	movw	r18, r24
     8bc:	22 0f       	add	r18, r18
     8be:	33 1f       	adc	r19, r19
     8c0:	88 0f       	add	r24, r24
     8c2:	99 1f       	adc	r25, r25
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	88 0f       	add	r24, r24
     8ca:	99 1f       	adc	r25, r25
     8cc:	82 0f       	add	r24, r18
     8ce:	93 1f       	adc	r25, r19
     8d0:	9a 01       	movw	r18, r20
     8d2:	28 1b       	sub	r18, r24
     8d4:	39 0b       	sbc	r19, r25
     8d6:	c9 01       	movw	r24, r18
     8d8:	8f 70       	andi	r24, 0x0F	; 15
     8da:	88 0f       	add	r24, r24
     8dc:	8c 2b       	or	r24, r28
     8de:	85 b9       	out	0x05, r24	; 5
			break;
     8e0:	34 c0       	rjmp	.+104    	; 0x94a <__stack+0x4b>

		case 2:
			PORTB &= 0b00000001;												// resetando PB1 - PB7
     8e2:	85 b1       	in	r24, 0x05	; 5
     8e4:	81 70       	andi	r24, 0x01	; 1
     8e6:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b01100000;												// resetando PB5 e PB7, pino que habilita o display das centenas
     8e8:	85 b1       	in	r24, 0x05	; 5
     8ea:	80 66       	ori	r24, 0x60	; 96
     8ec:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 100) % 10) & 0b00001111) << 1);		// separa o digito das unidades e coloca em PB0 - PB3
     8ee:	c5 b1       	in	r28, 0x05	; 5
     8f0:	9a 01       	movw	r18, r20
     8f2:	36 95       	lsr	r19
     8f4:	27 95       	ror	r18
     8f6:	36 95       	lsr	r19
     8f8:	27 95       	ror	r18
     8fa:	ab e7       	ldi	r26, 0x7B	; 123
     8fc:	b4 e1       	ldi	r27, 0x14	; 20
     8fe:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
     902:	ac 01       	movw	r20, r24
     904:	56 95       	lsr	r21
     906:	47 95       	ror	r20
     908:	9a 01       	movw	r18, r20
     90a:	ad ec       	ldi	r26, 0xCD	; 205
     90c:	bc ec       	ldi	r27, 0xCC	; 204
     90e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
     912:	96 95       	lsr	r25
     914:	87 95       	ror	r24
     916:	96 95       	lsr	r25
     918:	87 95       	ror	r24
     91a:	96 95       	lsr	r25
     91c:	87 95       	ror	r24
     91e:	9c 01       	movw	r18, r24
     920:	22 0f       	add	r18, r18
     922:	33 1f       	adc	r19, r19
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	88 0f       	add	r24, r24
     92e:	99 1f       	adc	r25, r25
     930:	82 0f       	add	r24, r18
     932:	93 1f       	adc	r25, r19
     934:	9a 01       	movw	r18, r20
     936:	28 1b       	sub	r18, r24
     938:	39 0b       	sbc	r19, r25
     93a:	c9 01       	movw	r24, r18
     93c:	8f 70       	andi	r24, 0x0F	; 15
     93e:	88 0f       	add	r24, r24
     940:	8c 2b       	or	r24, r28
     942:	85 b9       	out	0x05, r24	; 5
			cont_dig = -1;
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cont_dig.2673>
			break;
		}
		cont_dig++;
     94a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <cont_dig.2673>
     94e:	8f 5f       	subi	r24, 0xFF	; 255
     950:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cont_dig.2673>
		*flag_disparo = 0;
     954:	10 82       	st	Z, r1
	}
}
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <anima_ADC>:
	}
}

// funcao responsavel por configurar o ADC da aceleracao, temperatura e bateria
void anima_ADC(uint16_t *bateria, uint16_t *temperatura, uint8_t *flag_disparo)
{
     95a:	8f 92       	push	r8
     95c:	9f 92       	push	r9
     95e:	af 92       	push	r10
     960:	bf 92       	push	r11
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	9c 01       	movw	r18, r24
	// declarando variavel local
	static uint8_t cont_dig = 0;
	
	// condicao com *flag_disparo = &flag_5ms (sempre que &flag_5ms for true ele dispara
	if (*flag_disparo)
     970:	fa 01       	movw	r30, r20
     972:	90 81       	ld	r25, Z
     974:	99 23       	and	r25, r25
     976:	09 f4       	brne	.+2      	; 0x97a <anima_ADC+0x20>
     978:	87 c0       	rjmp	.+270    	; 0xa88 <anima_ADC+0x12e>
     97a:	ea 01       	movw	r28, r20
     97c:	7b 01       	movw	r14, r22
     97e:	89 01       	movw	r16, r18
	{
		// switch case responsavel por dividir o acionamento em 3 partes
		switch(cont_dig)
     980:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
     984:	91 30       	cpi	r25, 0x01	; 1
     986:	d1 f0       	breq	.+52     	; 0x9bc <anima_ADC+0x62>
     988:	18 f0       	brcs	.+6      	; 0x990 <anima_ADC+0x36>
     98a:	92 30       	cpi	r25, 0x02	; 2
     98c:	71 f1       	breq	.+92     	; 0x9ea <anima_ADC+0x90>
     98e:	76 c0       	rjmp	.+236    	; 0xa7c <anima_ADC+0x122>
		{
		case 0: // canal 0 - ADMUX funciona como acelerador 
			ADMUX = 0b01000000; // ADMUX 0
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			acelerador = ADC;
     996:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     99a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     99e:	a0 e0       	ldi	r26, 0x00	; 0
     9a0:	b0 e0       	ldi	r27, 0x00	; 0
     9a2:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <acelerador>
     9a6:	90 93 62 01 	sts	0x0162, r25	; 0x800162 <acelerador+0x1>
     9aa:	a0 93 63 01 	sts	0x0163, r26	; 0x800163 <acelerador+0x2>
     9ae:	b0 93 64 01 	sts	0x0164, r27	; 0x800164 <acelerador+0x3>
			OCR2B = acelerador_sub;
     9b2:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <acelerador_sub>
     9b6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			break;
     9ba:	60 c0       	rjmp	.+192    	; 0xa7c <anima_ADC+0x122>

		case 1: // canal 1 - ADMUX funciona como bateria
			ADMUX = 0b01000001; // ADMUX 1
     9bc:	81 e4       	ldi	r24, 0x41	; 65
     9be:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			*bateria = (((double)100 / 1023) * ADC);
     9c2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9c6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatunsisf>
     9d2:	2d e0       	ldi	r18, 0x0D	; 13
     9d4:	32 e3       	ldi	r19, 0x32	; 50
     9d6:	48 ec       	ldi	r20, 0xC8	; 200
     9d8:	5d e3       	ldi	r21, 0x3D	; 61
     9da:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3>
     9de:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fixunssfsi>
     9e2:	f8 01       	movw	r30, r16
     9e4:	71 83       	std	Z+1, r23	; 0x01
     9e6:	60 83       	st	Z, r22
			break;
     9e8:	49 c0       	rjmp	.+146    	; 0xa7c <anima_ADC+0x122>

		case 2: // canal 2 - ADMUX funciona como acelerador
			ADMUX = 0b01000010; // ADMUX 2
     9ea:	82 e4       	ldi	r24, 0x42	; 66
     9ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			// equacao de tensao		[Vt = (5/1023)*ADC]
			// equacao de resistencia	[Rt = (1000*Vt)/(5 - Vt)]
			// equacao de temperatura	[T = 2,6*Rt - 260]
			*temperatura = (((double)2.6 * (((double)1000 * (((double)5 / 1023) * ADC)) / (5 - (((double)5 / 1023) * ADC)))) - 260);
     9f0:	08 e7       	ldi	r16, 0x78	; 120
     9f2:	10 e0       	ldi	r17, 0x00	; 0
     9f4:	f8 01       	movw	r30, r16
     9f6:	60 81       	ld	r22, Z
     9f8:	71 81       	ldd	r23, Z+1	; 0x01
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatunsisf>
     a02:	2a e0       	ldi	r18, 0x0A	; 10
     a04:	38 e2       	ldi	r19, 0x28	; 40
     a06:	40 ea       	ldi	r20, 0xA0	; 160
     a08:	5b e3       	ldi	r21, 0x3B	; 59
     a0a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3>
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	4a e7       	ldi	r20, 0x7A	; 122
     a14:	54 e4       	ldi	r21, 0x44	; 68
     a16:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3>
     a1a:	4b 01       	movw	r8, r22
     a1c:	5c 01       	movw	r10, r24
     a1e:	f8 01       	movw	r30, r16
     a20:	60 81       	ld	r22, Z
     a22:	71 81       	ldd	r23, Z+1	; 0x01
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <__floatunsisf>
     a2c:	2a e0       	ldi	r18, 0x0A	; 10
     a2e:	38 e2       	ldi	r19, 0x28	; 40
     a30:	40 ea       	ldi	r20, 0xA0	; 160
     a32:	5b e3       	ldi	r21, 0x3B	; 59
     a34:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3>
     a38:	9b 01       	movw	r18, r22
     a3a:	ac 01       	movw	r20, r24
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	80 ea       	ldi	r24, 0xA0	; 160
     a42:	90 e4       	ldi	r25, 0x40	; 64
     a44:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__subsf3>
     a48:	9b 01       	movw	r18, r22
     a4a:	ac 01       	movw	r20, r24
     a4c:	c5 01       	movw	r24, r10
     a4e:	b4 01       	movw	r22, r8
     a50:	0e 94 87 0c 	call	0x190e	; 0x190e <__divsf3>
     a54:	26 e6       	ldi	r18, 0x66	; 102
     a56:	36 e6       	ldi	r19, 0x66	; 102
     a58:	46 e2       	ldi	r20, 0x26	; 38
     a5a:	50 e4       	ldi	r21, 0x40	; 64
     a5c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <__mulsf3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	42 e8       	ldi	r20, 0x82	; 130
     a66:	53 e4       	ldi	r21, 0x43	; 67
     a68:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__subsf3>
     a6c:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <__fixunssfsi>
     a70:	f7 01       	movw	r30, r14
     a72:	71 83       	std	Z+1, r23	; 0x01
     a74:	60 83       	st	Z, r22
			cont_dig = -1;
     a76:	8f ef       	ldi	r24, 0xFF	; 255
     a78:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			break;
		}
		cont_dig++;
     a7c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     a80:	8f 5f       	subi	r24, 0xFF	; 255
     a82:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
		*flag_disparo = 0;
     a86:	18 82       	st	Y, r1
	}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	bf 90       	pop	r11
     a96:	af 90       	pop	r10
     a98:	9f 90       	pop	r9
     a9a:	8f 90       	pop	r8
     a9c:	08 95       	ret

00000a9e <anima_LCD>:
	}
}

// funcao responsavel por configurar e mostrar o LCD SSD1306
void anima_LCD(uint16_t diametro_pneu_cm, uint16_t rpm_motor, uint16_t distancia_hodometro_km, uint16_t distancia_objeto_cm, uint8_t *flag_disparo)
{
     a9e:	8f 92       	push	r8
     aa0:	9f 92       	push	r9
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	6c 01       	movw	r12, r24
     ab8:	4b 01       	movw	r8, r22
     aba:	7a 01       	movw	r14, r20
     abc:	59 01       	movw	r10, r18
     abe:	e8 01       	movw	r28, r16
	// chamada do prototipo da funcao ADC
	anima_ADC(&Bateria_per, &Temperatura_C, &flag_5ms);
     ac0:	41 e8       	ldi	r20, 0x81	; 129
     ac2:	51 e0       	ldi	r21, 0x01	; 1
     ac4:	63 e7       	ldi	r22, 0x73	; 115
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	85 e7       	ldi	r24, 0x75	; 117
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 ad 04 	call	0x95a	; 0x95a <anima_ADC>

	// condicao com *flag_disparo = &flag_500ms (sempre que &flag_5ms for true ele dispara
	if(*flag_disparo)
     ad0:	88 81       	ld	r24, Y
     ad2:	88 23       	and	r24, r24
     ad4:	09 f4       	brne	.+2      	; 0xad8 <anima_LCD+0x3a>
     ad6:	b0 c0       	rjmp	.+352    	; 0xc38 <anima_LCD+0x19a>
	{
		// iniciando o SSD1306 e configurando o display
		GLCD_Setup();											// chamada do setup() para inicializar o display
     ad8:	0e 94 86 08 	call	0x110c	; 0x110c <GLCD_Setup>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);			// chamada do setFont para chamar o tamanho, cor e tipo de fonte
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	48 e0       	ldi	r20, 0x08	; 8
     ae0:	65 e0       	ldi	r22, 0x05	; 5
     ae2:	88 e6       	ldi	r24, 0x68	; 104
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <GLCD_SetFont>
		GLCD_InvertScreen();
     aea:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <GLCD_InvertScreen>
		GLCD_Clear();											// limpando o display
     aee:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <GLCD_Clear>
		GLCD_GotoXY(3, 2);										// demarcando a posicao da string seguinte
     af2:	62 e0       	ldi	r22, 0x02	; 2
     af4:	83 e0       	ldi	r24, 0x03	; 3
     af6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintString("LASD Car");							// printando uma string no display
     afa:	82 e0       	ldi	r24, 0x02	; 2
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_DrawRectangle(1, 1, 50, 10 , GLCD_Black);			// printando um retagulo no display de borda preta em dada posicao desejada
     b02:	0f ef       	ldi	r16, 0xFF	; 255
     b04:	2a e0       	ldi	r18, 0x0A	; 10
     b06:	42 e3       	ldi	r20, 0x32	; 50
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GLCD_DrawRectangle>
		GLCD_GotoXY(2, 16);										// demarcando a posicao da string seguinte
     b10:	60 e1       	ldi	r22, 0x10	; 16
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintInteger(rpm_motor);							// printando uma variavel no display
     b18:	b4 01       	movw	r22, r8
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 af 0b 	call	0x175e	; 0x175e <GLCD_PrintInteger>
		GLCD_PrintString(" rpm");								// printando uma string no display
     b22:	8b e0       	ldi	r24, 0x0B	; 11
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_GotoXY(2, 27);										// demarcando a posicao da string seguinte
     b2a:	6b e1       	ldi	r22, 0x1B	; 27
     b2c:	82 e0       	ldi	r24, 0x02	; 2
     b2e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintString("Sonar: ");							// printando uma string no display
     b32:	80 e1       	ldi	r24, 0x10	; 16
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_PrintInteger(distancia_objeto_cm);					// printando uma variavel no display
     b3a:	b5 01       	movw	r22, r10
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	0e 94 af 0b 	call	0x175e	; 0x175e <GLCD_PrintInteger>
		GLCD_PrintString("cm");									// printando uma string no display
     b44:	88 e1       	ldi	r24, 0x18	; 24
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_GotoXY(2, 40);										// demarcando a posicao da string seguinte
     b4c:	68 e2       	ldi	r22, 0x28	; 40
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintString("D. Pneu: ");							// printando uma string no display
     b54:	8b e1       	ldi	r24, 0x1B	; 27
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_PrintInteger(diametro_pneu_cm);					// printando uma variavel no display
     b5c:	b6 01       	movw	r22, r12
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 af 0b 	call	0x175e	; 0x175e <GLCD_PrintInteger>
		GLCD_PrintString("cm");									// printando uma string no display
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_GotoXY(20, 53);									// demarcando a posicao da string seguinte
     b6e:	65 e3       	ldi	r22, 0x35	; 53
     b70:	84 e1       	ldi	r24, 0x14	; 20
     b72:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintInteger(distancia_hodometro_km);				// printando uma variavel no display
     b76:	b7 01       	movw	r22, r14
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 af 0b 	call	0x175e	; 0x175e <GLCD_PrintInteger>
		GLCD_PrintString("km");									// printando uma string no display
     b80:	85 e2       	ldi	r24, 0x25	; 37
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_DrawRectangle(10, 50, 58, 62 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     b88:	2e e3       	ldi	r18, 0x3E	; 62
     b8a:	4a e3       	ldi	r20, 0x3A	; 58
     b8c:	62 e3       	ldi	r22, 0x32	; 50
     b8e:	8a e0       	ldi	r24, 0x0A	; 10
     b90:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GLCD_DrawRectangle>
		GLCD_DrawRectangle(90, 2, 125, 32 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     b94:	20 e2       	ldi	r18, 0x20	; 32
     b96:	4d e7       	ldi	r20, 0x7D	; 125
     b98:	62 e0       	ldi	r22, 0x02	; 2
     b9a:	8a e5       	ldi	r24, 0x5A	; 90
     b9c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GLCD_DrawRectangle>
		GLCD_GotoXY(93, 8);										// demarcando a posicao da string seguinte
     ba0:	68 e0       	ldi	r22, 0x08	; 8
     ba2:	8d e5       	ldi	r24, 0x5D	; 93
     ba4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintInteger(Bateria_per);							// printando uma variavel no display
     ba8:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <Bateria_per>
     bac:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <Bateria_per+0x1>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 af 0b 	call	0x175e	; 0x175e <GLCD_PrintInteger>
		GLCD_PrintString(" %");									// printando uma string no display
     bb8:	88 e2       	ldi	r24, 0x28	; 40
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_GotoXY(93, 21);									// demarcando a posicao da string seguinte
     bc0:	65 e1       	ldi	r22, 0x15	; 21
     bc2:	8d e5       	ldi	r24, 0x5D	; 93
     bc4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
		GLCD_PrintInteger(Temperatura_C);						// printando uma variavel no display
     bc8:	60 91 73 01 	lds	r22, 0x0173	; 0x800173 <Temperatura_C>
     bcc:	70 91 74 01 	lds	r23, 0x0174	; 0x800174 <Temperatura_C+0x1>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 af 0b 	call	0x175e	; 0x175e <GLCD_PrintInteger>
		GLCD_PrintString(" C");									// printando uma string no display
     bd8:	8b e2       	ldi	r24, 0x2B	; 43
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
		GLCD_DrawRectangle(90, 35, 125, 60 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     be0:	2c e3       	ldi	r18, 0x3C	; 60
     be2:	4d e7       	ldi	r20, 0x7D	; 125
     be4:	63 e2       	ldi	r22, 0x23	; 35
     be6:	8a e5       	ldi	r24, 0x5A	; 90
     be8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GLCD_DrawRectangle>
		GLCD_DrawRectangle(94, 39, 121, 56 , GLCD_Black);		// printando um retagulo no display de borda preta em dada posicao desejada
     bec:	28 e3       	ldi	r18, 0x38	; 56
     bee:	49 e7       	ldi	r20, 0x79	; 121
     bf0:	67 e2       	ldi	r22, 0x27	; 39
     bf2:	8e e5       	ldi	r24, 0x5E	; 94
     bf4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GLCD_DrawRectangle>

		// condicao responsavel por identificar se o motor_dc se encontra [P] - parado, ou girando para [D] - direita, [E] - esquerda
		if(!(PIND & 0b10000000))
     bf8:	4f 99       	sbic	0x09, 7	; 9
     bfa:	07 c0       	rjmp	.+14     	; 0xc0a <anima_LCD+0x16c>
		{
			GLCD_GotoXY(106, 45);								// demarcando a posicao da string seguinte
     bfc:	6d e2       	ldi	r22, 0x2D	; 45
     bfe:	8a e6       	ldi	r24, 0x6A	; 106
     c00:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
			GLCD_PrintChar('P');								// printando uma variavel [P] no display
     c04:	80 e5       	ldi	r24, 0x50	; 80
     c06:	0e 94 87 0a 	call	0x150e	; 0x150e <GLCD_PrintChar>
		}
		if((PIND & 0b10000000))
     c0a:	4f 9b       	sbis	0x09, 7	; 9
     c0c:	12 c0       	rjmp	.+36     	; 0xc32 <anima_LCD+0x194>
		{
			if(!(PIND & 0b01000000))
     c0e:	4e 99       	sbic	0x09, 6	; 9
     c10:	07 c0       	rjmp	.+14     	; 0xc20 <anima_LCD+0x182>
			{
				GLCD_GotoXY(106, 45);							// demarcando a posicao da string seguinte
     c12:	6d e2       	ldi	r22, 0x2D	; 45
     c14:	8a e6       	ldi	r24, 0x6A	; 106
     c16:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
				GLCD_PrintChar('D');							// printando uma variavel [D] no display
     c1a:	84 e4       	ldi	r24, 0x44	; 68
     c1c:	0e 94 87 0a 	call	0x150e	; 0x150e <GLCD_PrintChar>
			}
			if((PIND & 0b01000000))
     c20:	4e 9b       	sbis	0x09, 6	; 9
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <anima_LCD+0x194>
			{
				GLCD_GotoXY(106, 45);							// demarcando a posicao da string seguinte
     c24:	6d e2       	ldi	r22, 0x2D	; 45
     c26:	8a e6       	ldi	r24, 0x6A	; 106
     c28:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
				GLCD_PrintChar('E');							// printando uma variavel [E] no display
     c2c:	85 e4       	ldi	r24, 0x45	; 69
     c2e:	0e 94 87 0a 	call	0x150e	; 0x150e <GLCD_PrintChar>
			}
		}
		*flag_disparo = 0;
     c32:	18 82       	st	Y, r1
		GLCD_Render();
     c34:	0e 94 4f 08 	call	0x109e	; 0x109e <GLCD_Render>
	}
}
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	bf 90       	pop	r11
     c4a:	af 90       	pop	r10
     c4c:	9f 90       	pop	r9
     c4e:	8f 90       	pop	r8
     c50:	08 95       	ret

00000c52 <main>:
void anima_ADC(uint16_t *bateria, uint16_t *temperatura, uint8_t *flag_disparo);

int main(void)
{
	// chamada da funcao usart de inicializacao
	usart_init(MYUBRR);
     c52:	87 e6       	ldi	r24, 0x67	; 103
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 ae 03 	call	0x75c	; 0x75c <usart_init>

	// chamando funcao que configura GPIO, interruptores, timers, ADC, PWM
	configuracao();
     c5a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <configuracao>

	// loop responsavel por separar e ler os dados do diametro que serao armazenados na eeprom, nos espacos 0 ate 3
	for (int i = 0; i < 4; i++)
     c5e:	c0 e0       	ldi	r28, 0x00	; 0
     c60:	d0 e0       	ldi	r29, 0x00	; 0
     c62:	10 c0       	rjmp	.+32     	; 0xc84 <main+0x32>
	{
		aux_eeprom[i] = eeprom_read_byte(i);
     c64:	ce 01       	movw	r24, r28
     c66:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <eeprom_read_byte>
     c6a:	fe 01       	movw	r30, r28
     c6c:	e9 5b       	subi	r30, 0xB9	; 185
     c6e:	fe 4f       	sbci	r31, 0xFE	; 254
     c70:	80 83       	st	Z, r24
		Diametro_pneu_cm = atoi(aux_eeprom); // convertendo de char para int
     c72:	87 e4       	ldi	r24, 0x47	; 71
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <atoi>
     c7a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

	// chamando funcao que configura GPIO, interruptores, timers, ADC, PWM
	configuracao();

	// loop responsavel por separar e ler os dados do diametro que serao armazenados na eeprom, nos espacos 0 ate 3
	for (int i = 0; i < 4; i++)
     c82:	21 96       	adiw	r28, 0x01	; 1
     c84:	c4 30       	cpi	r28, 0x04	; 4
     c86:	d1 05       	cpc	r29, r1
     c88:	6c f3       	brlt	.-38     	; 0xc64 <main+0x12>
     c8a:	c4 e0       	ldi	r28, 0x04	; 4
     c8c:	d0 e0       	ldi	r29, 0x00	; 0
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <main+0x64>
	}

	// loop responsavel por separar e ler os dados do distancia que serao armazenados na eeprom, nos espacos 4 ate 8
	for (int i = 4; i < 9; i++)
	{
		aux_eeprom[i - 4] = eeprom_read_byte(i);
     c90:	8e 01       	movw	r16, r28
     c92:	04 50       	subi	r16, 0x04	; 4
     c94:	11 09       	sbc	r17, r1
     c96:	ce 01       	movw	r24, r28
     c98:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <eeprom_read_byte>
     c9c:	f8 01       	movw	r30, r16
     c9e:	e9 5b       	subi	r30, 0xB9	; 185
     ca0:	fe 4f       	sbci	r31, 0xFE	; 254
     ca2:	80 83       	st	Z, r24
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
     ca4:	87 e4       	ldi	r24, 0x47	; 71
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <atoi>
     cac:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <Distancia_hodometro_km+0x1>
     cb0:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <Distancia_hodometro_km>
		aux_eeprom[i] = eeprom_read_byte(i);
		Diametro_pneu_cm = atoi(aux_eeprom); // convertendo de char para int
	}

	// loop responsavel por separar e ler os dados do distancia que serao armazenados na eeprom, nos espacos 4 ate 8
	for (int i = 4; i < 9; i++)
     cb4:	21 96       	adiw	r28, 0x01	; 1
     cb6:	c9 30       	cpi	r28, 0x09	; 9
     cb8:	d1 05       	cpc	r29, r1
     cba:	54 f3       	brlt	.-44     	; 0xc90 <main+0x3e>
	{
		aux_eeprom[i - 4] = eeprom_read_byte(i);
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
	}
	Distancia_hodometro_km_pass = Distancia_hodometro_km * 100000;
     cbc:	a0 91 79 01 	lds	r26, 0x0179	; 0x800179 <Distancia_hodometro_km>
     cc0:	b0 91 7a 01 	lds	r27, 0x017A	; 0x80017a <Distancia_hodometro_km+0x1>
     cc4:	20 ea       	ldi	r18, 0xA0	; 160
     cc6:	36 e8       	ldi	r19, 0x86	; 134
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <__muluhisi3>
     cd0:	60 93 59 01 	sts	0x0159, r22	; 0x800159 <Distancia_hodometro_km_pass>
     cd4:	70 93 5a 01 	sts	0x015A, r23	; 0x80015a <Distancia_hodometro_km_pass+0x1>
     cd8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Distancia_hodometro_km_pass+0x2>
     cdc:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <Distancia_hodometro_km_pass+0x3>

	// loop responsavel por separar e ler os dados da temperatura que serao armazenados na eeprom, nos espacos 9 ate 12
	for (int i = 9; i < 13; i++)
     ce0:	c9 e0       	ldi	r28, 0x09	; 9
     ce2:	d0 e0       	ldi	r29, 0x00	; 0
     ce4:	13 c0       	rjmp	.+38     	; 0xd0c <main+0xba>
	{
		aux_eeprom[i - 9] = eeprom_read_byte(i);
     ce6:	8e 01       	movw	r16, r28
     ce8:	09 50       	subi	r16, 0x09	; 9
     cea:	11 09       	sbc	r17, r1
     cec:	ce 01       	movw	r24, r28
     cee:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <eeprom_read_byte>
     cf2:	f8 01       	movw	r30, r16
     cf4:	e9 5b       	subi	r30, 0xB9	; 185
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	80 83       	st	Z, r24
		Temperatura_C = atoi(aux_eeprom); // convertendo de char para int
     cfa:	87 e4       	ldi	r24, 0x47	; 71
     cfc:	91 e0       	ldi	r25, 0x01	; 1
     cfe:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <atoi>
     d02:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <Temperatura_C+0x1>
     d06:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <Temperatura_C>
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
	}
	Distancia_hodometro_km_pass = Distancia_hodometro_km * 100000;

	// loop responsavel por separar e ler os dados da temperatura que serao armazenados na eeprom, nos espacos 9 ate 12
	for (int i = 9; i < 13; i++)
     d0a:	21 96       	adiw	r28, 0x01	; 1
     d0c:	cd 30       	cpi	r28, 0x0D	; 13
     d0e:	d1 05       	cpc	r29, r1
     d10:	54 f3       	brlt	.-44     	; 0xce6 <main+0x94>
     d12:	cd e0       	ldi	r28, 0x0D	; 13
     d14:	d0 e0       	ldi	r29, 0x00	; 0
     d16:	13 c0       	rjmp	.+38     	; 0xd3e <main+0xec>
	}

	// loop responsavel por separar e ler os dados da bateria que serao armazenados na eeprom, nos espacos 13 ate 16
	for (int i = 13; i < 17; i++)
	{
		aux_eeprom[i - 13] = eeprom_read_byte(i);
     d18:	8e 01       	movw	r16, r28
     d1a:	0d 50       	subi	r16, 0x0D	; 13
     d1c:	11 09       	sbc	r17, r1
     d1e:	ce 01       	movw	r24, r28
     d20:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <eeprom_read_byte>
     d24:	f8 01       	movw	r30, r16
     d26:	e9 5b       	subi	r30, 0xB9	; 185
     d28:	fe 4f       	sbci	r31, 0xFE	; 254
     d2a:	80 83       	st	Z, r24
		Bateria_per = atoi(aux_eeprom); // convertendo de char para int
     d2c:	87 e4       	ldi	r24, 0x47	; 71
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <atoi>
     d34:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <Bateria_per+0x1>
     d38:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <Bateria_per>
		aux_eeprom[i - 9] = eeprom_read_byte(i);
		Temperatura_C = atoi(aux_eeprom); // convertendo de char para int
	}

	// loop responsavel por separar e ler os dados da bateria que serao armazenados na eeprom, nos espacos 13 ate 16
	for (int i = 13; i < 17; i++)
     d3c:	21 96       	adiw	r28, 0x01	; 1
     d3e:	c1 31       	cpi	r28, 0x11	; 17
     d40:	d1 05       	cpc	r29, r1
     d42:	54 f3       	brlt	.-44     	; 0xd18 <main+0xc6>
	}

	while (1)
	{
		// chamada da funcao responsavel por retornar a velocidade no display 7-Seg com flag_5ms
		anima_velocidade(Velocidade_carro_kmH, &flag_5ms);
     d44:	61 e8       	ldi	r22, 0x81	; 129
     d46:	71 e0       	ldi	r23, 0x01	; 1
     d48:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Velocidade_carro_kmH>
     d4c:	90 91 7e 01 	lds	r25, 0x017E	; 0x80017e <Velocidade_carro_kmH+0x1>
     d50:	0e 94 0b 04 	call	0x816	; 0x816 <anima_velocidade>
		
		// funcao responsavel por retornar variaveis para o display nokia com flag_500ms
		anima_LCD(Diametro_pneu_cm, RPM_motor, Distancia_hodometro_km, Distancia_objeto_cm, &flag_500ms);
     d54:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <Distancia_objeto_cm>
     d58:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <Distancia_objeto_cm+0x1>
     d5c:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <Distancia_hodometro_km>
     d60:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <Distancia_hodometro_km+0x1>
     d64:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <RPM_motor>
     d68:	70 91 7c 01 	lds	r23, 0x017C	; 0x80017c <RPM_motor+0x1>
     d6c:	00 e8       	ldi	r16, 0x80	; 128
     d6e:	11 e0       	ldi	r17, 0x01	; 1
     d70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d74:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d78:	0e 94 4f 05 	call	0xa9e	; 0xa9e <anima_LCD>
		
		itoa(Diametro_pneu_cm, aux_2_eeprom, 10);	// convertendo de int para char
     d7c:	4a e0       	ldi	r20, 0x0A	; 10
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	65 e3       	ldi	r22, 0x35	; 53
     d82:	71 e0       	ldi	r23, 0x01	; 1
     d84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d88:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d8c:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
		// loop responsavel por separar e inserir os dados do diametro na eeprom, nos espacos 0 ate 3
		for (int i = 0; i < 4; i++)
     d90:	c0 e0       	ldi	r28, 0x00	; 0
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     d94:	08 c0       	rjmp	.+16     	; 0xda6 <main+0x154>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
     d96:	fe 01       	movw	r30, r28
     d98:	eb 5c       	subi	r30, 0xCB	; 203
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	60 81       	ld	r22, Z
     d9e:	ce 01       	movw	r24, r28
     da0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <eeprom_write_byte>
		// funcao responsavel por retornar variaveis para o display nokia com flag_500ms
		anima_LCD(Diametro_pneu_cm, RPM_motor, Distancia_hodometro_km, Distancia_objeto_cm, &flag_500ms);
		
		itoa(Diametro_pneu_cm, aux_2_eeprom, 10);	// convertendo de int para char
		// loop responsavel por separar e inserir os dados do diametro na eeprom, nos espacos 0 ate 3
		for (int i = 0; i < 4; i++)
     da4:	21 96       	adiw	r28, 0x01	; 1
     da6:	c4 30       	cpi	r28, 0x04	; 4
     da8:	d1 05       	cpc	r29, r1
     daa:	ac f3       	brlt	.-22     	; 0xd96 <main+0x144>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
		}
		itoa(Distancia_hodometro_km, aux_2_eeprom, 10); // convertendo de int para char
     dac:	4a e0       	ldi	r20, 0x0A	; 10
     dae:	50 e0       	ldi	r21, 0x00	; 0
     db0:	65 e3       	ldi	r22, 0x35	; 53
     db2:	71 e0       	ldi	r23, 0x01	; 1
     db4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <Distancia_hodometro_km>
     db8:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <Distancia_hodometro_km+0x1>
     dbc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
		// loop responsavel por separar e inserir os dados da distancia na eeprom, nos espacos 4 ate 8
		for (int i = 4; i < 9; i++)
     dc0:	c4 e0       	ldi	r28, 0x04	; 4
     dc2:	d0 e0       	ldi	r29, 0x00	; 0
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <main+0x184>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 4]);
     dc6:	fe 01       	movw	r30, r28
     dc8:	ef 5c       	subi	r30, 0xCF	; 207
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	60 81       	ld	r22, Z
     dce:	ce 01       	movw	r24, r28
     dd0:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <eeprom_write_byte>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
		}
		itoa(Distancia_hodometro_km, aux_2_eeprom, 10); // convertendo de int para char
		// loop responsavel por separar e inserir os dados da distancia na eeprom, nos espacos 4 ate 8
		for (int i = 4; i < 9; i++)
     dd4:	21 96       	adiw	r28, 0x01	; 1
     dd6:	c9 30       	cpi	r28, 0x09	; 9
     dd8:	d1 05       	cpc	r29, r1
     dda:	ac f3       	brlt	.-22     	; 0xdc6 <main+0x174>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 4]);
		}
		
		// condicao responsavel por limitar a isercao dos dados da temperatura na eeprom quando forem maiores que o anterior
		if(Temperatura_C > temperatura_pass)
     ddc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Temperatura_C>
     de0:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Temperatura_C+0x1>
     de4:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <temperatura_pass>
     de8:	30 91 72 01 	lds	r19, 0x0172	; 0x800172 <temperatura_pass+0x1>
     dec:	28 17       	cp	r18, r24
     dee:	39 07       	cpc	r19, r25
     df0:	a0 f4       	brcc	.+40     	; 0xe1a <main+0x1c8>
		{
			itoa(Temperatura_C, aux_2_eeprom, 10); // convertendo de int para char
     df2:	4a e0       	ldi	r20, 0x0A	; 10
     df4:	50 e0       	ldi	r21, 0x00	; 0
     df6:	65 e3       	ldi	r22, 0x35	; 53
     df8:	71 e0       	ldi	r23, 0x01	; 1
     dfa:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
			// loop responsavel por separar e inserir os dados da temperatura na eeprom, nos espacos 9 ate 12
			for (int i = 9; i < 13; i++)
     dfe:	c9 e0       	ldi	r28, 0x09	; 9
     e00:	d0 e0       	ldi	r29, 0x00	; 0
     e02:	08 c0       	rjmp	.+16     	; 0xe14 <main+0x1c2>
			{
				eeprom_write_byte(i, aux_2_eeprom[i - 9]);
     e04:	fe 01       	movw	r30, r28
     e06:	e4 5d       	subi	r30, 0xD4	; 212
     e08:	fe 4f       	sbci	r31, 0xFE	; 254
     e0a:	60 81       	ld	r22, Z
     e0c:	ce 01       	movw	r24, r28
     e0e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <eeprom_write_byte>
		// condicao responsavel por limitar a isercao dos dados da temperatura na eeprom quando forem maiores que o anterior
		if(Temperatura_C > temperatura_pass)
		{
			itoa(Temperatura_C, aux_2_eeprom, 10); // convertendo de int para char
			// loop responsavel por separar e inserir os dados da temperatura na eeprom, nos espacos 9 ate 12
			for (int i = 9; i < 13; i++)
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	cd 30       	cpi	r28, 0x0D	; 13
     e16:	d1 05       	cpc	r29, r1
     e18:	ac f3       	brlt	.-22     	; 0xe04 <main+0x1b2>
			{
				eeprom_write_byte(i, aux_2_eeprom[i - 9]);
			}
		}
		temperatura_pass = (unsigned int)Temperatura_C;
     e1a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <Temperatura_C>
     e1e:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <Temperatura_C+0x1>
     e22:	90 93 72 01 	sts	0x0172, r25	; 0x800172 <temperatura_pass+0x1>
     e26:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <temperatura_pass>

		itoa(Bateria_per, aux_2_eeprom, 10); // convertendo de int para char
     e2a:	4a e0       	ldi	r20, 0x0A	; 10
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	65 e3       	ldi	r22, 0x35	; 53
     e30:	71 e0       	ldi	r23, 0x01	; 1
     e32:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <Bateria_per>
     e36:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <Bateria_per+0x1>
     e3a:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <itoa>
		// loop responsavel por separar e inserir os dados da bateria na eeprom, nos espacos 13 ate 16
		for (int i = 13; i < 17; i++)
     e3e:	cd e0       	ldi	r28, 0x0D	; 13
     e40:	d0 e0       	ldi	r29, 0x00	; 0
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <main+0x202>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 13]);
     e44:	fe 01       	movw	r30, r28
     e46:	e8 5d       	subi	r30, 0xD8	; 216
     e48:	fe 4f       	sbci	r31, 0xFE	; 254
     e4a:	60 81       	ld	r22, Z
     e4c:	ce 01       	movw	r24, r28
     e4e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <eeprom_write_byte>
		}
		temperatura_pass = (unsigned int)Temperatura_C;

		itoa(Bateria_per, aux_2_eeprom, 10); // convertendo de int para char
		// loop responsavel por separar e inserir os dados da bateria na eeprom, nos espacos 13 ate 16
		for (int i = 13; i < 17; i++)
     e52:	21 96       	adiw	r28, 0x01	; 1
     e54:	c1 31       	cpi	r28, 0x11	; 17
     e56:	d1 05       	cpc	r29, r1
     e58:	ac f3       	brlt	.-22     	; 0xe44 <main+0x1f2>
     e5a:	74 cf       	rjmp	.-280    	; 0xd44 <main+0xf2>

00000e5c <GLCD_BufferWrite>:
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
     e5c:	66 95       	lsr	r22
     e5e:	66 95       	lsr	r22
     e60:	66 95       	lsr	r22
     e62:	e8 2f       	mov	r30, r24
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	68 9f       	mul	r22, r24
     e6a:	e0 0d       	add	r30, r0
     e6c:	f1 1d       	adc	r31, r1
     e6e:	11 24       	eor	r1, r1
     e70:	e5 57       	subi	r30, 0x75	; 117
     e72:	fe 4f       	sbci	r31, 0xFE	; 254
     e74:	40 83       	st	Z, r20
     e76:	08 95       	ret

00000e78 <GLCD_BufferRead>:
     e78:	66 95       	lsr	r22
     e7a:	66 95       	lsr	r22
     e7c:	66 95       	lsr	r22
     e7e:	e8 2f       	mov	r30, r24
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	68 9f       	mul	r22, r24
     e86:	e0 0d       	add	r30, r0
     e88:	f1 1d       	adc	r31, r1
     e8a:	11 24       	eor	r1, r1
     e8c:	e5 57       	subi	r30, 0x75	; 117
     e8e:	fe 4f       	sbci	r31, 0xFE	; 254
     e90:	80 81       	ld	r24, Z
     e92:	08 95       	ret

00000e94 <Int2bcd>:
     e94:	cf 93       	push	r28
     e96:	df 93       	push	r29
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	fa 01       	movw	r30, r20
     e9e:	20 e3       	ldi	r18, 0x30	; 48
     ea0:	22 87       	std	Z+10, r18	; 0x0a
     ea2:	21 87       	std	Z+9, r18	; 0x09
     ea4:	20 87       	std	Z+8, r18	; 0x08
     ea6:	27 83       	std	Z+7, r18	; 0x07
     ea8:	26 83       	std	Z+6, r18	; 0x06
     eaa:	25 83       	std	Z+5, r18	; 0x05
     eac:	24 83       	std	Z+4, r18	; 0x04
     eae:	23 83       	std	Z+3, r18	; 0x03
     eb0:	22 83       	std	Z+2, r18	; 0x02
     eb2:	21 83       	std	Z+1, r18	; 0x01
     eb4:	20 83       	st	Z, r18
     eb6:	bb 23       	and	r27, r27
     eb8:	4c f4       	brge	.+18     	; 0xecc <Int2bcd+0x38>
     eba:	b0 95       	com	r27
     ebc:	a0 95       	com	r26
     ebe:	90 95       	com	r25
     ec0:	81 95       	neg	r24
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	af 4f       	sbci	r26, 0xFF	; 255
     ec6:	bf 4f       	sbci	r27, 0xFF	; 255
     ec8:	31 e0       	ldi	r19, 0x01	; 1
     eca:	08 c0       	rjmp	.+16     	; 0xedc <Int2bcd+0x48>
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	06 c0       	rjmp	.+12     	; 0xedc <Int2bcd+0x48>
     ed0:	9a 5c       	subi	r25, 0xCA	; 202
     ed2:	aa 49       	sbci	r26, 0x9A	; 154
     ed4:	bb 43       	sbci	r27, 0x3B	; 59
     ed6:	21 81       	ldd	r18, Z+1	; 0x01
     ed8:	2f 5f       	subi	r18, 0xFF	; 255
     eda:	21 83       	std	Z+1, r18	; 0x01
     edc:	81 15       	cp	r24, r1
     ede:	2a ec       	ldi	r18, 0xCA	; 202
     ee0:	92 07       	cpc	r25, r18
     ee2:	2a e9       	ldi	r18, 0x9A	; 154
     ee4:	a2 07       	cpc	r26, r18
     ee6:	2b e3       	ldi	r18, 0x3B	; 59
     ee8:	b2 07       	cpc	r27, r18
     eea:	94 f7       	brge	.-28     	; 0xed0 <Int2bcd+0x3c>
     eec:	06 c0       	rjmp	.+12     	; 0xefa <Int2bcd+0x66>
     eee:	91 5e       	subi	r25, 0xE1	; 225
     ef0:	a5 4f       	sbci	r26, 0xF5	; 245
     ef2:	b5 40       	sbci	r27, 0x05	; 5
     ef4:	22 81       	ldd	r18, Z+2	; 0x02
     ef6:	2f 5f       	subi	r18, 0xFF	; 255
     ef8:	22 83       	std	Z+2, r18	; 0x02
     efa:	81 15       	cp	r24, r1
     efc:	21 ee       	ldi	r18, 0xE1	; 225
     efe:	92 07       	cpc	r25, r18
     f00:	25 ef       	ldi	r18, 0xF5	; 245
     f02:	a2 07       	cpc	r26, r18
     f04:	25 e0       	ldi	r18, 0x05	; 5
     f06:	b2 07       	cpc	r27, r18
     f08:	94 f7       	brge	.-28     	; 0xeee <Int2bcd+0x5a>
     f0a:	07 c0       	rjmp	.+14     	; 0xf1a <Int2bcd+0x86>
     f0c:	80 58       	subi	r24, 0x80	; 128
     f0e:	96 49       	sbci	r25, 0x96	; 150
     f10:	a8 49       	sbci	r26, 0x98	; 152
     f12:	b1 09       	sbc	r27, r1
     f14:	23 81       	ldd	r18, Z+3	; 0x03
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	23 83       	std	Z+3, r18	; 0x03
     f1a:	80 38       	cpi	r24, 0x80	; 128
     f1c:	26 e9       	ldi	r18, 0x96	; 150
     f1e:	92 07       	cpc	r25, r18
     f20:	28 e9       	ldi	r18, 0x98	; 152
     f22:	a2 07       	cpc	r26, r18
     f24:	b1 05       	cpc	r27, r1
     f26:	94 f7       	brge	.-28     	; 0xf0c <Int2bcd+0x78>
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <Int2bcd+0xa4>
     f2a:	80 54       	subi	r24, 0x40	; 64
     f2c:	92 44       	sbci	r25, 0x42	; 66
     f2e:	af 40       	sbci	r26, 0x0F	; 15
     f30:	b1 09       	sbc	r27, r1
     f32:	24 81       	ldd	r18, Z+4	; 0x04
     f34:	2f 5f       	subi	r18, 0xFF	; 255
     f36:	24 83       	std	Z+4, r18	; 0x04
     f38:	80 34       	cpi	r24, 0x40	; 64
     f3a:	22 e4       	ldi	r18, 0x42	; 66
     f3c:	92 07       	cpc	r25, r18
     f3e:	2f e0       	ldi	r18, 0x0F	; 15
     f40:	a2 07       	cpc	r26, r18
     f42:	b1 05       	cpc	r27, r1
     f44:	94 f7       	brge	.-28     	; 0xf2a <Int2bcd+0x96>
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <Int2bcd+0xc2>
     f48:	80 5a       	subi	r24, 0xA0	; 160
     f4a:	96 48       	sbci	r25, 0x86	; 134
     f4c:	a1 40       	sbci	r26, 0x01	; 1
     f4e:	b1 09       	sbc	r27, r1
     f50:	25 81       	ldd	r18, Z+5	; 0x05
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	25 83       	std	Z+5, r18	; 0x05
     f56:	80 3a       	cpi	r24, 0xA0	; 160
     f58:	26 e8       	ldi	r18, 0x86	; 134
     f5a:	92 07       	cpc	r25, r18
     f5c:	21 e0       	ldi	r18, 0x01	; 1
     f5e:	a2 07       	cpc	r26, r18
     f60:	b1 05       	cpc	r27, r1
     f62:	94 f7       	brge	.-28     	; 0xf48 <Int2bcd+0xb4>
     f64:	07 c0       	rjmp	.+14     	; 0xf74 <Int2bcd+0xe0>
     f66:	80 51       	subi	r24, 0x10	; 16
     f68:	97 42       	sbci	r25, 0x27	; 39
     f6a:	a1 09       	sbc	r26, r1
     f6c:	b1 09       	sbc	r27, r1
     f6e:	26 81       	ldd	r18, Z+6	; 0x06
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	26 83       	std	Z+6, r18	; 0x06
     f74:	80 31       	cpi	r24, 0x10	; 16
     f76:	27 e2       	ldi	r18, 0x27	; 39
     f78:	92 07       	cpc	r25, r18
     f7a:	a1 05       	cpc	r26, r1
     f7c:	b1 05       	cpc	r27, r1
     f7e:	9c f7       	brge	.-26     	; 0xf66 <Int2bcd+0xd2>
     f80:	07 c0       	rjmp	.+14     	; 0xf90 <Int2bcd+0xfc>
     f82:	88 5e       	subi	r24, 0xE8	; 232
     f84:	93 40       	sbci	r25, 0x03	; 3
     f86:	a1 09       	sbc	r26, r1
     f88:	b1 09       	sbc	r27, r1
     f8a:	27 81       	ldd	r18, Z+7	; 0x07
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	27 83       	std	Z+7, r18	; 0x07
     f90:	88 3e       	cpi	r24, 0xE8	; 232
     f92:	23 e0       	ldi	r18, 0x03	; 3
     f94:	92 07       	cpc	r25, r18
     f96:	a1 05       	cpc	r26, r1
     f98:	b1 05       	cpc	r27, r1
     f9a:	9c f7       	brge	.-26     	; 0xf82 <Int2bcd+0xee>
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <Int2bcd+0x118>
     f9e:	84 56       	subi	r24, 0x64	; 100
     fa0:	91 09       	sbc	r25, r1
     fa2:	a1 09       	sbc	r26, r1
     fa4:	b1 09       	sbc	r27, r1
     fa6:	20 85       	ldd	r18, Z+8	; 0x08
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	20 87       	std	Z+8, r18	; 0x08
     fac:	84 36       	cpi	r24, 0x64	; 100
     fae:	91 05       	cpc	r25, r1
     fb0:	a1 05       	cpc	r26, r1
     fb2:	b1 05       	cpc	r27, r1
     fb4:	a4 f7       	brge	.-24     	; 0xf9e <Int2bcd+0x10a>
     fb6:	06 c0       	rjmp	.+12     	; 0xfc4 <Int2bcd+0x130>
     fb8:	0a 97       	sbiw	r24, 0x0a	; 10
     fba:	a1 09       	sbc	r26, r1
     fbc:	b1 09       	sbc	r27, r1
     fbe:	21 85       	ldd	r18, Z+9	; 0x09
     fc0:	2f 5f       	subi	r18, 0xFF	; 255
     fc2:	21 87       	std	Z+9, r18	; 0x09
     fc4:	8a 30       	cpi	r24, 0x0A	; 10
     fc6:	91 05       	cpc	r25, r1
     fc8:	a1 05       	cpc	r26, r1
     fca:	b1 05       	cpc	r27, r1
     fcc:	ac f7       	brge	.-22     	; 0xfb8 <Int2bcd+0x124>
     fce:	06 c0       	rjmp	.+12     	; 0xfdc <Int2bcd+0x148>
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	a1 09       	sbc	r26, r1
     fd4:	b1 09       	sbc	r27, r1
     fd6:	22 85       	ldd	r18, Z+10	; 0x0a
     fd8:	2f 5f       	subi	r18, 0xFF	; 255
     fda:	22 87       	std	Z+10, r18	; 0x0a
     fdc:	18 16       	cp	r1, r24
     fde:	19 06       	cpc	r1, r25
     fe0:	1a 06       	cpc	r1, r26
     fe2:	1b 06       	cpc	r1, r27
     fe4:	ac f3       	brlt	.-22     	; 0xfd0 <Int2bcd+0x13c>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <Int2bcd+0x158>
     fea:	2f 5f       	subi	r18, 0xFF	; 255
     fec:	df 01       	movw	r26, r30
     fee:	a2 0f       	add	r26, r18
     ff0:	b1 1d       	adc	r27, r1
     ff2:	8c 91       	ld	r24, X
     ff4:	80 33       	cpi	r24, 0x30	; 48
     ff6:	c9 f3       	breq	.-14     	; 0xfea <Int2bcd+0x156>
     ff8:	33 23       	and	r19, r19
     ffa:	31 f0       	breq	.+12     	; 0x1008 <Int2bcd+0x174>
     ffc:	21 50       	subi	r18, 0x01	; 1
     ffe:	df 01       	movw	r26, r30
    1000:	a2 0f       	add	r26, r18
    1002:	b1 1d       	adc	r27, r1
    1004:	8d e2       	ldi	r24, 0x2D	; 45
    1006:	8c 93       	st	X, r24
    1008:	4a e0       	ldi	r20, 0x0A	; 10
    100a:	42 1b       	sub	r20, r18
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	0d c0       	rjmp	.+26     	; 0x102a <Int2bcd+0x196>
    1010:	83 2f       	mov	r24, r19
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	ef 01       	movw	r28, r30
    1016:	c8 0f       	add	r28, r24
    1018:	d9 1f       	adc	r29, r25
    101a:	82 0f       	add	r24, r18
    101c:	91 1d       	adc	r25, r1
    101e:	df 01       	movw	r26, r30
    1020:	a8 0f       	add	r26, r24
    1022:	b9 1f       	adc	r27, r25
    1024:	8c 91       	ld	r24, X
    1026:	88 83       	st	Y, r24
    1028:	3f 5f       	subi	r19, 0xFF	; 255
    102a:	43 17       	cp	r20, r19
    102c:	88 f7       	brcc	.-30     	; 0x1010 <Int2bcd+0x17c>
    102e:	e3 0f       	add	r30, r19
    1030:	f1 1d       	adc	r31, r1
    1032:	10 82       	st	Z, r1
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	08 95       	ret

0000103a <GLCD_Send>:
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	c8 2f       	mov	r28, r24
    1044:	8b 01       	movw	r16, r22
    1046:	d4 2f       	mov	r29, r20
    1048:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <TWI_BeginTransmission>
    104c:	88 e7       	ldi	r24, 0x78	; 120
    104e:	0e 94 0e 0c 	call	0x181c	; 0x181c <TWI_Transmit>
    1052:	8c 2f       	mov	r24, r28
    1054:	0e 94 0e 0c 	call	0x181c	; 0x181c <TWI_Transmit>
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	07 c0       	rjmp	.+14     	; 0x106a <GLCD_Send+0x30>
    105c:	f8 01       	movw	r30, r16
    105e:	ec 0f       	add	r30, r28
    1060:	f1 1d       	adc	r31, r1
    1062:	80 81       	ld	r24, Z
    1064:	0e 94 0e 0c 	call	0x181c	; 0x181c <TWI_Transmit>
    1068:	cf 5f       	subi	r28, 0xFF	; 255
    106a:	cd 17       	cp	r28, r29
    106c:	b8 f3       	brcs	.-18     	; 0x105c <GLCD_Send+0x22>
    106e:	0e 94 06 0c 	call	0x180c	; 0x180c <TWI_EndTransmission>
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <GLCD_SendCommand>:
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	1f 92       	push	r1
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	41 e0       	ldi	r20, 0x01	; 1
    108a:	be 01       	movw	r22, r28
    108c:	6f 5f       	subi	r22, 0xFF	; 255
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	0e 94 1d 08 	call	0x103a	; 0x103a <GLCD_Send>
    1096:	0f 90       	pop	r0
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	08 95       	ret

0000109e <GLCD_Render>:
    109e:	cf 93       	push	r28
    10a0:	81 e2       	ldi	r24, 0x21	; 33
    10a2:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    10ac:	8f e7       	ldi	r24, 0x7F	; 127
    10ae:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    10b2:	82 e2       	ldi	r24, 0x22	; 34
    10b4:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    10be:	87 e0       	ldi	r24, 0x07	; 7
    10c0:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    10c4:	c0 e0       	ldi	r28, 0x00	; 0
    10c6:	0b c0       	rjmp	.+22     	; 0x10de <GLCD_Render+0x40>
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	c8 9f       	mul	r28, r24
    10cc:	b0 01       	movw	r22, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	65 57       	subi	r22, 0x75	; 117
    10d2:	7e 4f       	sbci	r23, 0xFE	; 254
    10d4:	40 e1       	ldi	r20, 0x10	; 16
    10d6:	80 e4       	ldi	r24, 0x40	; 64
    10d8:	0e 94 1d 08 	call	0x103a	; 0x103a <GLCD_Send>
    10dc:	cf 5f       	subi	r28, 0xFF	; 255
    10de:	c0 34       	cpi	r28, 0x40	; 64
    10e0:	98 f3       	brcs	.-26     	; 0x10c8 <GLCD_Render+0x2a>
    10e2:	cf 91       	pop	r28
    10e4:	08 95       	ret

000010e6 <GLCD_GotoX>:
    10e6:	88 23       	and	r24, r24
    10e8:	14 f0       	brlt	.+4      	; 0x10ee <GLCD_GotoX+0x8>
    10ea:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__GLCD>
    10ee:	08 95       	ret

000010f0 <GLCD_GotoY>:
    10f0:	80 34       	cpi	r24, 0x40	; 64
    10f2:	10 f4       	brcc	.+4      	; 0x10f8 <GLCD_GotoY+0x8>
    10f4:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <__GLCD+0x1>
    10f8:	08 95       	ret

000010fa <GLCD_GotoXY>:
    10fa:	cf 93       	push	r28
    10fc:	c6 2f       	mov	r28, r22
    10fe:	0e 94 73 08 	call	0x10e6	; 0x10e6 <GLCD_GotoX>
    1102:	8c 2f       	mov	r24, r28
    1104:	0e 94 78 08 	call	0x10f0	; 0x10f0 <GLCD_GotoY>
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <GLCD_Setup>:
    110c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <TWI_Setup>
    1110:	8e ea       	ldi	r24, 0xAE	; 174
    1112:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1116:	85 ed       	ldi	r24, 0xD5	; 213
    1118:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    111c:	80 ef       	ldi	r24, 0xF0	; 240
    111e:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1122:	88 ea       	ldi	r24, 0xA8	; 168
    1124:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1128:	8f e3       	ldi	r24, 0x3F	; 63
    112a:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    112e:	83 ed       	ldi	r24, 0xD3	; 211
    1130:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    113a:	8d e8       	ldi	r24, 0x8D	; 141
    113c:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1140:	84 e1       	ldi	r24, 0x14	; 20
    1142:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1146:	80 e4       	ldi	r24, 0x40	; 64
    1148:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    114c:	80 e2       	ldi	r24, 0x20	; 32
    114e:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1158:	81 ea       	ldi	r24, 0xA1	; 161
    115a:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    115e:	88 ec       	ldi	r24, 0xC8	; 200
    1160:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1164:	8a ed       	ldi	r24, 0xDA	; 218
    1166:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    116a:	82 e1       	ldi	r24, 0x12	; 18
    116c:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1170:	81 e8       	ldi	r24, 0x81	; 129
    1172:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    117c:	89 ed       	ldi	r24, 0xD9	; 217
    117e:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1182:	81 ef       	ldi	r24, 0xF1	; 241
    1184:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1188:	8b ed       	ldi	r24, 0xDB	; 219
    118a:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    118e:	80 e2       	ldi	r24, 0x20	; 32
    1190:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    1194:	84 ea       	ldi	r24, 0xA4	; 164
    1196:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    119a:	86 ea       	ldi	r24, 0xA6	; 166
    119c:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    11a0:	8e e2       	ldi	r24, 0x2E	; 46
    11a2:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    11a6:	8f ea       	ldi	r24, 0xAF	; 175
    11a8:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    11b4:	e2 e8       	ldi	r30, 0x82	; 130
    11b6:	f1 e0       	ldi	r31, 0x01	; 1
    11b8:	86 ea       	ldi	r24, 0xA6	; 166
    11ba:	82 83       	std	Z+2, r24	; 0x02
    11bc:	17 82       	std	Z+7, r1	; 0x07
    11be:	16 82       	std	Z+6, r1	; 0x06
    11c0:	15 82       	std	Z+5, r1	; 0x05
    11c2:	11 82       	std	Z+1, r1	; 0x01
    11c4:	10 82       	st	Z, r1
    11c6:	08 95       	ret

000011c8 <GLCD_SetPixel>:
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	c6 2f       	mov	r28, r22
    11d4:	14 2f       	mov	r17, r20
    11d6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    11da:	e2 e8       	ldi	r30, 0x82	; 130
    11dc:	f1 e0       	ldi	r31, 0x01	; 1
    11de:	f1 80       	ldd	r15, Z+1	; 0x01
    11e0:	d0 81       	ld	r29, Z
    11e2:	6f 2d       	mov	r22, r15
    11e4:	8d 2f       	mov	r24, r29
    11e6:	0e 94 3c 07 	call	0xe78	; 0xe78 <GLCD_BufferRead>
    11ea:	1f 3f       	cpi	r17, 0xFF	; 255
    11ec:	79 f4       	brne	.+30     	; 0x120c <GLCD_SetPixel+0x44>
    11ee:	c7 70       	andi	r28, 0x07	; 7
    11f0:	01 e0       	ldi	r16, 0x01	; 1
    11f2:	10 e0       	ldi	r17, 0x00	; 0
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <GLCD_SetPixel+0x3a>
    11fa:	00 0f       	add	r16, r16
    11fc:	11 1f       	adc	r17, r17
    11fe:	22 1f       	adc	r18, r18
    1200:	33 1f       	adc	r19, r19
    1202:	ca 95       	dec	r28
    1204:	d2 f7       	brpl	.-12     	; 0x11fa <GLCD_SetPixel+0x32>
    1206:	48 2f       	mov	r20, r24
    1208:	40 2b       	or	r20, r16
    120a:	0f c0       	rjmp	.+30     	; 0x122a <GLCD_SetPixel+0x62>
    120c:	c7 70       	andi	r28, 0x07	; 7
    120e:	01 e0       	ldi	r16, 0x01	; 1
    1210:	10 e0       	ldi	r17, 0x00	; 0
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <GLCD_SetPixel+0x58>
    1218:	00 0f       	add	r16, r16
    121a:	11 1f       	adc	r17, r17
    121c:	22 1f       	adc	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	ca 95       	dec	r28
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <GLCD_SetPixel+0x50>
    1224:	00 95       	com	r16
    1226:	40 2f       	mov	r20, r16
    1228:	48 23       	and	r20, r24
    122a:	6f 2d       	mov	r22, r15
    122c:	8d 2f       	mov	r24, r29
    122e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    1232:	df 91       	pop	r29
    1234:	cf 91       	pop	r28
    1236:	1f 91       	pop	r17
    1238:	0f 91       	pop	r16
    123a:	ff 90       	pop	r15
    123c:	08 95       	ret

0000123e <GLCD_SetPixels>:
    123e:	6f 92       	push	r6
    1240:	7f 92       	push	r7
    1242:	8f 92       	push	r8
    1244:	9f 92       	push	r9
    1246:	af 92       	push	r10
    1248:	bf 92       	push	r11
    124a:	cf 92       	push	r12
    124c:	df 92       	push	r13
    124e:	ef 92       	push	r14
    1250:	ff 92       	push	r15
    1252:	0f 93       	push	r16
    1254:	1f 93       	push	r17
    1256:	cf 93       	push	r28
    1258:	df 93       	push	r29
    125a:	88 23       	and	r24, r24
    125c:	0c f4       	brge	.+2      	; 0x1260 <GLCD_SetPixels+0x22>
    125e:	a7 c0       	rjmp	.+334    	; 0x13ae <GLCD_SetPixels+0x170>
    1260:	44 23       	and	r20, r20
    1262:	0c f4       	brge	.+2      	; 0x1266 <GLCD_SetPixels+0x28>
    1264:	a4 c0       	rjmp	.+328    	; 0x13ae <GLCD_SetPixels+0x170>
    1266:	60 34       	cpi	r22, 0x40	; 64
    1268:	08 f0       	brcs	.+2      	; 0x126c <GLCD_SetPixels+0x2e>
    126a:	a1 c0       	rjmp	.+322    	; 0x13ae <GLCD_SetPixels+0x170>
    126c:	20 34       	cpi	r18, 0x40	; 64
    126e:	08 f0       	brcs	.+2      	; 0x1272 <GLCD_SetPixels+0x34>
    1270:	9e c0       	rjmp	.+316    	; 0x13ae <GLCD_SetPixels+0x170>
    1272:	26 1b       	sub	r18, r22
    1274:	99 24       	eor	r9, r9
    1276:	93 94       	inc	r9
    1278:	92 0e       	add	r9, r18
    127a:	48 1b       	sub	r20, r24
    127c:	d1 e0       	ldi	r29, 0x01	; 1
    127e:	d4 0f       	add	r29, r20
    1280:	96 2f       	mov	r25, r22
    1282:	97 70       	andi	r25, 0x07	; 7
    1284:	16 2f       	mov	r17, r22
    1286:	19 1b       	sub	r17, r25
    1288:	e9 2c       	mov	r14, r9
    128a:	f1 2c       	mov	r15, r1
    128c:	28 e0       	ldi	r18, 0x08	; 8
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	29 1b       	sub	r18, r25
    1292:	31 09       	sbc	r19, r1
    1294:	e2 16       	cp	r14, r18
    1296:	f3 06       	cpc	r15, r19
    1298:	7c f4       	brge	.+30     	; 0x12b8 <GLCD_SetPixels+0x7a>
    129a:	28 e0       	ldi	r18, 0x08	; 8
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	2e 19       	sub	r18, r14
    12a0:	3f 09       	sbc	r19, r15
    12a2:	4f ef       	ldi	r20, 0xFF	; 255
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	6a 01       	movw	r12, r20
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <GLCD_SetPixels+0x70>
    12aa:	d5 94       	asr	r13
    12ac:	c7 94       	ror	r12
    12ae:	2a 95       	dec	r18
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <GLCD_SetPixels+0x6c>
    12b2:	2c 2d       	mov	r18, r12
    12b4:	b9 2c       	mov	r11, r9
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <GLCD_SetPixels+0x82>
    12b8:	28 e0       	ldi	r18, 0x08	; 8
    12ba:	b2 2e       	mov	r11, r18
    12bc:	b9 1a       	sub	r11, r25
    12be:	2f ef       	ldi	r18, 0xFF	; 255
    12c0:	a8 2e       	mov	r10, r24
    12c2:	c2 2e       	mov	r12, r18
    12c4:	d1 2c       	mov	r13, r1
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GLCD_SetPixels+0x8e>
    12c8:	cc 0c       	add	r12, r12
    12ca:	dd 1c       	adc	r13, r13
    12cc:	9a 95       	dec	r25
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GLCD_SetPixels+0x8a>
    12d0:	6c 2c       	mov	r6, r12
    12d2:	61 2f       	mov	r22, r17
    12d4:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    12d8:	81 2c       	mov	r8, r1
    12da:	19 c0       	rjmp	.+50     	; 0x130e <GLCD_SetPixels+0xd0>
    12dc:	e2 e8       	ldi	r30, 0x82	; 130
    12de:	f1 e0       	ldi	r31, 0x01	; 1
    12e0:	71 80       	ldd	r7, Z+1	; 0x01
    12e2:	c0 81       	ld	r28, Z
    12e4:	67 2d       	mov	r22, r7
    12e6:	8c 2f       	mov	r24, r28
    12e8:	0e 94 3c 07 	call	0xe78	; 0xe78 <GLCD_BufferRead>
    12ec:	0f 3f       	cpi	r16, 0xFF	; 255
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <GLCD_SetPixels+0xb8>
    12f0:	46 2d       	mov	r20, r6
    12f2:	48 2b       	or	r20, r24
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <GLCD_SetPixels+0xbe>
    12f6:	4c 2d       	mov	r20, r12
    12f8:	40 95       	com	r20
    12fa:	48 23       	and	r20, r24
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	8c 0f       	add	r24, r28
    1300:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__GLCD>
    1304:	67 2d       	mov	r22, r7
    1306:	8c 2f       	mov	r24, r28
    1308:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    130c:	83 94       	inc	r8
    130e:	8d 16       	cp	r8, r29
    1310:	28 f3       	brcs	.-54     	; 0x12dc <GLCD_SetPixels+0x9e>
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <GLCD_SetPixels+0x102>
    1314:	88 e0       	ldi	r24, 0x08	; 8
    1316:	b8 0e       	add	r11, r24
    1318:	18 5f       	subi	r17, 0xF8	; 248
    131a:	61 2f       	mov	r22, r17
    131c:	8a 2d       	mov	r24, r10
    131e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    1322:	c0 e0       	ldi	r28, 0x00	; 0
    1324:	0b c0       	rjmp	.+22     	; 0x133c <GLCD_SetPixels+0xfe>
    1326:	e2 e8       	ldi	r30, 0x82	; 130
    1328:	f1 e0       	ldi	r31, 0x01	; 1
    132a:	61 81       	ldd	r22, Z+1	; 0x01
    132c:	80 81       	ld	r24, Z
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	98 0f       	add	r25, r24
    1332:	90 83       	st	Z, r25
    1334:	40 2f       	mov	r20, r16
    1336:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    133a:	cf 5f       	subi	r28, 0xFF	; 255
    133c:	cd 17       	cp	r28, r29
    133e:	98 f3       	brcs	.-26     	; 0x1326 <GLCD_SetPixels+0xe8>
    1340:	8b 2d       	mov	r24, r11
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	9c 01       	movw	r18, r24
    1346:	28 5f       	subi	r18, 0xF8	; 248
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	e2 16       	cp	r14, r18
    134c:	f3 06       	cpc	r15, r19
    134e:	14 f7       	brge	.-60     	; 0x1314 <GLCD_SetPixels+0xd6>
    1350:	b9 14       	cp	r11, r9
    1352:	68 f5       	brcc	.+90     	; 0x13ae <GLCD_SetPixels+0x170>
    1354:	e8 1a       	sub	r14, r24
    1356:	f9 0a       	sbc	r15, r25
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <GLCD_SetPixels+0x124>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	ea 94       	dec	r14
    1364:	e2 f7       	brpl	.-8      	; 0x135e <GLCD_SetPixels+0x120>
    1366:	e8 2e       	mov	r14, r24
    1368:	e0 94       	com	r14
    136a:	68 e0       	ldi	r22, 0x08	; 8
    136c:	61 0f       	add	r22, r17
    136e:	8a 2d       	mov	r24, r10
    1370:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    1374:	10 e0       	ldi	r17, 0x00	; 0
    1376:	19 c0       	rjmp	.+50     	; 0x13aa <GLCD_SetPixels+0x16c>
    1378:	e2 e8       	ldi	r30, 0x82	; 130
    137a:	f1 e0       	ldi	r31, 0x01	; 1
    137c:	f1 80       	ldd	r15, Z+1	; 0x01
    137e:	c0 81       	ld	r28, Z
    1380:	6f 2d       	mov	r22, r15
    1382:	8c 2f       	mov	r24, r28
    1384:	0e 94 3c 07 	call	0xe78	; 0xe78 <GLCD_BufferRead>
    1388:	0f 3f       	cpi	r16, 0xFF	; 255
    138a:	19 f4       	brne	.+6      	; 0x1392 <GLCD_SetPixels+0x154>
    138c:	4e 2d       	mov	r20, r14
    138e:	48 2b       	or	r20, r24
    1390:	03 c0       	rjmp	.+6      	; 0x1398 <GLCD_SetPixels+0x15a>
    1392:	4e 2d       	mov	r20, r14
    1394:	40 95       	com	r20
    1396:	48 23       	and	r20, r24
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	8c 0f       	add	r24, r28
    139c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__GLCD>
    13a0:	6f 2d       	mov	r22, r15
    13a2:	8c 2f       	mov	r24, r28
    13a4:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    13a8:	1f 5f       	subi	r17, 0xFF	; 255
    13aa:	1d 17       	cp	r17, r29
    13ac:	28 f3       	brcs	.-54     	; 0x1378 <GLCD_SetPixels+0x13a>
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	ef 90       	pop	r14
    13ba:	df 90       	pop	r13
    13bc:	cf 90       	pop	r12
    13be:	bf 90       	pop	r11
    13c0:	af 90       	pop	r10
    13c2:	9f 90       	pop	r9
    13c4:	8f 90       	pop	r8
    13c6:	7f 90       	pop	r7
    13c8:	6f 90       	pop	r6
    13ca:	08 95       	ret

000013cc <GLCD_DrawRectangle>:
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	88 23       	and	r24, r24
    13dc:	0c f4       	brge	.+2      	; 0x13e0 <GLCD_DrawRectangle+0x14>
    13de:	45 c0       	rjmp	.+138    	; 0x146a <GLCD_DrawRectangle+0x9e>
    13e0:	44 23       	and	r20, r20
    13e2:	0c f4       	brge	.+2      	; 0x13e6 <GLCD_DrawRectangle+0x1a>
    13e4:	42 c0       	rjmp	.+132    	; 0x146a <GLCD_DrawRectangle+0x9e>
    13e6:	60 34       	cpi	r22, 0x40	; 64
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <GLCD_DrawRectangle+0x20>
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <GLCD_DrawRectangle+0x9e>
    13ec:	20 34       	cpi	r18, 0x40	; 64
    13ee:	e8 f5       	brcc	.+122    	; 0x146a <GLCD_DrawRectangle+0x9e>
    13f0:	d0 2f       	mov	r29, r16
    13f2:	12 2f       	mov	r17, r18
    13f4:	d4 2e       	mov	r13, r20
    13f6:	f6 2e       	mov	r15, r22
    13f8:	e8 2e       	mov	r14, r24
    13fa:	48 17       	cp	r20, r24
    13fc:	18 f0       	brcs	.+6      	; 0x1404 <GLCD_DrawRectangle+0x38>
    13fe:	04 2f       	mov	r16, r20
    1400:	c8 2f       	mov	r28, r24
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <GLCD_DrawRectangle+0x4a>
    1404:	08 2f       	mov	r16, r24
    1406:	c4 2f       	mov	r28, r20
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <GLCD_DrawRectangle+0x4a>
    140a:	4d 2f       	mov	r20, r29
    140c:	6f 2d       	mov	r22, r15
    140e:	8c 2f       	mov	r24, r28
    1410:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_SetPixel>
    1414:	cf 5f       	subi	r28, 0xFF	; 255
    1416:	0c 17       	cp	r16, r28
    1418:	c0 f7       	brcc	.-16     	; 0x140a <GLCD_DrawRectangle+0x3e>
    141a:	de 14       	cp	r13, r14
    141c:	18 f0       	brcs	.+6      	; 0x1424 <GLCD_DrawRectangle+0x58>
    141e:	0d 2d       	mov	r16, r13
    1420:	ce 2d       	mov	r28, r14
    1422:	09 c0       	rjmp	.+18     	; 0x1436 <GLCD_DrawRectangle+0x6a>
    1424:	0e 2d       	mov	r16, r14
    1426:	cd 2d       	mov	r28, r13
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <GLCD_DrawRectangle+0x6a>
    142a:	4d 2f       	mov	r20, r29
    142c:	61 2f       	mov	r22, r17
    142e:	8c 2f       	mov	r24, r28
    1430:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <GLCD_SetPixel>
    1434:	cf 5f       	subi	r28, 0xFF	; 255
    1436:	0c 17       	cp	r16, r28
    1438:	c0 f7       	brcc	.-16     	; 0x142a <GLCD_DrawRectangle+0x5e>
    143a:	1f 15       	cp	r17, r15
    143c:	18 f0       	brcs	.+6      	; 0x1444 <GLCD_DrawRectangle+0x78>
    143e:	21 2f       	mov	r18, r17
    1440:	6f 2d       	mov	r22, r15
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GLCD_DrawRectangle+0x7c>
    1444:	2f 2d       	mov	r18, r15
    1446:	61 2f       	mov	r22, r17
    1448:	0d 2f       	mov	r16, r29
    144a:	4e 2d       	mov	r20, r14
    144c:	8e 2d       	mov	r24, r14
    144e:	0e 94 1f 09 	call	0x123e	; 0x123e <GLCD_SetPixels>
    1452:	1f 15       	cp	r17, r15
    1454:	18 f0       	brcs	.+6      	; 0x145c <GLCD_DrawRectangle+0x90>
    1456:	21 2f       	mov	r18, r17
    1458:	6f 2d       	mov	r22, r15
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <GLCD_DrawRectangle+0x94>
    145c:	2f 2d       	mov	r18, r15
    145e:	61 2f       	mov	r22, r17
    1460:	0d 2f       	mov	r16, r29
    1462:	4d 2d       	mov	r20, r13
    1464:	8d 2d       	mov	r24, r13
    1466:	0e 94 1f 09 	call	0x123e	; 0x123e <GLCD_SetPixels>
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	08 95       	ret

0000147a <GLCD_FillScreen>:
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	18 2f       	mov	r17, r24
    1482:	d0 e0       	ldi	r29, 0x00	; 0
    1484:	0b c0       	rjmp	.+22     	; 0x149c <GLCD_FillScreen+0x22>
    1486:	41 2f       	mov	r20, r17
    1488:	6d 2f       	mov	r22, r29
    148a:	8c 2f       	mov	r24, r28
    148c:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    1490:	cf 5f       	subi	r28, 0xFF	; 255
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <GLCD_FillScreen+0x1c>
    1494:	c0 e0       	ldi	r28, 0x00	; 0
    1496:	cc 23       	and	r28, r28
    1498:	b4 f7       	brge	.-20     	; 0x1486 <GLCD_FillScreen+0xc>
    149a:	d8 5f       	subi	r29, 0xF8	; 248
    149c:	d0 34       	cpi	r29, 0x40	; 64
    149e:	d0 f3       	brcs	.-12     	; 0x1494 <GLCD_FillScreen+0x1a>
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	1f 91       	pop	r17
    14a6:	08 95       	ret

000014a8 <GLCD_Clear>:
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	0e 94 3d 0a 	call	0x147a	; 0x147a <GLCD_FillScreen>
    14ae:	08 95       	ret

000014b0 <GLCD_InvertScreen>:
    14b0:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__GLCD+0x2>
    14b4:	87 3a       	cpi	r24, 0xA7	; 167
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <GLCD_InvertScreen+0x10>
    14b8:	86 ea       	ldi	r24, 0xA6	; 166
    14ba:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__GLCD+0x2>
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <GLCD_InvertScreen+0x16>
    14c0:	87 ea       	ldi	r24, 0xA7	; 167
    14c2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__GLCD+0x2>
    14c6:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__GLCD+0x2>
    14ca:	0e 94 3e 08 	call	0x107c	; 0x107c <GLCD_SendCommand>
    14ce:	08 95       	ret

000014d0 <GLCD_SetFont>:
    14d0:	66 23       	and	r22, r22
    14d2:	e4 f0       	brlt	.+56     	; 0x150c <GLCD_SetFont+0x3c>
    14d4:	40 34       	cpi	r20, 0x40	; 64
    14d6:	d0 f4       	brcc	.+52     	; 0x150c <GLCD_SetFont+0x3c>
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	c0 f4       	brcc	.+48     	; 0x150c <GLCD_SetFont+0x3c>
    14dc:	e2 e8       	ldi	r30, 0x82	; 130
    14de:	f1 e0       	ldi	r31, 0x01	; 1
    14e0:	94 83       	std	Z+4, r25	; 0x04
    14e2:	83 83       	std	Z+3, r24	; 0x03
    14e4:	65 83       	std	Z+5, r22	; 0x05
    14e6:	46 83       	std	Z+6, r20	; 0x06
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	41 50       	subi	r20, 0x01	; 1
    14ec:	51 09       	sbc	r21, r1
    14ee:	ca 01       	movw	r24, r20
    14f0:	99 23       	and	r25, r25
    14f2:	0c f4       	brge	.+2      	; 0x14f6 <GLCD_SetFont+0x26>
    14f4:	07 96       	adiw	r24, 0x07	; 7
    14f6:	95 95       	asr	r25
    14f8:	87 95       	ror	r24
    14fa:	95 95       	asr	r25
    14fc:	87 95       	ror	r24
    14fe:	95 95       	asr	r25
    1500:	87 95       	ror	r24
    1502:	e2 e8       	ldi	r30, 0x82	; 130
    1504:	f1 e0       	ldi	r31, 0x01	; 1
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	87 83       	std	Z+7, r24	; 0x07
    150a:	20 87       	std	Z+8, r18	; 0x08
    150c:	08 95       	ret

0000150e <GLCD_PrintChar>:
    150e:	4f 92       	push	r4
    1510:	5f 92       	push	r5
    1512:	6f 92       	push	r6
    1514:	7f 92       	push	r7
    1516:	8f 92       	push	r8
    1518:	9f 92       	push	r9
    151a:	af 92       	push	r10
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	a2 e8       	ldi	r26, 0x82	; 130
    1530:	b1 e0       	ldi	r27, 0x01	; 1
    1532:	5c 90       	ld	r5, X
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	4c 90       	ld	r4, X
    1538:	11 97       	sbiw	r26, 0x01	; 1
    153a:	80 52       	subi	r24, 0x20	; 32
    153c:	15 96       	adiw	r26, 0x05	; 5
    153e:	9c 91       	ld	r25, X
    1540:	15 97       	sbiw	r26, 0x05	; 5
    1542:	17 96       	adiw	r26, 0x07	; 7
    1544:	2c 91       	ld	r18, X
    1546:	17 97       	sbiw	r26, 0x07	; 7
    1548:	92 9f       	mul	r25, r18
    154a:	90 01       	movw	r18, r0
    154c:	11 24       	eor	r1, r1
    154e:	2f 5f       	subi	r18, 0xFF	; 255
    1550:	3f 4f       	sbci	r19, 0xFF	; 255
    1552:	82 9f       	mul	r24, r18
    1554:	a0 01       	movw	r20, r0
    1556:	83 9f       	mul	r24, r19
    1558:	50 0d       	add	r21, r0
    155a:	11 24       	eor	r1, r1
    155c:	13 96       	adiw	r26, 0x03	; 3
    155e:	ed 91       	ld	r30, X+
    1560:	fc 91       	ld	r31, X
    1562:	14 97       	sbiw	r26, 0x04	; 4
    1564:	5a 01       	movw	r10, r20
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	a8 1a       	sub	r10, r24
    156a:	b8 0a       	sbc	r11, r24
    156c:	e4 0f       	add	r30, r20
    156e:	f5 1f       	adc	r31, r21
    1570:	74 90       	lpm	r7, Z
    1572:	84 2d       	mov	r24, r4
    1574:	87 70       	andi	r24, 0x07	; 7
    1576:	98 2e       	mov	r9, r24
    1578:	64 2c       	mov	r6, r4
    157a:	81 2c       	mov	r8, r1
    157c:	5f c0       	rjmp	.+190    	; 0x163c <GLCD_PrintChar+0x12e>
    157e:	66 2d       	mov	r22, r6
    1580:	85 2d       	mov	r24, r5
    1582:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    1586:	75 01       	movw	r14, r10
    1588:	e8 0c       	add	r14, r8
    158a:	f1 1c       	adc	r15, r1
    158c:	67 01       	movw	r12, r14
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	c8 1a       	sub	r12, r24
    1592:	d1 08       	sbc	r13, r1
    1594:	10 e0       	ldi	r17, 0x00	; 0
    1596:	41 c0       	rjmp	.+130    	; 0x161a <GLCD_PrintChar+0x10c>
    1598:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <__GLCD+0x3>
    159c:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <__GLCD+0x4>
    15a0:	fc 01       	movw	r30, r24
    15a2:	ee 0d       	add	r30, r14
    15a4:	ff 1d       	adc	r31, r15
    15a6:	24 91       	lpm	r18, Z
    15a8:	49 2d       	mov	r20, r9
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	09 2c       	mov	r0, r9
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GLCD_PrintChar+0xa8>
    15b2:	22 0f       	add	r18, r18
    15b4:	33 1f       	adc	r19, r19
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GLCD_PrintChar+0xa4>
    15ba:	02 2f       	mov	r16, r18
    15bc:	88 20       	and	r8, r8
    15be:	a1 f0       	breq	.+40     	; 0x15e8 <GLCD_PrintChar+0xda>
    15c0:	fc 01       	movw	r30, r24
    15c2:	ec 0d       	add	r30, r12
    15c4:	fd 1d       	adc	r31, r13
    15c6:	e4 91       	lpm	r30, Z
    15c8:	88 e0       	ldi	r24, 0x08	; 8
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	84 1b       	sub	r24, r20
    15ce:	95 0b       	sbc	r25, r21
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <GLCD_PrintChar+0xca>
    15d4:	f5 95       	asr	r31
    15d6:	e7 95       	ror	r30
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <GLCD_PrintChar+0xc6>
    15dc:	0e 2f       	mov	r16, r30
    15de:	02 2b       	or	r16, r18
    15e0:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <__GLCD+0x7>
    15e4:	c8 0e       	add	r12, r24
    15e6:	d1 1c       	adc	r13, r1
    15e8:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__GLCD+0x8>
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	39 f4       	brne	.+14     	; 0x15fe <GLCD_PrintChar+0xf0>
    15f0:	e2 e8       	ldi	r30, 0x82	; 130
    15f2:	f1 e0       	ldi	r31, 0x01	; 1
    15f4:	61 81       	ldd	r22, Z+1	; 0x01
    15f6:	80 81       	ld	r24, Z
    15f8:	0e 94 3c 07 	call	0xe78	; 0xe78 <GLCD_BufferRead>
    15fc:	08 2b       	or	r16, r24
    15fe:	c2 e8       	ldi	r28, 0x82	; 130
    1600:	d1 e0       	ldi	r29, 0x01	; 1
    1602:	69 81       	ldd	r22, Y+1	; 0x01
    1604:	88 81       	ld	r24, Y
    1606:	91 e0       	ldi	r25, 0x01	; 1
    1608:	98 0f       	add	r25, r24
    160a:	98 83       	st	Y, r25
    160c:	40 2f       	mov	r20, r16
    160e:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    1612:	8f 81       	ldd	r24, Y+7	; 0x07
    1614:	e8 0e       	add	r14, r24
    1616:	f1 1c       	adc	r15, r1
    1618:	1f 5f       	subi	r17, 0xFF	; 255
    161a:	17 15       	cp	r17, r7
    161c:	08 f4       	brcc	.+2      	; 0x1620 <GLCD_PrintChar+0x112>
    161e:	bc cf       	rjmp	.-136    	; 0x1598 <GLCD_PrintChar+0x8a>
    1620:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__GLCD+0x8>
    1624:	81 11       	cpse	r24, r1
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <GLCD_PrintChar+0x128>
    1628:	e2 e8       	ldi	r30, 0x82	; 130
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	61 81       	ldd	r22, Z+1	; 0x01
    1630:	80 81       	ld	r24, Z
    1632:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    1636:	88 e0       	ldi	r24, 0x08	; 8
    1638:	68 0e       	add	r6, r24
    163a:	83 94       	inc	r8
    163c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <__GLCD+0x7>
    1640:	88 16       	cp	r8, r24
    1642:	08 f4       	brcc	.+2      	; 0x1646 <GLCD_PrintChar+0x138>
    1644:	9c cf       	rjmp	.-200    	; 0x157e <GLCD_PrintChar+0x70>
    1646:	24 2d       	mov	r18, r4
    1648:	26 95       	lsr	r18
    164a:	26 95       	lsr	r18
    164c:	26 95       	lsr	r18
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <__GLCD+0x6>
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	84 0d       	add	r24, r4
    1658:	91 1d       	adc	r25, r1
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	ac 01       	movw	r20, r24
    165e:	12 f4       	brpl	.+4      	; 0x1664 <GLCD_PrintChar+0x156>
    1660:	49 5f       	subi	r20, 0xF9	; 249
    1662:	5f 4f       	sbci	r21, 0xFF	; 255
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	55 95       	asr	r21
    166a:	47 95       	ror	r20
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	24 17       	cp	r18, r20
    1672:	35 07       	cpc	r19, r21
    1674:	09 f4       	brne	.+2      	; 0x1678 <GLCD_PrintChar+0x16a>
    1676:	45 c0       	rjmp	.+138    	; 0x1702 <GLCD_PrintChar+0x1f4>
    1678:	8f e3       	ldi	r24, 0x3F	; 63
    167a:	86 15       	cp	r24, r6
    167c:	08 f4       	brcc	.+2      	; 0x1680 <GLCD_PrintChar+0x172>
    167e:	41 c0       	rjmp	.+130    	; 0x1702 <GLCD_PrintChar+0x1f4>
    1680:	66 2d       	mov	r22, r6
    1682:	85 2d       	mov	r24, r5
    1684:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    1688:	a8 0c       	add	r10, r8
    168a:	b1 1c       	adc	r11, r1
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	a8 1a       	sub	r10, r24
    1690:	b1 08       	sbc	r11, r1
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	29 c0       	rjmp	.+82     	; 0x16e8 <GLCD_PrintChar+0x1da>
    1696:	c2 e8       	ldi	r28, 0x82	; 130
    1698:	d1 e0       	ldi	r29, 0x01	; 1
    169a:	f9 80       	ldd	r15, Y+1	; 0x01
    169c:	18 81       	ld	r17, Y
    169e:	6f 2d       	mov	r22, r15
    16a0:	81 2f       	mov	r24, r17
    16a2:	0e 94 3c 07 	call	0xe78	; 0xe78 <GLCD_BufferRead>
    16a6:	eb 81       	ldd	r30, Y+3	; 0x03
    16a8:	fc 81       	ldd	r31, Y+4	; 0x04
    16aa:	ea 0d       	add	r30, r10
    16ac:	fb 1d       	adc	r31, r11
    16ae:	44 91       	lpm	r20, Z
    16b0:	28 e0       	ldi	r18, 0x08	; 8
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	29 19       	sub	r18, r9
    16b6:	31 09       	sbc	r19, r1
    16b8:	50 e0       	ldi	r21, 0x00	; 0
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GLCD_PrintChar+0x1b2>
    16bc:	55 95       	asr	r21
    16be:	47 95       	ror	r20
    16c0:	2a 95       	dec	r18
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GLCD_PrintChar+0x1ae>
    16c4:	48 2b       	or	r20, r24
    16c6:	98 85       	ldd	r25, Y+8	; 0x08
    16c8:	91 30       	cpi	r25, 0x01	; 1
    16ca:	09 f4       	brne	.+2      	; 0x16ce <GLCD_PrintChar+0x1c0>
    16cc:	48 2b       	or	r20, r24
    16ce:	c2 e8       	ldi	r28, 0x82	; 130
    16d0:	d1 e0       	ldi	r29, 0x01	; 1
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	81 0f       	add	r24, r17
    16d6:	88 83       	st	Y, r24
    16d8:	6f 2d       	mov	r22, r15
    16da:	81 2f       	mov	r24, r17
    16dc:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    16e0:	8f 81       	ldd	r24, Y+7	; 0x07
    16e2:	a8 0e       	add	r10, r24
    16e4:	b1 1c       	adc	r11, r1
    16e6:	0f 5f       	subi	r16, 0xFF	; 255
    16e8:	07 15       	cp	r16, r7
    16ea:	a8 f2       	brcs	.-86     	; 0x1696 <GLCD_PrintChar+0x188>
    16ec:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <__GLCD+0x8>
    16f0:	81 11       	cpse	r24, r1
    16f2:	07 c0       	rjmp	.+14     	; 0x1702 <GLCD_PrintChar+0x1f4>
    16f4:	e2 e8       	ldi	r30, 0x82	; 130
    16f6:	f1 e0       	ldi	r31, 0x01	; 1
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	61 81       	ldd	r22, Z+1	; 0x01
    16fc:	80 81       	ld	r24, Z
    16fe:	0e 94 2e 07 	call	0xe5c	; 0xe5c <GLCD_BufferWrite>
    1702:	85 2d       	mov	r24, r5
    1704:	87 0d       	add	r24, r7
    1706:	64 2d       	mov	r22, r4
    1708:	8f 5f       	subi	r24, 0xFF	; 255
    170a:	0e 94 7d 08 	call	0x10fa	; 0x10fa <GLCD_GotoXY>
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	ff 90       	pop	r15
    1718:	ef 90       	pop	r14
    171a:	df 90       	pop	r13
    171c:	cf 90       	pop	r12
    171e:	bf 90       	pop	r11
    1720:	af 90       	pop	r10
    1722:	9f 90       	pop	r9
    1724:	8f 90       	pop	r8
    1726:	7f 90       	pop	r7
    1728:	6f 90       	pop	r6
    172a:	5f 90       	pop	r5
    172c:	4f 90       	pop	r4
    172e:	08 95       	ret

00001730 <GLCD_PrintString>:
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	ec 01       	movw	r28, r24
    1736:	0d c0       	rjmp	.+26     	; 0x1752 <GLCD_PrintString+0x22>
    1738:	e2 e8       	ldi	r30, 0x82	; 130
    173a:	f1 e0       	ldi	r31, 0x01	; 1
    173c:	90 81       	ld	r25, Z
    173e:	25 81       	ldd	r18, Z+5	; 0x05
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	29 0f       	add	r18, r25
    1744:	31 1d       	adc	r19, r1
    1746:	20 38       	cpi	r18, 0x80	; 128
    1748:	31 05       	cpc	r19, r1
    174a:	34 f4       	brge	.+12     	; 0x1758 <GLCD_PrintString+0x28>
    174c:	21 96       	adiw	r28, 0x01	; 1
    174e:	0e 94 87 0a 	call	0x150e	; 0x150e <GLCD_PrintChar>
    1752:	88 81       	ld	r24, Y
    1754:	81 11       	cpse	r24, r1
    1756:	f0 cf       	rjmp	.-32     	; 0x1738 <GLCD_PrintString+0x8>
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	2c 97       	sbiw	r28, 0x0c	; 12
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    1776:	61 15       	cp	r22, r1
    1778:	71 05       	cpc	r23, r1
    177a:	81 05       	cpc	r24, r1
    177c:	91 05       	cpc	r25, r1
    177e:	21 f4       	brne	.+8      	; 0x1788 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    1780:	80 e3       	ldi	r24, 0x30	; 48
    1782:	0e 94 87 0a 	call	0x150e	; 0x150e <GLCD_PrintChar>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <GLCD_PrintInteger+0x52>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    1788:	61 15       	cp	r22, r1
    178a:	71 05       	cpc	r23, r1
    178c:	81 05       	cpc	r24, r1
    178e:	20 e8       	ldi	r18, 0x80	; 128
    1790:	92 07       	cpc	r25, r18
    1792:	71 f0       	breq	.+28     	; 0x17b0 <GLCD_PrintInteger+0x52>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    1794:	8e 01       	movw	r16, r28
    1796:	0f 5f       	subi	r16, 0xFF	; 255
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	2c e0       	ldi	r18, 0x0C	; 12
    179c:	f8 01       	movw	r30, r16
    179e:	11 92       	st	Z+, r1
    17a0:	2a 95       	dec	r18
    17a2:	e9 f7       	brne	.-6      	; 0x179e <GLCD_PrintInteger+0x40>
		
		//Convert integer to array
		Int2bcd(Value, bcd);
    17a4:	a8 01       	movw	r20, r16
    17a6:	0e 94 4a 07 	call	0xe94	; 0xe94 <Int2bcd>
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    17aa:	c8 01       	movw	r24, r16
    17ac:	0e 94 98 0b 	call	0x1730	; 0x1730 <GLCD_PrintString>
	}
}
    17b0:	2c 96       	adiw	r28, 0x0c	; 12
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    17c6:	87 b1       	in	r24, 0x07	; 7
    17c8:	80 61       	ori	r24, 0x10	; 16
    17ca:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    17cc:	87 b1       	in	r24, 0x07	; 7
    17ce:	80 62       	ori	r24, 0x20	; 32
    17d0:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    17d2:	88 b1       	in	r24, 0x08	; 8
    17d4:	80 61       	ori	r24, 0x10	; 16
    17d6:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    17d8:	88 b1       	in	r24, 0x08	; 8
    17da:	80 62       	ori	r24, 0x20	; 32
    17dc:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    17de:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    17e2:	88 e4       	ldi	r24, 0x48	; 72
    17e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    17ee:	08 95       	ret

000017f0 <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    17f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    17f4:	88 7f       	andi	r24, 0xF8	; 248
    17f6:	08 95       	ret

000017f8 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    17f8:	84 ea       	ldi	r24, 0xA4	; 164
    17fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    17fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1802:	88 23       	and	r24, r24
    1804:	e4 f7       	brge	.-8      	; 0x17fe <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    1806:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <TWI_Status>
}
    180a:	08 95       	ret

0000180c <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    180c:	85 ed       	ldi	r24, 0xD5	; 213
    180e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    1812:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1816:	84 fd       	sbrc	r24, 4
    1818:	fc cf       	rjmp	.-8      	; 0x1812 <TWI_EndTransmission+0x6>
}
    181a:	08 95       	ret

0000181c <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    181c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    1820:	84 e8       	ldi	r24, 0x84	; 132
    1822:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    1826:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    182a:	88 23       	and	r24, r24
    182c:	e4 f7       	brge	.-8      	; 0x1826 <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    182e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <TWI_Status>
}
    1832:	08 95       	ret

00001834 <__subsf3>:
    1834:	50 58       	subi	r21, 0x80	; 128

00001836 <__addsf3>:
    1836:	bb 27       	eor	r27, r27
    1838:	aa 27       	eor	r26, r26
    183a:	0e 94 32 0c 	call	0x1864	; 0x1864 <__addsf3x>
    183e:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>
    1842:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__fp_pscA>
    1846:	38 f0       	brcs	.+14     	; 0x1856 <__addsf3+0x20>
    1848:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscB>
    184c:	20 f0       	brcs	.+8      	; 0x1856 <__addsf3+0x20>
    184e:	39 f4       	brne	.+14     	; 0x185e <__addsf3+0x28>
    1850:	9f 3f       	cpi	r25, 0xFF	; 255
    1852:	19 f4       	brne	.+6      	; 0x185a <__addsf3+0x24>
    1854:	26 f4       	brtc	.+8      	; 0x185e <__addsf3+0x28>
    1856:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    185a:	0e f4       	brtc	.+2      	; 0x185e <__addsf3+0x28>
    185c:	e0 95       	com	r30
    185e:	e7 fb       	bst	r30, 7
    1860:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>

00001864 <__addsf3x>:
    1864:	e9 2f       	mov	r30, r25
    1866:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_split3>
    186a:	58 f3       	brcs	.-42     	; 0x1842 <__addsf3+0xc>
    186c:	ba 17       	cp	r27, r26
    186e:	62 07       	cpc	r22, r18
    1870:	73 07       	cpc	r23, r19
    1872:	84 07       	cpc	r24, r20
    1874:	95 07       	cpc	r25, r21
    1876:	20 f0       	brcs	.+8      	; 0x1880 <__addsf3x+0x1c>
    1878:	79 f4       	brne	.+30     	; 0x1898 <__addsf3x+0x34>
    187a:	a6 f5       	brtc	.+104    	; 0x18e4 <__addsf3x+0x80>
    187c:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_zero>
    1880:	0e f4       	brtc	.+2      	; 0x1884 <__addsf3x+0x20>
    1882:	e0 95       	com	r30
    1884:	0b 2e       	mov	r0, r27
    1886:	ba 2f       	mov	r27, r26
    1888:	a0 2d       	mov	r26, r0
    188a:	0b 01       	movw	r0, r22
    188c:	b9 01       	movw	r22, r18
    188e:	90 01       	movw	r18, r0
    1890:	0c 01       	movw	r0, r24
    1892:	ca 01       	movw	r24, r20
    1894:	a0 01       	movw	r20, r0
    1896:	11 24       	eor	r1, r1
    1898:	ff 27       	eor	r31, r31
    189a:	59 1b       	sub	r21, r25
    189c:	99 f0       	breq	.+38     	; 0x18c4 <__addsf3x+0x60>
    189e:	59 3f       	cpi	r21, 0xF9	; 249
    18a0:	50 f4       	brcc	.+20     	; 0x18b6 <__addsf3x+0x52>
    18a2:	50 3e       	cpi	r21, 0xE0	; 224
    18a4:	68 f1       	brcs	.+90     	; 0x1900 <__addsf3x+0x9c>
    18a6:	1a 16       	cp	r1, r26
    18a8:	f0 40       	sbci	r31, 0x00	; 0
    18aa:	a2 2f       	mov	r26, r18
    18ac:	23 2f       	mov	r18, r19
    18ae:	34 2f       	mov	r19, r20
    18b0:	44 27       	eor	r20, r20
    18b2:	58 5f       	subi	r21, 0xF8	; 248
    18b4:	f3 cf       	rjmp	.-26     	; 0x189c <__addsf3x+0x38>
    18b6:	46 95       	lsr	r20
    18b8:	37 95       	ror	r19
    18ba:	27 95       	ror	r18
    18bc:	a7 95       	ror	r26
    18be:	f0 40       	sbci	r31, 0x00	; 0
    18c0:	53 95       	inc	r21
    18c2:	c9 f7       	brne	.-14     	; 0x18b6 <__addsf3x+0x52>
    18c4:	7e f4       	brtc	.+30     	; 0x18e4 <__addsf3x+0x80>
    18c6:	1f 16       	cp	r1, r31
    18c8:	ba 0b       	sbc	r27, r26
    18ca:	62 0b       	sbc	r22, r18
    18cc:	73 0b       	sbc	r23, r19
    18ce:	84 0b       	sbc	r24, r20
    18d0:	ba f0       	brmi	.+46     	; 0x1900 <__addsf3x+0x9c>
    18d2:	91 50       	subi	r25, 0x01	; 1
    18d4:	a1 f0       	breq	.+40     	; 0x18fe <__addsf3x+0x9a>
    18d6:	ff 0f       	add	r31, r31
    18d8:	bb 1f       	adc	r27, r27
    18da:	66 1f       	adc	r22, r22
    18dc:	77 1f       	adc	r23, r23
    18de:	88 1f       	adc	r24, r24
    18e0:	c2 f7       	brpl	.-16     	; 0x18d2 <__addsf3x+0x6e>
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <__addsf3x+0x9c>
    18e4:	ba 0f       	add	r27, r26
    18e6:	62 1f       	adc	r22, r18
    18e8:	73 1f       	adc	r23, r19
    18ea:	84 1f       	adc	r24, r20
    18ec:	48 f4       	brcc	.+18     	; 0x1900 <__addsf3x+0x9c>
    18ee:	87 95       	ror	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	9e 3f       	cpi	r25, 0xFE	; 254
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <__addsf3x+0x9a>
    18fc:	b0 cf       	rjmp	.-160    	; 0x185e <__addsf3+0x28>
    18fe:	93 95       	inc	r25
    1900:	88 0f       	add	r24, r24
    1902:	08 f0       	brcs	.+2      	; 0x1906 <__addsf3x+0xa2>
    1904:	99 27       	eor	r25, r25
    1906:	ee 0f       	add	r30, r30
    1908:	97 95       	ror	r25
    190a:	87 95       	ror	r24
    190c:	08 95       	ret

0000190e <__divsf3>:
    190e:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__divsf3x>
    1912:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>
    1916:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscB>
    191a:	58 f0       	brcs	.+22     	; 0x1932 <__divsf3+0x24>
    191c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__fp_pscA>
    1920:	40 f0       	brcs	.+16     	; 0x1932 <__divsf3+0x24>
    1922:	29 f4       	brne	.+10     	; 0x192e <__divsf3+0x20>
    1924:	5f 3f       	cpi	r21, 0xFF	; 255
    1926:	29 f0       	breq	.+10     	; 0x1932 <__divsf3+0x24>
    1928:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    192c:	51 11       	cpse	r21, r1
    192e:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    1932:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>

00001936 <__divsf3x>:
    1936:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_split3>
    193a:	68 f3       	brcs	.-38     	; 0x1916 <__divsf3+0x8>

0000193c <__divsf3_pse>:
    193c:	99 23       	and	r25, r25
    193e:	b1 f3       	breq	.-20     	; 0x192c <__divsf3+0x1e>
    1940:	55 23       	and	r21, r21
    1942:	91 f3       	breq	.-28     	; 0x1928 <__divsf3+0x1a>
    1944:	95 1b       	sub	r25, r21
    1946:	55 0b       	sbc	r21, r21
    1948:	bb 27       	eor	r27, r27
    194a:	aa 27       	eor	r26, r26
    194c:	62 17       	cp	r22, r18
    194e:	73 07       	cpc	r23, r19
    1950:	84 07       	cpc	r24, r20
    1952:	38 f0       	brcs	.+14     	; 0x1962 <__divsf3_pse+0x26>
    1954:	9f 5f       	subi	r25, 0xFF	; 255
    1956:	5f 4f       	sbci	r21, 0xFF	; 255
    1958:	22 0f       	add	r18, r18
    195a:	33 1f       	adc	r19, r19
    195c:	44 1f       	adc	r20, r20
    195e:	aa 1f       	adc	r26, r26
    1960:	a9 f3       	breq	.-22     	; 0x194c <__divsf3_pse+0x10>
    1962:	35 d0       	rcall	.+106    	; 0x19ce <__divsf3_pse+0x92>
    1964:	0e 2e       	mov	r0, r30
    1966:	3a f0       	brmi	.+14     	; 0x1976 <__divsf3_pse+0x3a>
    1968:	e0 e8       	ldi	r30, 0x80	; 128
    196a:	32 d0       	rcall	.+100    	; 0x19d0 <__divsf3_pse+0x94>
    196c:	91 50       	subi	r25, 0x01	; 1
    196e:	50 40       	sbci	r21, 0x00	; 0
    1970:	e6 95       	lsr	r30
    1972:	00 1c       	adc	r0, r0
    1974:	ca f7       	brpl	.-14     	; 0x1968 <__divsf3_pse+0x2c>
    1976:	2b d0       	rcall	.+86     	; 0x19ce <__divsf3_pse+0x92>
    1978:	fe 2f       	mov	r31, r30
    197a:	29 d0       	rcall	.+82     	; 0x19ce <__divsf3_pse+0x92>
    197c:	66 0f       	add	r22, r22
    197e:	77 1f       	adc	r23, r23
    1980:	88 1f       	adc	r24, r24
    1982:	bb 1f       	adc	r27, r27
    1984:	26 17       	cp	r18, r22
    1986:	37 07       	cpc	r19, r23
    1988:	48 07       	cpc	r20, r24
    198a:	ab 07       	cpc	r26, r27
    198c:	b0 e8       	ldi	r27, 0x80	; 128
    198e:	09 f0       	breq	.+2      	; 0x1992 <__divsf3_pse+0x56>
    1990:	bb 0b       	sbc	r27, r27
    1992:	80 2d       	mov	r24, r0
    1994:	bf 01       	movw	r22, r30
    1996:	ff 27       	eor	r31, r31
    1998:	93 58       	subi	r25, 0x83	; 131
    199a:	5f 4f       	sbci	r21, 0xFF	; 255
    199c:	3a f0       	brmi	.+14     	; 0x19ac <__divsf3_pse+0x70>
    199e:	9e 3f       	cpi	r25, 0xFE	; 254
    19a0:	51 05       	cpc	r21, r1
    19a2:	78 f0       	brcs	.+30     	; 0x19c2 <__divsf3_pse+0x86>
    19a4:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    19a8:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    19ac:	5f 3f       	cpi	r21, 0xFF	; 255
    19ae:	e4 f3       	brlt	.-8      	; 0x19a8 <__divsf3_pse+0x6c>
    19b0:	98 3e       	cpi	r25, 0xE8	; 232
    19b2:	d4 f3       	brlt	.-12     	; 0x19a8 <__divsf3_pse+0x6c>
    19b4:	86 95       	lsr	r24
    19b6:	77 95       	ror	r23
    19b8:	67 95       	ror	r22
    19ba:	b7 95       	ror	r27
    19bc:	f7 95       	ror	r31
    19be:	9f 5f       	subi	r25, 0xFF	; 255
    19c0:	c9 f7       	brne	.-14     	; 0x19b4 <__divsf3_pse+0x78>
    19c2:	88 0f       	add	r24, r24
    19c4:	91 1d       	adc	r25, r1
    19c6:	96 95       	lsr	r25
    19c8:	87 95       	ror	r24
    19ca:	97 f9       	bld	r25, 7
    19cc:	08 95       	ret
    19ce:	e1 e0       	ldi	r30, 0x01	; 1
    19d0:	66 0f       	add	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	bb 1f       	adc	r27, r27
    19d8:	62 17       	cp	r22, r18
    19da:	73 07       	cpc	r23, r19
    19dc:	84 07       	cpc	r24, r20
    19de:	ba 07       	cpc	r27, r26
    19e0:	20 f0       	brcs	.+8      	; 0x19ea <__divsf3_pse+0xae>
    19e2:	62 1b       	sub	r22, r18
    19e4:	73 0b       	sbc	r23, r19
    19e6:	84 0b       	sbc	r24, r20
    19e8:	ba 0b       	sbc	r27, r26
    19ea:	ee 1f       	adc	r30, r30
    19ec:	88 f7       	brcc	.-30     	; 0x19d0 <__divsf3_pse+0x94>
    19ee:	e0 95       	com	r30
    19f0:	08 95       	ret

000019f2 <__fixunssfsi>:
    19f2:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <__fp_splitA>
    19f6:	88 f0       	brcs	.+34     	; 0x1a1a <__fixunssfsi+0x28>
    19f8:	9f 57       	subi	r25, 0x7F	; 127
    19fa:	98 f0       	brcs	.+38     	; 0x1a22 <__fixunssfsi+0x30>
    19fc:	b9 2f       	mov	r27, r25
    19fe:	99 27       	eor	r25, r25
    1a00:	b7 51       	subi	r27, 0x17	; 23
    1a02:	b0 f0       	brcs	.+44     	; 0x1a30 <__fixunssfsi+0x3e>
    1a04:	e1 f0       	breq	.+56     	; 0x1a3e <__fixunssfsi+0x4c>
    1a06:	66 0f       	add	r22, r22
    1a08:	77 1f       	adc	r23, r23
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	1a f0       	brmi	.+6      	; 0x1a16 <__fixunssfsi+0x24>
    1a10:	ba 95       	dec	r27
    1a12:	c9 f7       	brne	.-14     	; 0x1a06 <__fixunssfsi+0x14>
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <__fixunssfsi+0x4c>
    1a16:	b1 30       	cpi	r27, 0x01	; 1
    1a18:	91 f0       	breq	.+36     	; 0x1a3e <__fixunssfsi+0x4c>
    1a1a:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <__fp_zero>
    1a1e:	b1 e0       	ldi	r27, 0x01	; 1
    1a20:	08 95       	ret
    1a22:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__fp_zero>
    1a26:	67 2f       	mov	r22, r23
    1a28:	78 2f       	mov	r23, r24
    1a2a:	88 27       	eor	r24, r24
    1a2c:	b8 5f       	subi	r27, 0xF8	; 248
    1a2e:	39 f0       	breq	.+14     	; 0x1a3e <__fixunssfsi+0x4c>
    1a30:	b9 3f       	cpi	r27, 0xF9	; 249
    1a32:	cc f3       	brlt	.-14     	; 0x1a26 <__fixunssfsi+0x34>
    1a34:	86 95       	lsr	r24
    1a36:	77 95       	ror	r23
    1a38:	67 95       	ror	r22
    1a3a:	b3 95       	inc	r27
    1a3c:	d9 f7       	brne	.-10     	; 0x1a34 <__fixunssfsi+0x42>
    1a3e:	3e f4       	brtc	.+14     	; 0x1a4e <__fixunssfsi+0x5c>
    1a40:	90 95       	com	r25
    1a42:	80 95       	com	r24
    1a44:	70 95       	com	r23
    1a46:	61 95       	neg	r22
    1a48:	7f 4f       	sbci	r23, 0xFF	; 255
    1a4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4e:	08 95       	ret

00001a50 <__floatunsisf>:
    1a50:	e8 94       	clt
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <__floatsisf+0x12>

00001a54 <__floatsisf>:
    1a54:	97 fb       	bst	r25, 7
    1a56:	3e f4       	brtc	.+14     	; 0x1a66 <__floatsisf+0x12>
    1a58:	90 95       	com	r25
    1a5a:	80 95       	com	r24
    1a5c:	70 95       	com	r23
    1a5e:	61 95       	neg	r22
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	8f 4f       	sbci	r24, 0xFF	; 255
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	99 23       	and	r25, r25
    1a68:	a9 f0       	breq	.+42     	; 0x1a94 <__floatsisf+0x40>
    1a6a:	f9 2f       	mov	r31, r25
    1a6c:	96 e9       	ldi	r25, 0x96	; 150
    1a6e:	bb 27       	eor	r27, r27
    1a70:	93 95       	inc	r25
    1a72:	f6 95       	lsr	r31
    1a74:	87 95       	ror	r24
    1a76:	77 95       	ror	r23
    1a78:	67 95       	ror	r22
    1a7a:	b7 95       	ror	r27
    1a7c:	f1 11       	cpse	r31, r1
    1a7e:	f8 cf       	rjmp	.-16     	; 0x1a70 <__floatsisf+0x1c>
    1a80:	fa f4       	brpl	.+62     	; 0x1ac0 <__floatsisf+0x6c>
    1a82:	bb 0f       	add	r27, r27
    1a84:	11 f4       	brne	.+4      	; 0x1a8a <__floatsisf+0x36>
    1a86:	60 ff       	sbrs	r22, 0
    1a88:	1b c0       	rjmp	.+54     	; 0x1ac0 <__floatsisf+0x6c>
    1a8a:	6f 5f       	subi	r22, 0xFF	; 255
    1a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a90:	9f 4f       	sbci	r25, 0xFF	; 255
    1a92:	16 c0       	rjmp	.+44     	; 0x1ac0 <__floatsisf+0x6c>
    1a94:	88 23       	and	r24, r24
    1a96:	11 f0       	breq	.+4      	; 0x1a9c <__floatsisf+0x48>
    1a98:	96 e9       	ldi	r25, 0x96	; 150
    1a9a:	11 c0       	rjmp	.+34     	; 0x1abe <__floatsisf+0x6a>
    1a9c:	77 23       	and	r23, r23
    1a9e:	21 f0       	breq	.+8      	; 0x1aa8 <__floatsisf+0x54>
    1aa0:	9e e8       	ldi	r25, 0x8E	; 142
    1aa2:	87 2f       	mov	r24, r23
    1aa4:	76 2f       	mov	r23, r22
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <__floatsisf+0x5e>
    1aa8:	66 23       	and	r22, r22
    1aaa:	71 f0       	breq	.+28     	; 0x1ac8 <__floatsisf+0x74>
    1aac:	96 e8       	ldi	r25, 0x86	; 134
    1aae:	86 2f       	mov	r24, r22
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	2a f0       	brmi	.+10     	; 0x1ac0 <__floatsisf+0x6c>
    1ab6:	9a 95       	dec	r25
    1ab8:	66 0f       	add	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	88 1f       	adc	r24, r24
    1abe:	da f7       	brpl	.-10     	; 0x1ab6 <__floatsisf+0x62>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	96 95       	lsr	r25
    1ac4:	87 95       	ror	r24
    1ac6:	97 f9       	bld	r25, 7
    1ac8:	08 95       	ret

00001aca <__fp_inf>:
    1aca:	97 f9       	bld	r25, 7
    1acc:	9f 67       	ori	r25, 0x7F	; 127
    1ace:	80 e8       	ldi	r24, 0x80	; 128
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	60 e0       	ldi	r22, 0x00	; 0
    1ad4:	08 95       	ret

00001ad6 <__fp_nan>:
    1ad6:	9f ef       	ldi	r25, 0xFF	; 255
    1ad8:	80 ec       	ldi	r24, 0xC0	; 192
    1ada:	08 95       	ret

00001adc <__fp_pscA>:
    1adc:	00 24       	eor	r0, r0
    1ade:	0a 94       	dec	r0
    1ae0:	16 16       	cp	r1, r22
    1ae2:	17 06       	cpc	r1, r23
    1ae4:	18 06       	cpc	r1, r24
    1ae6:	09 06       	cpc	r0, r25
    1ae8:	08 95       	ret

00001aea <__fp_pscB>:
    1aea:	00 24       	eor	r0, r0
    1aec:	0a 94       	dec	r0
    1aee:	12 16       	cp	r1, r18
    1af0:	13 06       	cpc	r1, r19
    1af2:	14 06       	cpc	r1, r20
    1af4:	05 06       	cpc	r0, r21
    1af6:	08 95       	ret

00001af8 <__fp_round>:
    1af8:	09 2e       	mov	r0, r25
    1afa:	03 94       	inc	r0
    1afc:	00 0c       	add	r0, r0
    1afe:	11 f4       	brne	.+4      	; 0x1b04 <__fp_round+0xc>
    1b00:	88 23       	and	r24, r24
    1b02:	52 f0       	brmi	.+20     	; 0x1b18 <__fp_round+0x20>
    1b04:	bb 0f       	add	r27, r27
    1b06:	40 f4       	brcc	.+16     	; 0x1b18 <__fp_round+0x20>
    1b08:	bf 2b       	or	r27, r31
    1b0a:	11 f4       	brne	.+4      	; 0x1b10 <__fp_round+0x18>
    1b0c:	60 ff       	sbrs	r22, 0
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <__fp_round+0x20>
    1b10:	6f 5f       	subi	r22, 0xFF	; 255
    1b12:	7f 4f       	sbci	r23, 0xFF	; 255
    1b14:	8f 4f       	sbci	r24, 0xFF	; 255
    1b16:	9f 4f       	sbci	r25, 0xFF	; 255
    1b18:	08 95       	ret

00001b1a <__fp_split3>:
    1b1a:	57 fd       	sbrc	r21, 7
    1b1c:	90 58       	subi	r25, 0x80	; 128
    1b1e:	44 0f       	add	r20, r20
    1b20:	55 1f       	adc	r21, r21
    1b22:	59 f0       	breq	.+22     	; 0x1b3a <__fp_splitA+0x10>
    1b24:	5f 3f       	cpi	r21, 0xFF	; 255
    1b26:	71 f0       	breq	.+28     	; 0x1b44 <__fp_splitA+0x1a>
    1b28:	47 95       	ror	r20

00001b2a <__fp_splitA>:
    1b2a:	88 0f       	add	r24, r24
    1b2c:	97 fb       	bst	r25, 7
    1b2e:	99 1f       	adc	r25, r25
    1b30:	61 f0       	breq	.+24     	; 0x1b4a <__fp_splitA+0x20>
    1b32:	9f 3f       	cpi	r25, 0xFF	; 255
    1b34:	79 f0       	breq	.+30     	; 0x1b54 <__fp_splitA+0x2a>
    1b36:	87 95       	ror	r24
    1b38:	08 95       	ret
    1b3a:	12 16       	cp	r1, r18
    1b3c:	13 06       	cpc	r1, r19
    1b3e:	14 06       	cpc	r1, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	f2 cf       	rjmp	.-28     	; 0x1b28 <__fp_split3+0xe>
    1b44:	46 95       	lsr	r20
    1b46:	f1 df       	rcall	.-30     	; 0x1b2a <__fp_splitA>
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <__fp_splitA+0x30>
    1b4a:	16 16       	cp	r1, r22
    1b4c:	17 06       	cpc	r1, r23
    1b4e:	18 06       	cpc	r1, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	f1 cf       	rjmp	.-30     	; 0x1b36 <__fp_splitA+0xc>
    1b54:	86 95       	lsr	r24
    1b56:	71 05       	cpc	r23, r1
    1b58:	61 05       	cpc	r22, r1
    1b5a:	08 94       	sec
    1b5c:	08 95       	ret

00001b5e <__fp_zero>:
    1b5e:	e8 94       	clt

00001b60 <__fp_szero>:
    1b60:	bb 27       	eor	r27, r27
    1b62:	66 27       	eor	r22, r22
    1b64:	77 27       	eor	r23, r23
    1b66:	cb 01       	movw	r24, r22
    1b68:	97 f9       	bld	r25, 7
    1b6a:	08 95       	ret

00001b6c <__mulsf3>:
    1b6c:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <__mulsf3x>
    1b70:	0c 94 7c 0d 	jmp	0x1af8	; 0x1af8 <__fp_round>
    1b74:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <__fp_pscA>
    1b78:	38 f0       	brcs	.+14     	; 0x1b88 <__mulsf3+0x1c>
    1b7a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__fp_pscB>
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <__mulsf3+0x1c>
    1b80:	95 23       	and	r25, r21
    1b82:	11 f0       	breq	.+4      	; 0x1b88 <__mulsf3+0x1c>
    1b84:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    1b88:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__fp_nan>
    1b8c:	11 24       	eor	r1, r1
    1b8e:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>

00001b92 <__mulsf3x>:
    1b92:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <__fp_split3>
    1b96:	70 f3       	brcs	.-36     	; 0x1b74 <__mulsf3+0x8>

00001b98 <__mulsf3_pse>:
    1b98:	95 9f       	mul	r25, r21
    1b9a:	c1 f3       	breq	.-16     	; 0x1b8c <__mulsf3+0x20>
    1b9c:	95 0f       	add	r25, r21
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	55 1f       	adc	r21, r21
    1ba2:	62 9f       	mul	r22, r18
    1ba4:	f0 01       	movw	r30, r0
    1ba6:	72 9f       	mul	r23, r18
    1ba8:	bb 27       	eor	r27, r27
    1baa:	f0 0d       	add	r31, r0
    1bac:	b1 1d       	adc	r27, r1
    1bae:	63 9f       	mul	r22, r19
    1bb0:	aa 27       	eor	r26, r26
    1bb2:	f0 0d       	add	r31, r0
    1bb4:	b1 1d       	adc	r27, r1
    1bb6:	aa 1f       	adc	r26, r26
    1bb8:	64 9f       	mul	r22, r20
    1bba:	66 27       	eor	r22, r22
    1bbc:	b0 0d       	add	r27, r0
    1bbe:	a1 1d       	adc	r26, r1
    1bc0:	66 1f       	adc	r22, r22
    1bc2:	82 9f       	mul	r24, r18
    1bc4:	22 27       	eor	r18, r18
    1bc6:	b0 0d       	add	r27, r0
    1bc8:	a1 1d       	adc	r26, r1
    1bca:	62 1f       	adc	r22, r18
    1bcc:	73 9f       	mul	r23, r19
    1bce:	b0 0d       	add	r27, r0
    1bd0:	a1 1d       	adc	r26, r1
    1bd2:	62 1f       	adc	r22, r18
    1bd4:	83 9f       	mul	r24, r19
    1bd6:	a0 0d       	add	r26, r0
    1bd8:	61 1d       	adc	r22, r1
    1bda:	22 1f       	adc	r18, r18
    1bdc:	74 9f       	mul	r23, r20
    1bde:	33 27       	eor	r19, r19
    1be0:	a0 0d       	add	r26, r0
    1be2:	61 1d       	adc	r22, r1
    1be4:	23 1f       	adc	r18, r19
    1be6:	84 9f       	mul	r24, r20
    1be8:	60 0d       	add	r22, r0
    1bea:	21 1d       	adc	r18, r1
    1bec:	82 2f       	mov	r24, r18
    1bee:	76 2f       	mov	r23, r22
    1bf0:	6a 2f       	mov	r22, r26
    1bf2:	11 24       	eor	r1, r1
    1bf4:	9f 57       	subi	r25, 0x7F	; 127
    1bf6:	50 40       	sbci	r21, 0x00	; 0
    1bf8:	9a f0       	brmi	.+38     	; 0x1c20 <__mulsf3_pse+0x88>
    1bfa:	f1 f0       	breq	.+60     	; 0x1c38 <__mulsf3_pse+0xa0>
    1bfc:	88 23       	and	r24, r24
    1bfe:	4a f0       	brmi	.+18     	; 0x1c12 <__mulsf3_pse+0x7a>
    1c00:	ee 0f       	add	r30, r30
    1c02:	ff 1f       	adc	r31, r31
    1c04:	bb 1f       	adc	r27, r27
    1c06:	66 1f       	adc	r22, r22
    1c08:	77 1f       	adc	r23, r23
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	91 50       	subi	r25, 0x01	; 1
    1c0e:	50 40       	sbci	r21, 0x00	; 0
    1c10:	a9 f7       	brne	.-22     	; 0x1bfc <__mulsf3_pse+0x64>
    1c12:	9e 3f       	cpi	r25, 0xFE	; 254
    1c14:	51 05       	cpc	r21, r1
    1c16:	80 f0       	brcs	.+32     	; 0x1c38 <__mulsf3_pse+0xa0>
    1c18:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__fp_inf>
    1c1c:	0c 94 b0 0d 	jmp	0x1b60	; 0x1b60 <__fp_szero>
    1c20:	5f 3f       	cpi	r21, 0xFF	; 255
    1c22:	e4 f3       	brlt	.-8      	; 0x1c1c <__mulsf3_pse+0x84>
    1c24:	98 3e       	cpi	r25, 0xE8	; 232
    1c26:	d4 f3       	brlt	.-12     	; 0x1c1c <__mulsf3_pse+0x84>
    1c28:	86 95       	lsr	r24
    1c2a:	77 95       	ror	r23
    1c2c:	67 95       	ror	r22
    1c2e:	b7 95       	ror	r27
    1c30:	f7 95       	ror	r31
    1c32:	e7 95       	ror	r30
    1c34:	9f 5f       	subi	r25, 0xFF	; 255
    1c36:	c1 f7       	brne	.-16     	; 0x1c28 <__mulsf3_pse+0x90>
    1c38:	fe 2b       	or	r31, r30
    1c3a:	88 0f       	add	r24, r24
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	96 95       	lsr	r25
    1c40:	87 95       	ror	r24
    1c42:	97 f9       	bld	r25, 7
    1c44:	08 95       	ret

00001c46 <__udivmodsi4>:
    1c46:	a1 e2       	ldi	r26, 0x21	; 33
    1c48:	1a 2e       	mov	r1, r26
    1c4a:	aa 1b       	sub	r26, r26
    1c4c:	bb 1b       	sub	r27, r27
    1c4e:	fd 01       	movw	r30, r26
    1c50:	0d c0       	rjmp	.+26     	; 0x1c6c <__udivmodsi4_ep>

00001c52 <__udivmodsi4_loop>:
    1c52:	aa 1f       	adc	r26, r26
    1c54:	bb 1f       	adc	r27, r27
    1c56:	ee 1f       	adc	r30, r30
    1c58:	ff 1f       	adc	r31, r31
    1c5a:	a2 17       	cp	r26, r18
    1c5c:	b3 07       	cpc	r27, r19
    1c5e:	e4 07       	cpc	r30, r20
    1c60:	f5 07       	cpc	r31, r21
    1c62:	20 f0       	brcs	.+8      	; 0x1c6c <__udivmodsi4_ep>
    1c64:	a2 1b       	sub	r26, r18
    1c66:	b3 0b       	sbc	r27, r19
    1c68:	e4 0b       	sbc	r30, r20
    1c6a:	f5 0b       	sbc	r31, r21

00001c6c <__udivmodsi4_ep>:
    1c6c:	66 1f       	adc	r22, r22
    1c6e:	77 1f       	adc	r23, r23
    1c70:	88 1f       	adc	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	1a 94       	dec	r1
    1c76:	69 f7       	brne	.-38     	; 0x1c52 <__udivmodsi4_loop>
    1c78:	60 95       	com	r22
    1c7a:	70 95       	com	r23
    1c7c:	80 95       	com	r24
    1c7e:	90 95       	com	r25
    1c80:	9b 01       	movw	r18, r22
    1c82:	ac 01       	movw	r20, r24
    1c84:	bd 01       	movw	r22, r26
    1c86:	cf 01       	movw	r24, r30
    1c88:	08 95       	ret

00001c8a <__divmodsi4>:
    1c8a:	05 2e       	mov	r0, r21
    1c8c:	97 fb       	bst	r25, 7
    1c8e:	1e f4       	brtc	.+6      	; 0x1c96 <__divmodsi4+0xc>
    1c90:	00 94       	com	r0
    1c92:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <__negsi2>
    1c96:	57 fd       	sbrc	r21, 7
    1c98:	07 d0       	rcall	.+14     	; 0x1ca8 <__divmodsi4_neg2>
    1c9a:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodsi4>
    1c9e:	07 fc       	sbrc	r0, 7
    1ca0:	03 d0       	rcall	.+6      	; 0x1ca8 <__divmodsi4_neg2>
    1ca2:	4e f4       	brtc	.+18     	; 0x1cb6 <__divmodsi4_exit>
    1ca4:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__negsi2>

00001ca8 <__divmodsi4_neg2>:
    1ca8:	50 95       	com	r21
    1caa:	40 95       	com	r20
    1cac:	30 95       	com	r19
    1cae:	21 95       	neg	r18
    1cb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255

00001cb6 <__divmodsi4_exit>:
    1cb6:	08 95       	ret

00001cb8 <__negsi2>:
    1cb8:	90 95       	com	r25
    1cba:	80 95       	com	r24
    1cbc:	70 95       	com	r23
    1cbe:	61 95       	neg	r22
    1cc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc6:	08 95       	ret

00001cc8 <__umulhisi3>:
    1cc8:	a2 9f       	mul	r26, r18
    1cca:	b0 01       	movw	r22, r0
    1ccc:	b3 9f       	mul	r27, r19
    1cce:	c0 01       	movw	r24, r0
    1cd0:	a3 9f       	mul	r26, r19
    1cd2:	70 0d       	add	r23, r0
    1cd4:	81 1d       	adc	r24, r1
    1cd6:	11 24       	eor	r1, r1
    1cd8:	91 1d       	adc	r25, r1
    1cda:	b2 9f       	mul	r27, r18
    1cdc:	70 0d       	add	r23, r0
    1cde:	81 1d       	adc	r24, r1
    1ce0:	11 24       	eor	r1, r1
    1ce2:	91 1d       	adc	r25, r1
    1ce4:	08 95       	ret

00001ce6 <__muluhisi3>:
    1ce6:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__umulhisi3>
    1cea:	a5 9f       	mul	r26, r21
    1cec:	90 0d       	add	r25, r0
    1cee:	b4 9f       	mul	r27, r20
    1cf0:	90 0d       	add	r25, r0
    1cf2:	a4 9f       	mul	r26, r20
    1cf4:	80 0d       	add	r24, r0
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	11 24       	eor	r1, r1
    1cfa:	08 95       	ret

00001cfc <atoi>:
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	88 27       	eor	r24, r24
    1d00:	99 27       	eor	r25, r25
    1d02:	e8 94       	clt
    1d04:	21 91       	ld	r18, Z+
    1d06:	20 32       	cpi	r18, 0x20	; 32
    1d08:	e9 f3       	breq	.-6      	; 0x1d04 <atoi+0x8>
    1d0a:	29 30       	cpi	r18, 0x09	; 9
    1d0c:	10 f0       	brcs	.+4      	; 0x1d12 <atoi+0x16>
    1d0e:	2e 30       	cpi	r18, 0x0E	; 14
    1d10:	c8 f3       	brcs	.-14     	; 0x1d04 <atoi+0x8>
    1d12:	2b 32       	cpi	r18, 0x2B	; 43
    1d14:	41 f0       	breq	.+16     	; 0x1d26 <atoi+0x2a>
    1d16:	2d 32       	cpi	r18, 0x2D	; 45
    1d18:	39 f4       	brne	.+14     	; 0x1d28 <atoi+0x2c>
    1d1a:	68 94       	set
    1d1c:	04 c0       	rjmp	.+8      	; 0x1d26 <atoi+0x2a>
    1d1e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__mulhi_const_10>
    1d22:	82 0f       	add	r24, r18
    1d24:	91 1d       	adc	r25, r1
    1d26:	21 91       	ld	r18, Z+
    1d28:	20 53       	subi	r18, 0x30	; 48
    1d2a:	2a 30       	cpi	r18, 0x0A	; 10
    1d2c:	c0 f3       	brcs	.-16     	; 0x1d1e <atoi+0x22>
    1d2e:	1e f4       	brtc	.+6      	; 0x1d36 <atoi+0x3a>
    1d30:	90 95       	com	r25
    1d32:	81 95       	neg	r24
    1d34:	9f 4f       	sbci	r25, 0xFF	; 255
    1d36:	08 95       	ret

00001d38 <itoa>:
    1d38:	45 32       	cpi	r20, 0x25	; 37
    1d3a:	51 05       	cpc	r21, r1
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <itoa+0xe>
    1d3e:	42 30       	cpi	r20, 0x02	; 2
    1d40:	10 f0       	brcs	.+4      	; 0x1d46 <itoa+0xe>
    1d42:	0c 94 a7 0e 	jmp	0x1d4e	; 0x1d4e <__itoa_ncheck>
    1d46:	fb 01       	movw	r30, r22
    1d48:	10 82       	st	Z, r1
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	08 95       	ret

00001d4e <__itoa_ncheck>:
    1d4e:	bb 27       	eor	r27, r27
    1d50:	4a 30       	cpi	r20, 0x0A	; 10
    1d52:	31 f4       	brne	.+12     	; 0x1d60 <__itoa_ncheck+0x12>
    1d54:	99 23       	and	r25, r25
    1d56:	22 f4       	brpl	.+8      	; 0x1d60 <__itoa_ncheck+0x12>
    1d58:	bd e2       	ldi	r27, 0x2D	; 45
    1d5a:	90 95       	com	r25
    1d5c:	81 95       	neg	r24
    1d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d60:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__utoa_common>

00001d64 <__mulhi_const_10>:
    1d64:	7a e0       	ldi	r23, 0x0A	; 10
    1d66:	97 9f       	mul	r25, r23
    1d68:	90 2d       	mov	r25, r0
    1d6a:	87 9f       	mul	r24, r23
    1d6c:	80 2d       	mov	r24, r0
    1d6e:	91 0d       	add	r25, r1
    1d70:	11 24       	eor	r1, r1
    1d72:	08 95       	ret

00001d74 <__utoa_ncheck>:
    1d74:	bb 27       	eor	r27, r27

00001d76 <__utoa_common>:
    1d76:	fb 01       	movw	r30, r22
    1d78:	55 27       	eor	r21, r21
    1d7a:	aa 27       	eor	r26, r26
    1d7c:	88 0f       	add	r24, r24
    1d7e:	99 1f       	adc	r25, r25
    1d80:	aa 1f       	adc	r26, r26
    1d82:	a4 17       	cp	r26, r20
    1d84:	10 f0       	brcs	.+4      	; 0x1d8a <__utoa_common+0x14>
    1d86:	a4 1b       	sub	r26, r20
    1d88:	83 95       	inc	r24
    1d8a:	50 51       	subi	r21, 0x10	; 16
    1d8c:	b9 f7       	brne	.-18     	; 0x1d7c <__utoa_common+0x6>
    1d8e:	a0 5d       	subi	r26, 0xD0	; 208
    1d90:	aa 33       	cpi	r26, 0x3A	; 58
    1d92:	08 f0       	brcs	.+2      	; 0x1d96 <__utoa_common+0x20>
    1d94:	a9 5d       	subi	r26, 0xD9	; 217
    1d96:	a1 93       	st	Z+, r26
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	79 f7       	brne	.-34     	; 0x1d7a <__utoa_common+0x4>
    1d9c:	b1 11       	cpse	r27, r1
    1d9e:	b1 93       	st	Z+, r27
    1da0:	11 92       	st	Z+, r1
    1da2:	cb 01       	movw	r24, r22
    1da4:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <strrev>

00001da8 <strrev>:
    1da8:	dc 01       	movw	r26, r24
    1daa:	fc 01       	movw	r30, r24
    1dac:	67 2f       	mov	r22, r23
    1dae:	71 91       	ld	r23, Z+
    1db0:	77 23       	and	r23, r23
    1db2:	e1 f7       	brne	.-8      	; 0x1dac <strrev+0x4>
    1db4:	32 97       	sbiw	r30, 0x02	; 2
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <strrev+0x18>
    1db8:	7c 91       	ld	r23, X
    1dba:	6d 93       	st	X+, r22
    1dbc:	70 83       	st	Z, r23
    1dbe:	62 91       	ld	r22, -Z
    1dc0:	ae 17       	cp	r26, r30
    1dc2:	bf 07       	cpc	r27, r31
    1dc4:	c8 f3       	brcs	.-14     	; 0x1db8 <strrev+0x10>
    1dc6:	08 95       	ret

00001dc8 <eeprom_read_byte>:
    1dc8:	f9 99       	sbic	0x1f, 1	; 31
    1dca:	fe cf       	rjmp	.-4      	; 0x1dc8 <eeprom_read_byte>
    1dcc:	92 bd       	out	0x22, r25	; 34
    1dce:	81 bd       	out	0x21, r24	; 33
    1dd0:	f8 9a       	sbi	0x1f, 0	; 31
    1dd2:	99 27       	eor	r25, r25
    1dd4:	80 b5       	in	r24, 0x20	; 32
    1dd6:	08 95       	ret

00001dd8 <eeprom_write_byte>:
    1dd8:	26 2f       	mov	r18, r22

00001dda <eeprom_write_r18>:
    1dda:	f9 99       	sbic	0x1f, 1	; 31
    1ddc:	fe cf       	rjmp	.-4      	; 0x1dda <eeprom_write_r18>
    1dde:	1f ba       	out	0x1f, r1	; 31
    1de0:	92 bd       	out	0x22, r25	; 34
    1de2:	81 bd       	out	0x21, r24	; 33
    1de4:	20 bd       	out	0x20, r18	; 32
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	f8 94       	cli
    1dea:	fa 9a       	sbi	0x1f, 2	; 31
    1dec:	f9 9a       	sbi	0x1f, 1	; 31
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	08 95       	ret

00001df4 <_exit>:
    1df4:	f8 94       	cli

00001df6 <__stop_program>:
    1df6:	ff cf       	rjmp	.-2      	; 0x1df6 <__stop_program>
