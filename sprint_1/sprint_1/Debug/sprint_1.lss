
sprint_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000744  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cb  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d0  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#define F_CPU 1600000UL
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	//variaveis necessarias para o display e contagens das dezenas e centenas
	uint8_t velocidade_veiculo[10] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09}, cont_1 = 0, cont_2 = 0;
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>

	//habilitando portas de entrada e saida para o display e botoes
	DDRC = 0b00000011;
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	87 b9       	out	0x07, r24	; 7
	DDRB = 0b00001111;
  c0:	8f e0       	ldi	r24, 0x0F	; 15
  c2:	84 b9       	out	0x04, r24	; 4
	PORTD |= (1 << 0);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << 1);
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8b b9       	out	0x0b, r24	; 11
#include <util/delay.h>

int main(void)
{
	//variaveis necessarias para o display e contagens das dezenas e centenas
	uint8_t velocidade_veiculo[10] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09}, cont_1 = 0, cont_2 = 0;
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0

	//laco para contagem do velocimetro
	while (1)
	{
		//testa o botao (+) e incrementa as dezenas e centenas em cont_1 e cont_2 respectivamente
		if(!(PIND & (1 << 0)))
  d4:	48 99       	sbic	0x09, 0	; 9
  d6:	07 c0       	rjmp	.+14     	; 0xe6 <main+0x50>
		{
			if(cont_2 <= 2)
  d8:	23 30       	cpi	r18, 0x03	; 3
  da:	08 f4       	brcc	.+2      	; 0xde <main+0x48>
			cont_1++;
  dc:	9f 5f       	subi	r25, 0xFF	; 255
			if(cont_1 == 10)
  de:	9a 30       	cpi	r25, 0x0A	; 10
  e0:	11 f4       	brne	.+4      	; 0xe6 <main+0x50>
			{
				cont_1 = 0;
				cont_2++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
		{
			if(cont_2 <= 2)
			cont_1++;
			if(cont_1 == 10)
			{
				cont_1 = 0;
  e4:	90 e0       	ldi	r25, 0x00	; 0
				cont_2++;
			}
		}

		//testa o botao (-) e decrementa as dezenas e centenas em cont_1 e cont_2 respectivamente
		if(!(PIND & (1 << 1)))
  e6:	49 99       	sbic	0x09, 1	; 9
  e8:	08 c0       	rjmp	.+16     	; 0xfa <main+0x64>
		{
			if(cont_1 == 0 && cont_2 != 0)
  ea:	91 11       	cpse	r25, r1
  ec:	05 c0       	rjmp	.+10     	; 0xf8 <main+0x62>
  ee:	22 23       	and	r18, r18
  f0:	19 f0       	breq	.+6      	; 0xf8 <main+0x62>
			{
				cont_2--;
  f2:	21 50       	subi	r18, 0x01	; 1
				cont_1 = 10;
  f4:	9a e0       	ldi	r25, 0x0A	; 10
  f6:	01 c0       	rjmp	.+2      	; 0xfa <main+0x64>
			}
			else
			cont_1--;
  f8:	91 50       	subi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	3f ef       	ldi	r19, 0xFF	; 255
  fc:	41 ee       	ldi	r20, 0xE1	; 225
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	31 50       	subi	r19, 0x01	; 1
 102:	40 40       	sbci	r20, 0x00	; 0
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x6a>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x74>
 10a:	00 00       	nop
		}

		_delay_ms(1000);
		PORTC  = velocidade_veiculo [cont_2];
 10c:	e1 e0       	ldi	r30, 0x01	; 1
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	ec 0f       	add	r30, r28
 112:	fd 1f       	adc	r31, r29
 114:	e2 0f       	add	r30, r18
 116:	f1 1d       	adc	r31, r1
 118:	80 81       	ld	r24, Z
 11a:	88 b9       	out	0x08, r24	; 8
		PORTB  = velocidade_veiculo [cont_1];
 11c:	e1 e0       	ldi	r30, 0x01	; 1
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	ec 0f       	add	r30, r28
 122:	fd 1f       	adc	r31, r29
 124:	e9 0f       	add	r30, r25
 126:	f1 1d       	adc	r31, r1
 128:	80 81       	ld	r24, Z
 12a:	85 b9       	out	0x05, r24	; 5
		PORTD |= velocidade_veiculo[0];
 12c:	3b b1       	in	r19, 0x0b	; 11
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	83 2b       	or	r24, r19
 132:	8b b9       	out	0x0b, r24	; 11
	}
 134:	cf cf       	rjmp	.-98     	; 0xd4 <main+0x3e>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
