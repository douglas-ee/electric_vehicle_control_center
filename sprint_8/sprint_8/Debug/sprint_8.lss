
sprint_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00001c82  00001d16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000437  0080012e  0080012e  00001d44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001db8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000041a9  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c89  00000000  00000000  00006209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000213e  00000000  00000000  00006e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  00008fd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d22  00000000  00000000  00009a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004495  00000000  00000000  0000a7b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000ec4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__ctors_end>
       4:	0c 94 90 02 	jmp	0x520	; 0x520 <__vector_1>
       8:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
       c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      10:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      14:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_5>
      18:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      1c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      20:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      24:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      28:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_10>
      2c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      30:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      34:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_13>
      38:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_14>
      3c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      40:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      44:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      48:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      4c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      50:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      54:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      58:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      5c:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      60:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>
      64:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__bad_interrupt>

00000068 <Font5x8>:
      68:	05 00 00 00 00 00 05 00 00 5f 00 00 05 00 07 00     ........._......
      78:	07 00 05 14 7f 14 7f 14 05 24 2a 7f 2a 12 05 23     .........$*.*..#
      88:	13 08 64 62 05 36 49 56 20 50 05 08 07 03 00 00     ..db.6IV P......
      98:	05 00 1c 22 41 00 05 00 41 22 1c 00 05 14 08 3e     ..."A...A".....>
      a8:	08 14 05 08 08 3e 08 08 05 00 b0 70 00 00 05 08     .....>.....p....
      b8:	08 08 08 08 05 00 60 60 00 00 05 20 10 08 04 02     ......``... ....
      c8:	05 3e 51 49 45 3e 05 00 42 7f 40 00 05 72 49 49     .>QIE>..B.@..rII
      d8:	49 46 05 21 41 49 4d 33 05 18 14 12 7f 10 05 27     IF.!AIM3.......'
      e8:	45 45 45 39 05 3c 4a 49 49 31 05 41 21 11 09 07     EEE9.<JII1.A!...
      f8:	05 36 49 49 49 36 05 46 49 49 29 1e 05 00 00 14     .6III6.FII).....
     108:	00 00 05 00 40 34 00 00 05 08 14 22 41 00 05 14     ....@4....."A...
     118:	14 14 14 14 05 41 22 14 08 00 05 02 01 59 09 06     .....A"......Y..
     128:	05 3e 41 5d 59 4e 05 7c 12 11 12 7c 05 7f 49 49     .>A]YN.|...|..II
     138:	49 36 05 3e 41 41 41 22 05 7f 41 41 41 3e 05 7f     I6.>AAA"..AAA>..
     148:	49 49 49 49 05 7f 09 09 09 09 05 3e 41 41 51 73     IIII.......>AAQs
     158:	05 7f 08 08 08 7f 05 00 41 7f 41 00 05 20 40 41     ........A.A.. @A
     168:	3f 01 05 7f 08 14 22 41 05 7f 40 40 40 40 05 7f     ?....."A..@@@@..
     178:	02 0c 02 7f 05 7f 04 08 10 7f 05 3e 41 41 41 3e     ...........>AAA>
     188:	05 7f 09 09 09 06 05 3e 41 51 21 5e 05 7f 09 19     .......>AQ!^....
     198:	29 46 05 26 49 49 49 32 05 01 01 7f 01 01 05 3f     )F.&III2.......?
     1a8:	40 40 40 3f 05 1f 20 40 20 1f 05 3f 40 38 40 3f     @@@?.. @ ..?@8@?
     1b8:	05 63 14 08 14 63 05 03 04 78 04 03 05 61 51 49     .c...c...x...aQI
     1c8:	45 43 05 00 7f 41 41 00 05 02 04 08 10 20 05 00     EC...AA...... ..
     1d8:	41 41 7f 00 05 04 02 01 02 04 05 40 40 40 40 40     AA.........@@@@@
     1e8:	05 07 0b 00 00 00 05 20 54 54 78 40 05 7f 28 44     ....... TTx@..(D
     1f8:	44 38 05 38 44 44 44 28 05 38 44 44 28 7f 05 38     D8.8DDD(.8DD(..8
     208:	54 54 54 18 05 00 08 7e 09 02 05 18 a4 a4 9c 78     TTT....~.......x
     218:	05 7f 08 04 04 78 05 00 44 7d 40 00 05 20 40 40     .....x..D}@.. @@
     228:	3d 00 05 7f 10 28 44 00 05 00 41 7f 40 00 05 7c     =....(D...A.@..|
     238:	04 78 04 78 05 7c 08 04 04 78 05 38 44 44 44 38     .x.x.|...x.8DDD8
     248:	05 fc 18 24 24 18 05 18 24 24 18 fc 05 7c 08 04     ...$$...$$...|..
     258:	04 08 05 48 54 54 54 24 05 04 04 3f 44 24 05 3c     ...HTTT$...?D$.<
     268:	40 40 20 7c 05 1c 20 40 20 1c 05 3c 40 30 40 3c     @@ |.. @ ..<@0@<
     278:	05 44 28 10 28 44 05 4c 90 90 90 7c 05 44 64 54     .D(.(D.L...|.DdT
     288:	4c 44 05 00 08 36 41 00 05 00 00 77 00 00 05 00     LD...6A....w....
     298:	41 36 08 00 05 04 02 04 08 04 05 00 7f 41 7f 00     A6...........A..

000002a8 <__ctors_end>:
     2a8:	11 24       	eor	r1, r1
     2aa:	1f be       	out	0x3f, r1	; 63
     2ac:	cf ef       	ldi	r28, 0xFF	; 255
     2ae:	d8 e0       	ldi	r29, 0x08	; 8
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	cd bf       	out	0x3d, r28	; 61

000002b4 <__do_copy_data>:
     2b4:	11 e0       	ldi	r17, 0x01	; 1
     2b6:	a0 e0       	ldi	r26, 0x00	; 0
     2b8:	b1 e0       	ldi	r27, 0x01	; 1
     2ba:	e2 e8       	ldi	r30, 0x82	; 130
     2bc:	fc e1       	ldi	r31, 0x1C	; 28
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <__do_copy_data+0x10>
     2c0:	05 90       	lpm	r0, Z+
     2c2:	0d 92       	st	X+, r0
     2c4:	ae 32       	cpi	r26, 0x2E	; 46
     2c6:	b1 07       	cpc	r27, r17
     2c8:	d9 f7       	brne	.-10     	; 0x2c0 <__do_copy_data+0xc>

000002ca <__do_clear_bss>:
     2ca:	25 e0       	ldi	r18, 0x05	; 5
     2cc:	ae e2       	ldi	r26, 0x2E	; 46
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <.do_clear_bss_start>

000002d2 <.do_clear_bss_loop>:
     2d2:	1d 92       	st	X+, r1

000002d4 <.do_clear_bss_start>:
     2d4:	a5 36       	cpi	r26, 0x65	; 101
     2d6:	b2 07       	cpc	r27, r18
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <.do_clear_bss_loop>
     2da:	0e 94 c4 05 	call	0xb88	; 0xb88 <main>
     2de:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <_exit>

000002e2 <__bad_interrupt>:
     2e2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e6 <configuracao>:
#define _CONFIGURACAO_H_

void configuracao()
{
	// definicao da GPIO
	DDRB	|= 0b11111110;	// habilita os pinos PD0..6 como saidas
     2e6:	84 b1       	in	r24, 0x04	; 4
     2e8:	8e 6f       	ori	r24, 0xFE	; 254
     2ea:	84 b9       	out	0x04, r24	; 4
	DDRD	&= 0b11000010;	// habilita os pinos PD2 ate PD5 como entradas
     2ec:	8a b1       	in	r24, 0x0a	; 10
     2ee:	82 7c       	andi	r24, 0xC2	; 194
     2f0:	8a b9       	out	0x0a, r24	; 10

	// pull ups das entradas
	PORTD	= 0b00111101;	// habilita o resistor de Pull-up de PD2 ate PD5
     2f2:	8d e3       	ldi	r24, 0x3D	; 61
     2f4:	8b b9       	out	0x0b, r24	; 11

	// configuracao das interrupoes externas
	EICRA	= 0b10000010;	// interrupao externa INT0 e INT1 na borda de descida
     2f6:	e9 e6       	ldi	r30, 0x69	; 105
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	82 e8       	ldi	r24, 0x82	; 130
     2fc:	80 83       	st	Z, r24
	EIMSK	= 0b00000001;	// habilita a interrupcao externa INT0
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	8d bb       	out	0x1d, r24	; 29
	PCICR	= 0b00000100;	// habilita interrupcao PIN change 2 (porta D)
     302:	94 e0       	ldi	r25, 0x04	; 4
     304:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2	= 0b00110001;	// habilita interrupcao PIN chance PD4 e PD5
     308:	81 e3       	ldi	r24, 0x31	; 49
     30a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>

	EICRA |= 0b10000010;	//Dispara o INT0 na borda de descida
     30e:	80 81       	ld	r24, Z
     310:	82 68       	ori	r24, 0x82	; 130
     312:	80 83       	st	Z, r24

	//configuracao do timer 0
	TCCR0A	= 0b00000010;	// habilita modo CTC do TC0
     314:	82 e0       	ldi	r24, 0x02	; 2
     316:	84 bd       	out	0x24, r24	; 36
	TCCR0B	= 0b00000011;	// liga TC0 com prescaler = 64
     318:	23 e0       	ldi	r18, 0x03	; 3
     31a:	25 bd       	out	0x25, r18	; 37
	OCR0A	= 249;			// ajusta o comparador para TC0 contar ate 249.
     31c:	29 ef       	ldi	r18, 0xF9	; 249
     31e:	27 bd       	out	0x27, r18	; 39
	TIMSK0	= 0b00000010;	// habilita a interrupcao na igualdade de comparacao com OCR0A a cada 1ms = (249 + 1)*64/16MHz
     320:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>

	// configuracao do ADC
	//ADMUX   = 0b01000000;	// Vcc - com referencia do canal PC5
	ADCSRA  = 0b11100111;	// habilita o AD / habilita interrupcao / modo de conversao continua / prescaler - 128
     324:	87 ee       	ldi	r24, 0xE7	; 231
     326:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB  = 0b00000000;	// modo de conversao continua
     32a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0   = 0b00000000;	// habilita o como entradas digitais
     32e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>

	// configuracao do timer T2 para o modo PWM
	TCCR2A = 0b00100011;	// habilita o PWM para o pino PD3
     332:	83 e2       	ldi	r24, 0x23	; 35
     334:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	TCCR2B = 0b00000100;	// prescaler - 64
     338:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TCCR1B = (1 << ICES1) | (1 << CS12); // captura - borda de subida, TC1 com prescaler = 256
     33c:	84 e4       	ldi	r24, 0x44	; 68
     33e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TIMSK1 = (1 << ICIE1) | (1 << TOIE1); // habilita interrupcao por captura
     342:	81 e2       	ldi	r24, 0x21	; 33
     344:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>

	sei();
     348:	78 94       	sei
     34a:	08 95       	ret

0000034c <__vector_14>:
		}
	}
}

ISR(TIMER0_COMPA_vect)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	2f 93       	push	r18
     360:	3f 93       	push	r19
     362:	4f 93       	push	r20
     364:	5f 93       	push	r21
     366:	6f 93       	push	r22
     368:	7f 93       	push	r23
     36a:	8f 93       	push	r24
     36c:	9f 93       	push	r25
     36e:	af 93       	push	r26
     370:	bf 93       	push	r27
     372:	ef 93       	push	r30
     374:	ff 93       	push	r31
	tempo_ms++;
     376:	c0 90 41 01 	lds	r12, 0x0141	; 0x800141 <tempo_ms>
     37a:	d0 90 42 01 	lds	r13, 0x0142	; 0x800142 <tempo_ms+0x1>
     37e:	e0 90 43 01 	lds	r14, 0x0143	; 0x800143 <tempo_ms+0x2>
     382:	f0 90 44 01 	lds	r15, 0x0144	; 0x800144 <tempo_ms+0x3>
     386:	8f ef       	ldi	r24, 0xFF	; 255
     388:	c8 1a       	sub	r12, r24
     38a:	d8 0a       	sbc	r13, r24
     38c:	e8 0a       	sbc	r14, r24
     38e:	f8 0a       	sbc	r15, r24
     390:	c0 92 41 01 	sts	0x0141, r12	; 0x800141 <tempo_ms>
     394:	d0 92 42 01 	sts	0x0142, r13	; 0x800142 <tempo_ms+0x1>
     398:	e0 92 43 01 	sts	0x0143, r14	; 0x800143 <tempo_ms+0x2>
     39c:	f0 92 44 01 	sts	0x0144, r15	; 0x800144 <tempo_ms+0x3>
	//PORTD ^= 0b01000000;
	if((tempo_ms % 5) == 0)		//true a cada 5ms
     3a0:	c7 01       	movw	r24, r14
     3a2:	b6 01       	movw	r22, r12
     3a4:	25 e0       	ldi	r18, 0x05	; 5
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     3b0:	67 2b       	or	r22, r23
     3b2:	68 2b       	or	r22, r24
     3b4:	69 2b       	or	r22, r25
     3b6:	19 f4       	brne	.+6      	; 0x3be <__vector_14+0x72>
		flag_5ms = 1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <flag_5ms>
	if((tempo_ms % 500) == 0)	//true a cada 500ms
     3be:	c7 01       	movw	r24, r14
     3c0:	b6 01       	movw	r22, r12
     3c2:	24 ef       	ldi	r18, 0xF4	; 244
     3c4:	31 e0       	ldi	r19, 0x01	; 1
     3c6:	40 e0       	ldi	r20, 0x00	; 0
     3c8:	50 e0       	ldi	r21, 0x00	; 0
     3ca:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     3ce:	67 2b       	or	r22, r23
     3d0:	68 2b       	or	r22, r24
     3d2:	69 2b       	or	r22, r25
     3d4:	19 f4       	brne	.+6      	; 0x3dc <__vector_14+0x90>
		flag_500ms = 1;
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <flag_500ms>
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	ff 90       	pop	r15
     3f6:	ef 90       	pop	r14
     3f8:	df 90       	pop	r13
     3fa:	cf 90       	pop	r12
     3fc:	0f 90       	pop	r0
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	0f 90       	pop	r0
     402:	1f 90       	pop	r1
     404:	18 95       	reti

00000406 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
     406:	1f 92       	push	r1
     408:	0f 92       	push	r0
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	0f 92       	push	r0
     40e:	11 24       	eor	r1, r1
     410:	8f 93       	push	r24
	flag_over_flow = 1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <flag_over_flow>
}
     418:	8f 91       	pop	r24
     41a:	0f 90       	pop	r0
     41c:	0f be       	out	0x3f, r0	; 63
     41e:	0f 90       	pop	r0
     420:	1f 90       	pop	r1
     422:	18 95       	reti

00000424 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
     424:	1f 92       	push	r1
     426:	0f 92       	push	r0
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	0f 92       	push	r0
     42c:	11 24       	eor	r1, r1
     42e:	2f 93       	push	r18
     430:	3f 93       	push	r19
     432:	4f 93       	push	r20
     434:	5f 93       	push	r21
     436:	6f 93       	push	r22
     438:	7f 93       	push	r23
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	af 93       	push	r26
     440:	bf 93       	push	r27
     442:	ef 93       	push	r30
     444:	ff 93       	push	r31
	if(TCCR1B & (1 << ICES1))
     446:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     44a:	86 ff       	sbrs	r24, 6
     44c:	0f c0       	rjmp	.+30     	; 0x46c <__vector_10+0x48>
		tempo_up = ICR1;
     44e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     452:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <tempo_up>
     45e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <tempo_up+0x1>
     462:	a0 93 4b 01 	sts	0x014B, r26	; 0x80014b <tempo_up+0x2>
     466:	b0 93 4c 01 	sts	0x014C, r27	; 0x80014c <tempo_up+0x3>
     46a:	2a c0       	rjmp	.+84     	; 0x4c0 <__vector_10+0x9c>
	else
		tempo_down = ((ICR1 - tempo_up) * 16);
     46c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     470:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     474:	a0 e0       	ldi	r26, 0x00	; 0
     476:	b0 e0       	ldi	r27, 0x00	; 0
     478:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <tempo_up>
     47c:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <tempo_up+0x1>
     480:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <tempo_up+0x2>
     484:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <tempo_up+0x3>
     488:	84 1b       	sub	r24, r20
     48a:	95 0b       	sbc	r25, r21
     48c:	a6 0b       	sbc	r26, r22
     48e:	b7 0b       	sbc	r27, r23
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	aa 1f       	adc	r26, r26
     496:	bb 1f       	adc	r27, r27
     498:	88 0f       	add	r24, r24
     49a:	99 1f       	adc	r25, r25
     49c:	aa 1f       	adc	r26, r26
     49e:	bb 1f       	adc	r27, r27
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	aa 1f       	adc	r26, r26
     4a6:	bb 1f       	adc	r27, r27
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	aa 1f       	adc	r26, r26
     4ae:	bb 1f       	adc	r27, r27
     4b0:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <tempo_down>
     4b4:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <tempo_down+0x1>
     4b8:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <tempo_down+0x2>
     4bc:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <tempo_down+0x3>

	TCCR1B ^= (1 << ICES1);
     4c0:	e1 e8       	ldi	r30, 0x81	; 129
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
     4c4:	90 81       	ld	r25, Z
     4c6:	80 e4       	ldi	r24, 0x40	; 64
     4c8:	89 27       	eor	r24, r25
     4ca:	80 83       	st	Z, r24

	if(flag_over_flow == 0)
     4cc:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <flag_over_flow>
     4d0:	81 11       	cpse	r24, r1
     4d2:	13 c0       	rjmp	.+38     	; 0x4fa <__vector_10+0xd6>
		Distancia_objeto_cm = (tempo_down / 58);
     4d4:	60 91 45 01 	lds	r22, 0x0145	; 0x800145 <tempo_down>
     4d8:	70 91 46 01 	lds	r23, 0x0146	; 0x800146 <tempo_down+0x1>
     4dc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <tempo_down+0x2>
     4e0:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <tempo_down+0x3>
     4e4:	2a e3       	ldi	r18, 0x3A	; 58
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     4f0:	30 93 52 01 	sts	0x0152, r19	; 0x800152 <Distancia_objeto_cm+0x1>
     4f4:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <Distancia_objeto_cm>
     4f8:	02 c0       	rjmp	.+4      	; 0x4fe <__vector_10+0xda>
	else
		flag_over_flow = 0;
     4fa:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <flag_over_flow>
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	bf 91       	pop	r27
     504:	af 91       	pop	r26
     506:	9f 91       	pop	r25
     508:	8f 91       	pop	r24
     50a:	7f 91       	pop	r23
     50c:	6f 91       	pop	r22
     50e:	5f 91       	pop	r21
     510:	4f 91       	pop	r20
     512:	3f 91       	pop	r19
     514:	2f 91       	pop	r18
     516:	0f 90       	pop	r0
     518:	0f be       	out	0x3f, r0	; 63
     51a:	0f 90       	pop	r0
     51c:	1f 90       	pop	r1
     51e:	18 95       	reti

00000520 <__vector_1>:

ISR(INT0_vect) // tacometro
{
     520:	1f 92       	push	r1
     522:	0f 92       	push	r0
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	0f 92       	push	r0
     528:	11 24       	eor	r1, r1
     52a:	cf 92       	push	r12
     52c:	df 92       	push	r13
     52e:	ef 92       	push	r14
     530:	ff 92       	push	r15
     532:	2f 93       	push	r18
     534:	3f 93       	push	r19
     536:	4f 93       	push	r20
     538:	5f 93       	push	r21
     53a:	6f 93       	push	r22
     53c:	7f 93       	push	r23
     53e:	8f 93       	push	r24
     540:	9f 93       	push	r25
     542:	af 93       	push	r26
     544:	bf 93       	push	r27
     546:	ef 93       	push	r30
     548:	ff 93       	push	r31
	// variaveis locais
	static uint8_t cont_5voltas = 0;
	static uint32_t tempo_ms_anterior = 0;
	uint16_t delta_t_ms = 0;

	if(cont_5voltas == 5) // se cont_5voltas == 5, faca true
     54a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <cont_5voltas.2603>
     54e:	85 30       	cpi	r24, 0x05	; 5
     550:	b9 f5       	brne	.+110    	; 0x5c0 <__vector_1+0xa0>
	{
		delta_t_ms = tempo_ms - tempo_ms_anterior;									// equacao delta_t = t1 - t0
     552:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tempo_ms>
     556:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <tempo_ms+0x1>
     55a:	a0 91 43 01 	lds	r26, 0x0143	; 0x800143 <tempo_ms+0x2>
     55e:	b0 91 44 01 	lds	r27, 0x0144	; 0x800144 <tempo_ms+0x3>
     562:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <tempo_ms_anterior.2604>
     566:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <tempo_ms_anterior.2604+0x1>
     56a:	6c 01       	movw	r12, r24
     56c:	c2 1a       	sub	r12, r18
     56e:	d3 0a       	sbc	r13, r19
		tempo_ms_anterior = tempo_ms;
     570:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <tempo_ms_anterior.2604>
     574:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <tempo_ms_anterior.2604+0x1>
     578:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <tempo_ms_anterior.2604+0x2>
     57c:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <tempo_ms_anterior.2604+0x3>
		RPM_motor = 300000 / (delta_t_ms);											// equacao rpm = (5voltas*60min*1000ms)/delta_t
     580:	e1 2c       	mov	r14, r1
     582:	f1 2c       	mov	r15, r1
     584:	60 ee       	ldi	r22, 0xE0	; 224
     586:	73 e9       	ldi	r23, 0x93	; 147
     588:	84 e0       	ldi	r24, 0x04	; 4
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	a7 01       	movw	r20, r14
     58e:	96 01       	movw	r18, r12
     590:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__divmodsi4>
     594:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <RPM_motor+0x1>
     598:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <RPM_motor>
		Velocidade_carro_kmH = ((uint32_t)Diametro_pneu_cm * 565) / delta_t_ms;		// equacao velocidade = (PI*3.6)/(60*100)
     59c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     5a0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5a4:	a5 e3       	ldi	r26, 0x35	; 53
     5a6:	b2 e0       	ldi	r27, 0x02	; 2
     5a8:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
     5ac:	a7 01       	movw	r20, r14
     5ae:	96 01       	movw	r18, r12
     5b0:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     5b4:	30 93 58 01 	sts	0x0158, r19	; 0x800158 <Velocidade_carro_kmH+0x1>
     5b8:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <Velocidade_carro_kmH>
		tempo_ms_anterior = tempo_ms;												// armazenando valor do tempo
		cont_5voltas = 0;
     5bc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <cont_5voltas.2603>
	}
	if(Velocidade_carro_kmH > 20 && Distancia_objeto_cm < 300)
     5c0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Velocidade_carro_kmH>
     5c4:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Velocidade_carro_kmH+0x1>
     5c8:	45 97       	sbiw	r24, 0x15	; 21
     5ca:	10 f1       	brcs	.+68     	; 0x610 <__vector_1+0xf0>
     5cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <Distancia_objeto_cm>
     5d0:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <Distancia_objeto_cm+0x1>
     5d4:	8c 32       	cpi	r24, 0x2C	; 44
     5d6:	91 40       	sbci	r25, 0x01	; 1
     5d8:	d8 f4       	brcc	.+54     	; 0x610 <__vector_1+0xf0>
		acelerador_sub = (acelerador * 255) / 10230;								// equacao de conversao para o potenciometro
     5da:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <acelerador>
     5de:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <acelerador+0x1>
     5e2:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <acelerador+0x2>
     5e6:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <acelerador+0x3>
     5ea:	af ef       	ldi	r26, 0xFF	; 255
     5ec:	b0 e0       	ldi	r27, 0x00	; 0
     5ee:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__muluhisi3>
     5f2:	26 ef       	ldi	r18, 0xF6	; 246
     5f4:	37 e2       	ldi	r19, 0x27	; 39
     5f6:	40 e0       	ldi	r20, 0x00	; 0
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     5fe:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <acelerador_sub>
     602:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <acelerador_sub+0x1>
     606:	40 93 3b 01 	sts	0x013B, r20	; 0x80013b <acelerador_sub+0x2>
     60a:	50 93 3c 01 	sts	0x013C, r21	; 0x80013c <acelerador_sub+0x3>
     60e:	1a c0       	rjmp	.+52     	; 0x644 <__vector_1+0x124>
	else
		acelerador_sub = (acelerador * 255) / 1023;									// equacao de conversao para o potenciometro
     610:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <acelerador>
     614:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <acelerador+0x1>
     618:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <acelerador+0x2>
     61c:	50 91 40 01 	lds	r21, 0x0140	; 0x800140 <acelerador+0x3>
     620:	af ef       	ldi	r26, 0xFF	; 255
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__muluhisi3>
     628:	2f ef       	ldi	r18, 0xFF	; 255
     62a:	33 e0       	ldi	r19, 0x03	; 3
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     634:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <acelerador_sub>
     638:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <acelerador_sub+0x1>
     63c:	40 93 3b 01 	sts	0x013B, r20	; 0x80013b <acelerador_sub+0x2>
     640:	50 93 3c 01 	sts	0x013C, r21	; 0x80013c <acelerador_sub+0x3>

	cont_5voltas++;
     644:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <cont_5voltas.2603>
     648:	8f 5f       	subi	r24, 0xFF	; 255
     64a:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <cont_5voltas.2603>
	Distancia_hodometro_km_pass += (Diametro_pneu_cm * PI);							// equacao da distancia
     64e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     652:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatunsisf>
     65e:	23 e2       	ldi	r18, 0x23	; 35
     660:	30 e1       	ldi	r19, 0x10	; 16
     662:	49 e4       	ldi	r20, 0x49	; 73
     664:	50 e4       	ldi	r21, 0x40	; 64
     666:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     66a:	6b 01       	movw	r12, r22
     66c:	7c 01       	movw	r14, r24
     66e:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <Distancia_hodometro_km_pass>
     672:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <Distancia_hodometro_km_pass+0x1>
     676:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <Distancia_hodometro_km_pass+0x2>
     67a:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <Distancia_hodometro_km_pass+0x3>
     67e:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatunsisf>
     682:	a7 01       	movw	r20, r14
     684:	96 01       	movw	r18, r12
     686:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__addsf3>
     68a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fixunssfsi>
     68e:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <Distancia_hodometro_km_pass>
     692:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <Distancia_hodometro_km_pass+0x1>
     696:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Distancia_hodometro_km_pass+0x2>
     69a:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Distancia_hodometro_km_pass+0x3>
	Distancia_hodometro_km = Distancia_hodometro_km_pass / 100000;					// equacao de distancia passando valores
     69e:	20 ea       	ldi	r18, 0xA0	; 160
     6a0:	36 e8       	ldi	r19, 0x86	; 134
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
     6aa:	30 93 54 01 	sts	0x0154, r19	; 0x800154 <Distancia_hodometro_km+0x1>
     6ae:	20 93 53 01 	sts	0x0153, r18	; 0x800153 <Distancia_hodometro_km>
}
     6b2:	ff 91       	pop	r31
     6b4:	ef 91       	pop	r30
     6b6:	bf 91       	pop	r27
     6b8:	af 91       	pop	r26
     6ba:	9f 91       	pop	r25
     6bc:	8f 91       	pop	r24
     6be:	7f 91       	pop	r23
     6c0:	6f 91       	pop	r22
     6c2:	5f 91       	pop	r21
     6c4:	4f 91       	pop	r20
     6c6:	3f 91       	pop	r19
     6c8:	2f 91       	pop	r18
     6ca:	ff 90       	pop	r15
     6cc:	ef 90       	pop	r14
     6ce:	df 90       	pop	r13
     6d0:	cf 90       	pop	r12
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_5>:

ISR(PCINT2_vect)  // interrupcao externa para os pinos D
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
	if(!(PIND & 0b00010000)) // botao [+] - PD4
     6ea:	4c 99       	sbic	0x09, 4	; 9
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <__vector_5+0x2a>
	{
		if(Diametro_pneu_cm < 200)	// limitando o diametro max em 200cm
     6ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6f6:	88 3c       	cpi	r24, 0xC8	; 200
     6f8:	91 05       	cpc	r25, r1
     6fa:	28 f4       	brcc	.+10     	; 0x706 <__vector_5+0x2a>
		{
			Diametro_pneu_cm++;
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     702:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	if(!(PIND & 0b00100000)) // botao [-] - PD5
     706:	4d 99       	sbic	0x09, 5	; 9
     708:	0c c0       	rjmp	.+24     	; 0x722 <__vector_5+0x46>
	{
		if(Diametro_pneu_cm > 1)	// limitando o diametro min em 1cm
     70a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     70e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     712:	82 30       	cpi	r24, 0x02	; 2
     714:	91 05       	cpc	r25, r1
     716:	28 f0       	brcs	.+10     	; 0x722 <__vector_5+0x46>
		{
			Diametro_pneu_cm--;
     718:	01 97       	sbiw	r24, 0x01	; 1
     71a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     71e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	// condicao para zerar os valores, apenas teste
	if(!(PIND & 0b00000001)) // botao [0] - PD0
     722:	48 99       	sbic	0x09, 0	; 9
     724:	0c c0       	rjmp	.+24     	; 0x73e <__vector_5+0x62>
	{
		Diametro_pneu_cm = 0;
     726:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     72a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		Distancia_hodometro_km_pass = 0;
     72e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Distancia_hodometro_km_pass>
     732:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <Distancia_hodometro_km_pass+0x1>
     736:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <Distancia_hodometro_km_pass+0x2>
     73a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <Distancia_hodometro_km_pass+0x3>
	}

}
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	0f 90       	pop	r0
     744:	0f be       	out	0x3f, r0	; 63
     746:	0f 90       	pop	r0
     748:	1f 90       	pop	r1
     74a:	18 95       	reti

0000074c <anima_velocidade>:

void anima_velocidade(uint16_t velocidade_carro, uint8_t *flag_disparo)
{
     74c:	cf 93       	push	r28
     74e:	ac 01       	movw	r20, r24
     750:	fb 01       	movw	r30, r22
	static int8_t cont_dig = 0; // contador
	if(*flag_disparo)			// *flag_disparo = &flag_5ms (sempre que &flag_5ms for true ele dispara
     752:	80 81       	ld	r24, Z
     754:	88 23       	and	r24, r24
     756:	09 f4       	brne	.+2      	; 0x75a <anima_velocidade+0xe>
     758:	99 c0       	rjmp	.+306    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
	{
		switch(cont_dig)
     75a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <cont_dig.2615>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	59 f1       	breq	.+86     	; 0x7b8 <anima_velocidade+0x6c>
     762:	82 30       	cpi	r24, 0x02	; 2
     764:	09 f4       	brne	.+2      	; 0x768 <anima_velocidade+0x1c>
     766:	58 c0       	rjmp	.+176    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     768:	81 11       	cpse	r24, r1
     76a:	8a c0       	rjmp	.+276    	; 0x880 <__DATA_REGION_LENGTH__+0x80>
		{
		case 0:
			PORTB &= 0b00000001; // resetando PB1 - PB7
     76c:	85 b1       	in	r24, 0x05	; 5
     76e:	81 70       	andi	r24, 0x01	; 1
     770:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b11000000; // resetando PB4, pino que habilita o display das unidades
     772:	85 b1       	in	r24, 0x05	; 5
     774:	80 6c       	ori	r24, 0xC0	; 192
     776:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 1) % 10) & 0b00001111) << 1); // separa o digito das unidades e coloca em PB0 - PB3
     778:	c5 b1       	in	r28, 0x05	; 5
     77a:	9a 01       	movw	r18, r20
     77c:	ad ec       	ldi	r26, 0xCD	; 205
     77e:	bc ec       	ldi	r27, 0xCC	; 204
     780:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	96 95       	lsr	r25
     78a:	87 95       	ror	r24
     78c:	96 95       	lsr	r25
     78e:	87 95       	ror	r24
     790:	9c 01       	movw	r18, r24
     792:	22 0f       	add	r18, r18
     794:	33 1f       	adc	r19, r19
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	9a 01       	movw	r18, r20
     7a8:	28 1b       	sub	r18, r24
     7aa:	39 0b       	sbc	r19, r25
     7ac:	c9 01       	movw	r24, r18
     7ae:	8f 70       	andi	r24, 0x0F	; 15
     7b0:	88 0f       	add	r24, r24
     7b2:	8c 2b       	or	r24, r28
     7b4:	85 b9       	out	0x05, r24	; 5
			break;
     7b6:	64 c0       	rjmp	.+200    	; 0x880 <__DATA_REGION_LENGTH__+0x80>

		case 1:
			PORTB &= 0b00000001; // resetando PB1 - PB7
     7b8:	85 b1       	in	r24, 0x05	; 5
     7ba:	81 70       	andi	r24, 0x01	; 1
     7bc:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b10100000; // resetando PB5 e PB7, pino que habilita o display das dezenas
     7be:	85 b1       	in	r24, 0x05	; 5
     7c0:	80 6a       	ori	r24, 0xA0	; 160
     7c2:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 10) % 10) & 0b00001111) << 1); // separa o digito das unidades e coloca em PB0 - PB3
     7c4:	c5 b1       	in	r28, 0x05	; 5
     7c6:	9a 01       	movw	r18, r20
     7c8:	ad ec       	ldi	r26, 0xCD	; 205
     7ca:	bc ec       	ldi	r27, 0xCC	; 204
     7cc:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
     7d0:	ac 01       	movw	r20, r24
     7d2:	56 95       	lsr	r21
     7d4:	47 95       	ror	r20
     7d6:	56 95       	lsr	r21
     7d8:	47 95       	ror	r20
     7da:	56 95       	lsr	r21
     7dc:	47 95       	ror	r20
     7de:	9a 01       	movw	r18, r20
     7e0:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	96 95       	lsr	r25
     7ea:	87 95       	ror	r24
     7ec:	96 95       	lsr	r25
     7ee:	87 95       	ror	r24
     7f0:	9c 01       	movw	r18, r24
     7f2:	22 0f       	add	r18, r18
     7f4:	33 1f       	adc	r19, r19
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	9a 01       	movw	r18, r20
     808:	28 1b       	sub	r18, r24
     80a:	39 0b       	sbc	r19, r25
     80c:	c9 01       	movw	r24, r18
     80e:	8f 70       	andi	r24, 0x0F	; 15
     810:	88 0f       	add	r24, r24
     812:	8c 2b       	or	r24, r28
     814:	85 b9       	out	0x05, r24	; 5
			break;
     816:	34 c0       	rjmp	.+104    	; 0x880 <__DATA_REGION_LENGTH__+0x80>

		case 2:
			PORTB &= 0b00000001; // resetando PB1 - PB7
     818:	85 b1       	in	r24, 0x05	; 5
     81a:	81 70       	andi	r24, 0x01	; 1
     81c:	85 b9       	out	0x05, r24	; 5
			PORTB |= 0b01100000; // resetando PB5 e PB7, pino que habilita o display das centenas
     81e:	85 b1       	in	r24, 0x05	; 5
     820:	80 66       	ori	r24, 0x60	; 96
     822:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((((velocidade_carro / 100) % 10) & 0b00001111) << 1); // separa o digito das unidades e coloca em PB0 - PB3
     824:	c5 b1       	in	r28, 0x05	; 5
     826:	9a 01       	movw	r18, r20
     828:	36 95       	lsr	r19
     82a:	27 95       	ror	r18
     82c:	36 95       	lsr	r19
     82e:	27 95       	ror	r18
     830:	ab e7       	ldi	r26, 0x7B	; 123
     832:	b4 e1       	ldi	r27, 0x14	; 20
     834:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
     838:	ac 01       	movw	r20, r24
     83a:	56 95       	lsr	r21
     83c:	47 95       	ror	r20
     83e:	9a 01       	movw	r18, r20
     840:	ad ec       	ldi	r26, 0xCD	; 205
     842:	bc ec       	ldi	r27, 0xCC	; 204
     844:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
     848:	96 95       	lsr	r25
     84a:	87 95       	ror	r24
     84c:	96 95       	lsr	r25
     84e:	87 95       	ror	r24
     850:	96 95       	lsr	r25
     852:	87 95       	ror	r24
     854:	9c 01       	movw	r18, r24
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	88 0f       	add	r24, r24
     85c:	99 1f       	adc	r25, r25
     85e:	88 0f       	add	r24, r24
     860:	99 1f       	adc	r25, r25
     862:	88 0f       	add	r24, r24
     864:	99 1f       	adc	r25, r25
     866:	82 0f       	add	r24, r18
     868:	93 1f       	adc	r25, r19
     86a:	9a 01       	movw	r18, r20
     86c:	28 1b       	sub	r18, r24
     86e:	39 0b       	sbc	r19, r25
     870:	c9 01       	movw	r24, r18
     872:	8f 70       	andi	r24, 0x0F	; 15
     874:	88 0f       	add	r24, r24
     876:	8c 2b       	or	r24, r28
     878:	85 b9       	out	0x05, r24	; 5
			cont_dig = -1;
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cont_dig.2615>
			break;
		}
		cont_dig++;
     880:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <cont_dig.2615>
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <cont_dig.2615>
		*flag_disparo = 0;
     88a:	10 82       	st	Z, r1
	}
}
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <anima_ADC>:
		GLCD_Render();
	}
}

void anima_ADC(uint16_t *bateria, uint16_t *temperatura, uint8_t *flag_disparo)
{
     890:	8f 92       	push	r8
     892:	9f 92       	push	r9
     894:	af 92       	push	r10
     896:	bf 92       	push	r11
     898:	ef 92       	push	r14
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	9c 01       	movw	r18, r24
	static uint8_t cont_dig = 0;
	if (*flag_disparo)
     8a6:	fa 01       	movw	r30, r20
     8a8:	90 81       	ld	r25, Z
     8aa:	99 23       	and	r25, r25
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <anima_ADC+0x20>
     8ae:	87 c0       	rjmp	.+270    	; 0x9be <__stack+0xbf>
     8b0:	ea 01       	movw	r28, r20
     8b2:	7b 01       	movw	r14, r22
     8b4:	89 01       	movw	r16, r18
	{
		switch(cont_dig)
     8b6:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <__data_end>
     8ba:	91 30       	cpi	r25, 0x01	; 1
     8bc:	d1 f0       	breq	.+52     	; 0x8f2 <anima_ADC+0x62>
     8be:	18 f0       	brcs	.+6      	; 0x8c6 <anima_ADC+0x36>
     8c0:	92 30       	cpi	r25, 0x02	; 2
     8c2:	71 f1       	breq	.+92     	; 0x920 <__stack+0x21>
     8c4:	76 c0       	rjmp	.+236    	; 0x9b2 <__stack+0xb3>
		{
		case 0: // canal 0
			ADMUX = 0b01000000; // ADMUX 0
     8c6:	80 e4       	ldi	r24, 0x40	; 64
     8c8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			acelerador = ADC;
     8cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     8d4:	a0 e0       	ldi	r26, 0x00	; 0
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <acelerador>
     8dc:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <acelerador+0x1>
     8e0:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <acelerador+0x2>
     8e4:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <acelerador+0x3>
			OCR2B = acelerador_sub;
     8e8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <acelerador_sub>
     8ec:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
			break;
     8f0:	60 c0       	rjmp	.+192    	; 0x9b2 <__stack+0xb3>

		case 1: // canal 1
			ADMUX = 0b01000001; // ADMUX 0
     8f2:	81 e4       	ldi	r24, 0x41	; 65
     8f4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			*bateria = (((double)100/1023) * ADC);
     8f8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     8fc:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatunsisf>
     908:	2d e0       	ldi	r18, 0x0D	; 13
     90a:	32 e3       	ldi	r19, 0x32	; 50
     90c:	48 ec       	ldi	r20, 0xC8	; 200
     90e:	5d e3       	ldi	r21, 0x3D	; 61
     910:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     914:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fixunssfsi>
     918:	f8 01       	movw	r30, r16
     91a:	71 83       	std	Z+1, r23	; 0x01
     91c:	60 83       	st	Z, r22
			break;
     91e:	49 c0       	rjmp	.+146    	; 0x9b2 <__stack+0xb3>

		case 2: // canal 2
			ADMUX = 0b01000010; // ADMUX 0
     920:	82 e4       	ldi	r24, 0x42	; 66
     922:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
			*temperatura = (((double)2.6*(((double)1000*(((double)5/1023)*ADC))/(5 - (((double)5/1023)*ADC)))) - 260);	// equacao de temperatura
     926:	08 e7       	ldi	r16, 0x78	; 120
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	f8 01       	movw	r30, r16
     92c:	60 81       	ld	r22, Z
     92e:	71 81       	ldd	r23, Z+1	; 0x01
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatunsisf>
     938:	2a e0       	ldi	r18, 0x0A	; 10
     93a:	38 e2       	ldi	r19, 0x28	; 40
     93c:	40 ea       	ldi	r20, 0xA0	; 160
     93e:	5b e3       	ldi	r21, 0x3B	; 59
     940:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	4a e7       	ldi	r20, 0x7A	; 122
     94a:	54 e4       	ldi	r21, 0x44	; 68
     94c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
     954:	f8 01       	movw	r30, r16
     956:	60 81       	ld	r22, Z
     958:	71 81       	ldd	r23, Z+1	; 0x01
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 6d 0c 	call	0x18da	; 0x18da <__floatunsisf>
     962:	2a e0       	ldi	r18, 0x0A	; 10
     964:	38 e2       	ldi	r19, 0x28	; 40
     966:	40 ea       	ldi	r20, 0xA0	; 160
     968:	5b e3       	ldi	r21, 0x3B	; 59
     96a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	70 e0       	ldi	r23, 0x00	; 0
     976:	80 ea       	ldi	r24, 0xA0	; 160
     978:	90 e4       	ldi	r25, 0x40	; 64
     97a:	0e 94 5f 0b 	call	0x16be	; 0x16be <__subsf3>
     97e:	9b 01       	movw	r18, r22
     980:	ac 01       	movw	r20, r24
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__divsf3>
     98a:	26 e6       	ldi	r18, 0x66	; 102
     98c:	36 e6       	ldi	r19, 0x66	; 102
     98e:	46 e2       	ldi	r20, 0x26	; 38
     990:	50 e4       	ldi	r21, 0x40	; 64
     992:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__mulsf3>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	42 e8       	ldi	r20, 0x82	; 130
     99c:	53 e4       	ldi	r21, 0x43	; 67
     99e:	0e 94 5f 0b 	call	0x16be	; 0x16be <__subsf3>
     9a2:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fixunssfsi>
     9a6:	f7 01       	movw	r30, r14
     9a8:	71 83       	std	Z+1, r23	; 0x01
     9aa:	60 83       	st	Z, r22
			cont_dig = -1;
     9ac:	8f ef       	ldi	r24, 0xFF	; 255
     9ae:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
			break;
		}
		cont_dig++;
     9b2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     9b6:	8f 5f       	subi	r24, 0xFF	; 255
     9b8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
		*flag_disparo = 0;
     9bc:	18 82       	st	Y, r1
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	bf 90       	pop	r11
     9cc:	af 90       	pop	r10
     9ce:	9f 90       	pop	r9
     9d0:	8f 90       	pop	r8
     9d2:	08 95       	ret

000009d4 <anima_LCD>:
		*flag_disparo = 0;
	}
}

void anima_LCD(uint16_t diametro_pneu_cm, uint16_t rpm_motor, uint16_t distancia_hodometro_km, uint16_t distancia_objeto_cm, uint8_t *flag_disparo)
{
     9d4:	8f 92       	push	r8
     9d6:	9f 92       	push	r9
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	cf 92       	push	r12
     9de:	df 92       	push	r13
     9e0:	ef 92       	push	r14
     9e2:	ff 92       	push	r15
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	6c 01       	movw	r12, r24
     9ee:	4b 01       	movw	r8, r22
     9f0:	7a 01       	movw	r14, r20
     9f2:	59 01       	movw	r10, r18
     9f4:	e8 01       	movw	r28, r16
	// chamada do prototipo da funcao
	anima_ADC(&bateria_per, &temperatura_C, &flag_5ms);
     9f6:	4b e5       	ldi	r20, 0x5B	; 91
     9f8:	51 e0       	ldi	r21, 0x01	; 1
     9fa:	6d e4       	ldi	r22, 0x4D	; 77
     9fc:	71 e0       	ldi	r23, 0x01	; 1
     9fe:	8f e4       	ldi	r24, 0x4F	; 79
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	0e 94 48 04 	call	0x890	; 0x890 <anima_ADC>

	if(*flag_disparo)	// *flag_disparo para normalizar no tempo preciso desejado
     a06:	88 81       	ld	r24, Y
     a08:	88 23       	and	r24, r24
     a0a:	09 f4       	brne	.+2      	; 0xa0e <anima_LCD+0x3a>
     a0c:	b0 c0       	rjmp	.+352    	; 0xb6e <anima_LCD+0x19a>
	{

		// iniciando o SSD1306 e configurando o display 
		GLCD_Setup();
     a0e:	0e 94 cb 07 	call	0xf96	; 0xf96 <GLCD_Setup>
		GLCD_SetFont(Font5x8, 5, 8, GLCD_Overwrite);
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	48 e0       	ldi	r20, 0x08	; 8
     a16:	65 e0       	ldi	r22, 0x05	; 5
     a18:	88 e6       	ldi	r24, 0x68	; 104
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 ad 09 	call	0x135a	; 0x135a <GLCD_SetFont>
		GLCD_InvertScreen();
     a20:	0e 94 9d 09 	call	0x133a	; 0x133a <GLCD_InvertScreen>

		GLCD_Clear();
     a24:	0e 94 99 09 	call	0x1332	; 0x1332 <GLCD_Clear>

		GLCD_GotoXY(3, 2);
     a28:	62 e0       	ldi	r22, 0x02	; 2
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintString("LASD Car");
     a30:	82 e0       	ldi	r24, 0x02	; 2
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
		GLCD_DrawRectangle(1, 1, 50, 10 ,GLCD_Black);
     a38:	0f ef       	ldi	r16, 0xFF	; 255
     a3a:	2a e0       	ldi	r18, 0x0A	; 10
     a3c:	42 e3       	ldi	r20, 0x32	; 50
     a3e:	61 e0       	ldi	r22, 0x01	; 1
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	0e 94 2b 09 	call	0x1256	; 0x1256 <GLCD_DrawRectangle>

		GLCD_GotoXY(2, 16);
     a46:	60 e1       	ldi	r22, 0x10	; 16
     a48:	82 e0       	ldi	r24, 0x02	; 2
     a4a:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintInteger(rpm_motor);
     a4e:	b4 01       	movw	r22, r8
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GLCD_PrintInteger>
		GLCD_PrintString(" rpm");
     a58:	8b e0       	ldi	r24, 0x0B	; 11
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
	
		GLCD_GotoXY(2, 27);
     a60:	6b e1       	ldi	r22, 0x1B	; 27
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintString("Sonar: ");
     a68:	80 e1       	ldi	r24, 0x10	; 16
     a6a:	91 e0       	ldi	r25, 0x01	; 1
     a6c:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
		GLCD_PrintInteger(distancia_objeto_cm);
     a70:	b5 01       	movw	r22, r10
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GLCD_PrintInteger>
		GLCD_PrintString("cm");
     a7a:	88 e1       	ldi	r24, 0x18	; 24
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>

		GLCD_GotoXY(2, 40);
     a82:	68 e2       	ldi	r22, 0x28	; 40
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintString("D. Pneu: ");
     a8a:	8b e1       	ldi	r24, 0x1B	; 27
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
		GLCD_PrintInteger(diametro_pneu_cm);
     a92:	b6 01       	movw	r22, r12
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GLCD_PrintInteger>
		GLCD_PrintString("cm");
     a9c:	88 e1       	ldi	r24, 0x18	; 24
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
						
		GLCD_GotoXY(20, 53);
     aa4:	65 e3       	ldi	r22, 0x35	; 53
     aa6:	84 e1       	ldi	r24, 0x14	; 20
     aa8:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintInteger(distancia_hodometro_km);
     aac:	b7 01       	movw	r22, r14
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GLCD_PrintInteger>
		GLCD_PrintString("km");
     ab6:	85 e2       	ldi	r24, 0x25	; 37
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
		GLCD_DrawRectangle(10, 50, 58, 62 ,GLCD_Black);
     abe:	2e e3       	ldi	r18, 0x3E	; 62
     ac0:	4a e3       	ldi	r20, 0x3A	; 58
     ac2:	62 e3       	ldi	r22, 0x32	; 50
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	0e 94 2b 09 	call	0x1256	; 0x1256 <GLCD_DrawRectangle>

		GLCD_DrawRectangle(90, 2, 125, 32 ,GLCD_Black);
     aca:	20 e2       	ldi	r18, 0x20	; 32
     acc:	4d e7       	ldi	r20, 0x7D	; 125
     ace:	62 e0       	ldi	r22, 0x02	; 2
     ad0:	8a e5       	ldi	r24, 0x5A	; 90
     ad2:	0e 94 2b 09 	call	0x1256	; 0x1256 <GLCD_DrawRectangle>
		GLCD_GotoXY(93, 8);
     ad6:	68 e0       	ldi	r22, 0x08	; 8
     ad8:	8d e5       	ldi	r24, 0x5D	; 93
     ada:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintInteger(bateria_per);
     ade:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <bateria_per>
     ae2:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <bateria_per+0x1>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GLCD_PrintInteger>
		GLCD_PrintString(" %");
     aee:	88 e2       	ldi	r24, 0x28	; 40
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>

		GLCD_GotoXY(93, 21);
     af6:	65 e1       	ldi	r22, 0x15	; 21
     af8:	8d e5       	ldi	r24, 0x5D	; 93
     afa:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
		GLCD_PrintInteger(temperatura_C);
     afe:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <temperatura_C>
     b02:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <temperatura_C+0x1>
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <GLCD_PrintInteger>
		GLCD_PrintString(" C");
     b0e:	8b e2       	ldi	r24, 0x2B	; 43
     b10:	91 e0       	ldi	r25, 0x01	; 1
     b12:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>

		GLCD_DrawRectangle(90, 35, 125, 60 ,GLCD_Black);
     b16:	2c e3       	ldi	r18, 0x3C	; 60
     b18:	4d e7       	ldi	r20, 0x7D	; 125
     b1a:	63 e2       	ldi	r22, 0x23	; 35
     b1c:	8a e5       	ldi	r24, 0x5A	; 90
     b1e:	0e 94 2b 09 	call	0x1256	; 0x1256 <GLCD_DrawRectangle>
		GLCD_DrawRectangle(94, 39, 121, 56 ,GLCD_Black);
     b22:	28 e3       	ldi	r18, 0x38	; 56
     b24:	49 e7       	ldi	r20, 0x79	; 121
     b26:	67 e2       	ldi	r22, 0x27	; 39
     b28:	8e e5       	ldi	r24, 0x5E	; 94
     b2a:	0e 94 2b 09 	call	0x1256	; 0x1256 <GLCD_DrawRectangle>

		// condicao responsavel por identificar se o motor_dc se encontra P - parado, ou girando para D - direita, E - esquerda
		if(!(PIND & 0b10000000))
     b2e:	4f 99       	sbic	0x09, 7	; 9
     b30:	07 c0       	rjmp	.+14     	; 0xb40 <anima_LCD+0x16c>
		{
			GLCD_GotoXY(106, 45);
     b32:	6d e2       	ldi	r22, 0x2D	; 45
     b34:	8a e6       	ldi	r24, 0x6A	; 106
     b36:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
			GLCD_PrintChar('P');	// P - parado
     b3a:	80 e5       	ldi	r24, 0x50	; 80
     b3c:	0e 94 cc 09 	call	0x1398	; 0x1398 <GLCD_PrintChar>
		}
		if((PIND & 0b10000000))
     b40:	4f 9b       	sbis	0x09, 7	; 9
     b42:	12 c0       	rjmp	.+36     	; 0xb68 <anima_LCD+0x194>
		{
			if(!(PIND & 0b01000000))
     b44:	4e 99       	sbic	0x09, 6	; 9
     b46:	07 c0       	rjmp	.+14     	; 0xb56 <anima_LCD+0x182>
			{
				GLCD_GotoXY(106, 45);
     b48:	6d e2       	ldi	r22, 0x2D	; 45
     b4a:	8a e6       	ldi	r24, 0x6A	; 106
     b4c:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
				GLCD_PrintChar('D');	// D - direita
     b50:	84 e4       	ldi	r24, 0x44	; 68
     b52:	0e 94 cc 09 	call	0x1398	; 0x1398 <GLCD_PrintChar>
			}
			if((PIND & 0b01000000))
     b56:	4e 9b       	sbis	0x09, 6	; 9
     b58:	07 c0       	rjmp	.+14     	; 0xb68 <anima_LCD+0x194>
			{
				GLCD_GotoXY(106, 45);
     b5a:	6d e2       	ldi	r22, 0x2D	; 45
     b5c:	8a e6       	ldi	r24, 0x6A	; 106
     b5e:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
				GLCD_PrintChar('E');	// E - esquerda
     b62:	85 e4       	ldi	r24, 0x45	; 69
     b64:	0e 94 cc 09 	call	0x1398	; 0x1398 <GLCD_PrintChar>
			}
		}
		*flag_disparo = 0;
     b68:	18 82       	st	Y, r1
		GLCD_Render();
     b6a:	0e 94 94 07 	call	0xf28	; 0xf28 <GLCD_Render>
	}
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	bf 90       	pop	r11
     b80:	af 90       	pop	r10
     b82:	9f 90       	pop	r9
     b84:	8f 90       	pop	r8
     b86:	08 95       	ret

00000b88 <main>:
void anima_velocidade(uint16_t velocidade_carro, uint8_t *flag_disparo);
void anima_LCD(uint16_t diametro_pneu_cm, uint16_t rpm_motor, uint16_t distancia_hodometro_km, uint16_t distancia_objeto_cm, uint8_t *flag_disparo);
void anima_ADC(uint16_t *bateria, uint16_t *temperatura, uint8_t *flag_disparo);

int main(void)
{	
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	60 97       	sbiw	r28, 0x10	; 16
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	f8 94       	cli
     b96:	de bf       	out	0x3e, r29	; 62
     b98:	0f be       	out	0x3f, r0	; 63
     b9a:	cd bf       	out	0x3d, r28	; 61
	// variaveis locais
	unsigned char aux_eeprom[8];
	unsigned char aux_2_eeprom[8];

	configuracao();		// chamando funcao que configura GPIO, interruptores, timers, ADC, PWM
     b9c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <configuracao>
	
	// loop responsavel por separar e ler os dados do diametro que serao armazenados na eeprom, nos espacos 0 ate 3
	for (int i = 0; i < 4; i++)
     ba0:	00 e0       	ldi	r16, 0x00	; 0
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	14 c0       	rjmp	.+40     	; 0xbce <main+0x46>
	{
		aux_eeprom[i] = eeprom_read_byte(i);
     ba6:	c8 01       	movw	r24, r16
     ba8:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <eeprom_read_byte>
     bac:	e1 e0       	ldi	r30, 0x01	; 1
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ec 0f       	add	r30, r28
     bb2:	fd 1f       	adc	r31, r29
     bb4:	e0 0f       	add	r30, r16
     bb6:	f1 1f       	adc	r31, r17
     bb8:	80 83       	st	Z, r24
		Diametro_pneu_cm = atoi(aux_eeprom); // convertendo de char para int
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <atoi>
     bc2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     bc6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	unsigned char aux_2_eeprom[8];

	configuracao();		// chamando funcao que configura GPIO, interruptores, timers, ADC, PWM
	
	// loop responsavel por separar e ler os dados do diametro que serao armazenados na eeprom, nos espacos 0 ate 3
	for (int i = 0; i < 4; i++)
     bca:	0f 5f       	subi	r16, 0xFF	; 255
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	04 30       	cpi	r16, 0x04	; 4
     bd0:	11 05       	cpc	r17, r1
     bd2:	4c f3       	brlt	.-46     	; 0xba6 <main+0x1e>
     bd4:	04 e0       	ldi	r16, 0x04	; 4
     bd6:	10 e0       	ldi	r17, 0x00	; 0
     bd8:	18 c0       	rjmp	.+48     	; 0xc0a <main+0x82>
	}

	// loop responsavel por separar e ler os dados do distancia que serao armazenados na eeprom, nos espacos 4 ate 8
	for (int i = 4; i < 9; i++)
	{
		aux_eeprom[i - 4] = eeprom_read_byte(i);
     bda:	78 01       	movw	r14, r16
     bdc:	84 e0       	ldi	r24, 0x04	; 4
     bde:	e8 1a       	sub	r14, r24
     be0:	f1 08       	sbc	r15, r1
     be2:	c8 01       	movw	r24, r16
     be4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <eeprom_read_byte>
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ec 0f       	add	r30, r28
     bee:	fd 1f       	adc	r31, r29
     bf0:	ee 0d       	add	r30, r14
     bf2:	ff 1d       	adc	r31, r15
     bf4:	80 83       	st	Z, r24
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
     bf6:	ce 01       	movw	r24, r28
     bf8:	01 96       	adiw	r24, 0x01	; 1
     bfa:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <atoi>
     bfe:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <Distancia_hodometro_km+0x1>
     c02:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Distancia_hodometro_km>
		aux_eeprom[i] = eeprom_read_byte(i);
		Diametro_pneu_cm = atoi(aux_eeprom); // convertendo de char para int
	}

	// loop responsavel por separar e ler os dados do distancia que serao armazenados na eeprom, nos espacos 4 ate 8
	for (int i = 4; i < 9; i++)
     c06:	0f 5f       	subi	r16, 0xFF	; 255
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	09 30       	cpi	r16, 0x09	; 9
     c0c:	11 05       	cpc	r17, r1
     c0e:	2c f3       	brlt	.-54     	; 0xbda <main+0x52>
	{
		aux_eeprom[i - 4] = eeprom_read_byte(i);
		Distancia_hodometro_km = atoi(aux_eeprom); // convertendo de char para int
	}
	Distancia_hodometro_km_pass = Distancia_hodometro_km * 100000;
     c10:	a0 91 53 01 	lds	r26, 0x0153	; 0x800153 <Distancia_hodometro_km>
     c14:	b0 91 54 01 	lds	r27, 0x0154	; 0x800154 <Distancia_hodometro_km+0x1>
     c18:	20 ea       	ldi	r18, 0xA0	; 160
     c1a:	36 e8       	ldi	r19, 0x86	; 134
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__muluhisi3>
     c24:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <Distancia_hodometro_km_pass>
     c28:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <Distancia_hodometro_km_pass+0x1>
     c2c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <Distancia_hodometro_km_pass+0x2>
     c30:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <Distancia_hodometro_km_pass+0x3>

	while (1)
	{
		anima_velocidade(Velocidade_carro_kmH, &flag_5ms);		// funcao responsavel por retornar a velocidade no display 7-Seg
     c34:	6b e5       	ldi	r22, 0x5B	; 91
     c36:	71 e0       	ldi	r23, 0x01	; 1
     c38:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <Velocidade_carro_kmH>
     c3c:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <Velocidade_carro_kmH+0x1>
     c40:	0e 94 a6 03 	call	0x74c	; 0x74c <anima_velocidade>
		anima_LCD(Diametro_pneu_cm, RPM_motor, Distancia_hodometro_km, Distancia_objeto_cm, &flag_500ms);	// funcao responsavel por retornar variaveis para o display nokia
     c44:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <Distancia_objeto_cm>
     c48:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <Distancia_objeto_cm+0x1>
     c4c:	40 91 53 01 	lds	r20, 0x0153	; 0x800153 <Distancia_hodometro_km>
     c50:	50 91 54 01 	lds	r21, 0x0154	; 0x800154 <Distancia_hodometro_km+0x1>
     c54:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <RPM_motor>
     c58:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <RPM_motor+0x1>
     c5c:	0a e5       	ldi	r16, 0x5A	; 90
     c5e:	11 e0       	ldi	r17, 0x01	; 1
     c60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c64:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c68:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <anima_LCD>

		itoa(Diametro_pneu_cm, aux_2_eeprom, 10); // convertendo de int para char
     c6c:	4a e0       	ldi	r20, 0x0A	; 10
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	be 01       	movw	r22, r28
     c72:	67 5f       	subi	r22, 0xF7	; 247
     c74:	7f 4f       	sbci	r23, 0xFF	; 255
     c76:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c7a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c7e:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <itoa>
		// loop responsavel por separar e inserir os dados do diametro na eeprom, nos espacos 0 ate 3
		for (int i = 0; i < 4; i++)
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	0c c0       	rjmp	.+24     	; 0xca0 <main+0x118>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
     c88:	e9 e0       	ldi	r30, 0x09	; 9
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	ec 0f       	add	r30, r28
     c8e:	fd 1f       	adc	r31, r29
     c90:	e0 0f       	add	r30, r16
     c92:	f1 1f       	adc	r31, r17
     c94:	60 81       	ld	r22, Z
     c96:	c8 01       	movw	r24, r16
     c98:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <eeprom_write_byte>
		anima_velocidade(Velocidade_carro_kmH, &flag_5ms);		// funcao responsavel por retornar a velocidade no display 7-Seg
		anima_LCD(Diametro_pneu_cm, RPM_motor, Distancia_hodometro_km, Distancia_objeto_cm, &flag_500ms);	// funcao responsavel por retornar variaveis para o display nokia

		itoa(Diametro_pneu_cm, aux_2_eeprom, 10); // convertendo de int para char
		// loop responsavel por separar e inserir os dados do diametro na eeprom, nos espacos 0 ate 3
		for (int i = 0; i < 4; i++)
     c9c:	0f 5f       	subi	r16, 0xFF	; 255
     c9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ca0:	04 30       	cpi	r16, 0x04	; 4
     ca2:	11 05       	cpc	r17, r1
     ca4:	8c f3       	brlt	.-30     	; 0xc88 <main+0x100>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
		}
		itoa(Distancia_hodometro_km, aux_2_eeprom, 10); // convertendo de int para char
     ca6:	4a e0       	ldi	r20, 0x0A	; 10
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	be 01       	movw	r22, r28
     cac:	67 5f       	subi	r22, 0xF7	; 247
     cae:	7f 4f       	sbci	r23, 0xFF	; 255
     cb0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Distancia_hodometro_km>
     cb4:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <Distancia_hodometro_km+0x1>
     cb8:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <itoa>
		// loop responsavel por separar e inserir os dados da distancia na eeprom, nos espacos 4 ate 8
		for (int i = 4; i < 8; i++)
     cbc:	04 e0       	ldi	r16, 0x04	; 4
     cbe:	10 e0       	ldi	r17, 0x00	; 0
     cc0:	0e c0       	rjmp	.+28     	; 0xcde <main+0x156>
		{
			eeprom_write_byte(i, aux_2_eeprom[i - 4]);
     cc2:	f8 01       	movw	r30, r16
     cc4:	34 97       	sbiw	r30, 0x04	; 4
     cc6:	89 e0       	ldi	r24, 0x09	; 9
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	8c 0f       	add	r24, r28
     ccc:	9d 1f       	adc	r25, r29
     cce:	e8 0f       	add	r30, r24
     cd0:	f9 1f       	adc	r31, r25
     cd2:	60 81       	ld	r22, Z
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <eeprom_write_byte>
		{
			eeprom_write_byte(i, aux_2_eeprom[i]);
		}
		itoa(Distancia_hodometro_km, aux_2_eeprom, 10); // convertendo de int para char
		// loop responsavel por separar e inserir os dados da distancia na eeprom, nos espacos 4 ate 8
		for (int i = 4; i < 8; i++)
     cda:	0f 5f       	subi	r16, 0xFF	; 255
     cdc:	1f 4f       	sbci	r17, 0xFF	; 255
     cde:	08 30       	cpi	r16, 0x08	; 8
     ce0:	11 05       	cpc	r17, r1
     ce2:	7c f3       	brlt	.-34     	; 0xcc2 <main+0x13a>
     ce4:	a7 cf       	rjmp	.-178    	; 0xc34 <main+0xac>

00000ce6 <GLCD_BufferWrite>:
			break;

		GLCD_PrintChar(r);
		r = pgm_read_byte(Text++);
	}
}
     ce6:	66 95       	lsr	r22
     ce8:	66 95       	lsr	r22
     cea:	66 95       	lsr	r22
     cec:	e8 2f       	mov	r30, r24
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	68 9f       	mul	r22, r24
     cf4:	e0 0d       	add	r30, r0
     cf6:	f1 1d       	adc	r31, r1
     cf8:	11 24       	eor	r1, r1
     cfa:	eb 59       	subi	r30, 0x9B	; 155
     cfc:	fe 4f       	sbci	r31, 0xFE	; 254
     cfe:	40 83       	st	Z, r20
     d00:	08 95       	ret

00000d02 <GLCD_BufferRead>:
     d02:	66 95       	lsr	r22
     d04:	66 95       	lsr	r22
     d06:	66 95       	lsr	r22
     d08:	e8 2f       	mov	r30, r24
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	68 9f       	mul	r22, r24
     d10:	e0 0d       	add	r30, r0
     d12:	f1 1d       	adc	r31, r1
     d14:	11 24       	eor	r1, r1
     d16:	eb 59       	subi	r30, 0x9B	; 155
     d18:	fe 4f       	sbci	r31, 0xFE	; 254
     d1a:	80 81       	ld	r24, Z
     d1c:	08 95       	ret

00000d1e <Int2bcd>:
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	fa 01       	movw	r30, r20
     d28:	20 e3       	ldi	r18, 0x30	; 48
     d2a:	22 87       	std	Z+10, r18	; 0x0a
     d2c:	21 87       	std	Z+9, r18	; 0x09
     d2e:	20 87       	std	Z+8, r18	; 0x08
     d30:	27 83       	std	Z+7, r18	; 0x07
     d32:	26 83       	std	Z+6, r18	; 0x06
     d34:	25 83       	std	Z+5, r18	; 0x05
     d36:	24 83       	std	Z+4, r18	; 0x04
     d38:	23 83       	std	Z+3, r18	; 0x03
     d3a:	22 83       	std	Z+2, r18	; 0x02
     d3c:	21 83       	std	Z+1, r18	; 0x01
     d3e:	20 83       	st	Z, r18
     d40:	bb 23       	and	r27, r27
     d42:	4c f4       	brge	.+18     	; 0xd56 <Int2bcd+0x38>
     d44:	b0 95       	com	r27
     d46:	a0 95       	com	r26
     d48:	90 95       	com	r25
     d4a:	81 95       	neg	r24
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	af 4f       	sbci	r26, 0xFF	; 255
     d50:	bf 4f       	sbci	r27, 0xFF	; 255
     d52:	31 e0       	ldi	r19, 0x01	; 1
     d54:	08 c0       	rjmp	.+16     	; 0xd66 <Int2bcd+0x48>
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <Int2bcd+0x48>
     d5a:	9a 5c       	subi	r25, 0xCA	; 202
     d5c:	aa 49       	sbci	r26, 0x9A	; 154
     d5e:	bb 43       	sbci	r27, 0x3B	; 59
     d60:	21 81       	ldd	r18, Z+1	; 0x01
     d62:	2f 5f       	subi	r18, 0xFF	; 255
     d64:	21 83       	std	Z+1, r18	; 0x01
     d66:	81 15       	cp	r24, r1
     d68:	2a ec       	ldi	r18, 0xCA	; 202
     d6a:	92 07       	cpc	r25, r18
     d6c:	2a e9       	ldi	r18, 0x9A	; 154
     d6e:	a2 07       	cpc	r26, r18
     d70:	2b e3       	ldi	r18, 0x3B	; 59
     d72:	b2 07       	cpc	r27, r18
     d74:	94 f7       	brge	.-28     	; 0xd5a <Int2bcd+0x3c>
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <Int2bcd+0x66>
     d78:	91 5e       	subi	r25, 0xE1	; 225
     d7a:	a5 4f       	sbci	r26, 0xF5	; 245
     d7c:	b5 40       	sbci	r27, 0x05	; 5
     d7e:	22 81       	ldd	r18, Z+2	; 0x02
     d80:	2f 5f       	subi	r18, 0xFF	; 255
     d82:	22 83       	std	Z+2, r18	; 0x02
     d84:	81 15       	cp	r24, r1
     d86:	21 ee       	ldi	r18, 0xE1	; 225
     d88:	92 07       	cpc	r25, r18
     d8a:	25 ef       	ldi	r18, 0xF5	; 245
     d8c:	a2 07       	cpc	r26, r18
     d8e:	25 e0       	ldi	r18, 0x05	; 5
     d90:	b2 07       	cpc	r27, r18
     d92:	94 f7       	brge	.-28     	; 0xd78 <Int2bcd+0x5a>
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <Int2bcd+0x86>
     d96:	80 58       	subi	r24, 0x80	; 128
     d98:	96 49       	sbci	r25, 0x96	; 150
     d9a:	a8 49       	sbci	r26, 0x98	; 152
     d9c:	b1 09       	sbc	r27, r1
     d9e:	23 81       	ldd	r18, Z+3	; 0x03
     da0:	2f 5f       	subi	r18, 0xFF	; 255
     da2:	23 83       	std	Z+3, r18	; 0x03
     da4:	80 38       	cpi	r24, 0x80	; 128
     da6:	26 e9       	ldi	r18, 0x96	; 150
     da8:	92 07       	cpc	r25, r18
     daa:	28 e9       	ldi	r18, 0x98	; 152
     dac:	a2 07       	cpc	r26, r18
     dae:	b1 05       	cpc	r27, r1
     db0:	94 f7       	brge	.-28     	; 0xd96 <Int2bcd+0x78>
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <Int2bcd+0xa4>
     db4:	80 54       	subi	r24, 0x40	; 64
     db6:	92 44       	sbci	r25, 0x42	; 66
     db8:	af 40       	sbci	r26, 0x0F	; 15
     dba:	b1 09       	sbc	r27, r1
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	2f 5f       	subi	r18, 0xFF	; 255
     dc0:	24 83       	std	Z+4, r18	; 0x04
     dc2:	80 34       	cpi	r24, 0x40	; 64
     dc4:	22 e4       	ldi	r18, 0x42	; 66
     dc6:	92 07       	cpc	r25, r18
     dc8:	2f e0       	ldi	r18, 0x0F	; 15
     dca:	a2 07       	cpc	r26, r18
     dcc:	b1 05       	cpc	r27, r1
     dce:	94 f7       	brge	.-28     	; 0xdb4 <Int2bcd+0x96>
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <Int2bcd+0xc2>
     dd2:	80 5a       	subi	r24, 0xA0	; 160
     dd4:	96 48       	sbci	r25, 0x86	; 134
     dd6:	a1 40       	sbci	r26, 0x01	; 1
     dd8:	b1 09       	sbc	r27, r1
     dda:	25 81       	ldd	r18, Z+5	; 0x05
     ddc:	2f 5f       	subi	r18, 0xFF	; 255
     dde:	25 83       	std	Z+5, r18	; 0x05
     de0:	80 3a       	cpi	r24, 0xA0	; 160
     de2:	26 e8       	ldi	r18, 0x86	; 134
     de4:	92 07       	cpc	r25, r18
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	a2 07       	cpc	r26, r18
     dea:	b1 05       	cpc	r27, r1
     dec:	94 f7       	brge	.-28     	; 0xdd2 <Int2bcd+0xb4>
     dee:	07 c0       	rjmp	.+14     	; 0xdfe <Int2bcd+0xe0>
     df0:	80 51       	subi	r24, 0x10	; 16
     df2:	97 42       	sbci	r25, 0x27	; 39
     df4:	a1 09       	sbc	r26, r1
     df6:	b1 09       	sbc	r27, r1
     df8:	26 81       	ldd	r18, Z+6	; 0x06
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	26 83       	std	Z+6, r18	; 0x06
     dfe:	80 31       	cpi	r24, 0x10	; 16
     e00:	27 e2       	ldi	r18, 0x27	; 39
     e02:	92 07       	cpc	r25, r18
     e04:	a1 05       	cpc	r26, r1
     e06:	b1 05       	cpc	r27, r1
     e08:	9c f7       	brge	.-26     	; 0xdf0 <Int2bcd+0xd2>
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <Int2bcd+0xfc>
     e0c:	88 5e       	subi	r24, 0xE8	; 232
     e0e:	93 40       	sbci	r25, 0x03	; 3
     e10:	a1 09       	sbc	r26, r1
     e12:	b1 09       	sbc	r27, r1
     e14:	27 81       	ldd	r18, Z+7	; 0x07
     e16:	2f 5f       	subi	r18, 0xFF	; 255
     e18:	27 83       	std	Z+7, r18	; 0x07
     e1a:	88 3e       	cpi	r24, 0xE8	; 232
     e1c:	23 e0       	ldi	r18, 0x03	; 3
     e1e:	92 07       	cpc	r25, r18
     e20:	a1 05       	cpc	r26, r1
     e22:	b1 05       	cpc	r27, r1
     e24:	9c f7       	brge	.-26     	; 0xe0c <Int2bcd+0xee>
     e26:	07 c0       	rjmp	.+14     	; 0xe36 <Int2bcd+0x118>
     e28:	84 56       	subi	r24, 0x64	; 100
     e2a:	91 09       	sbc	r25, r1
     e2c:	a1 09       	sbc	r26, r1
     e2e:	b1 09       	sbc	r27, r1
     e30:	20 85       	ldd	r18, Z+8	; 0x08
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	20 87       	std	Z+8, r18	; 0x08
     e36:	84 36       	cpi	r24, 0x64	; 100
     e38:	91 05       	cpc	r25, r1
     e3a:	a1 05       	cpc	r26, r1
     e3c:	b1 05       	cpc	r27, r1
     e3e:	a4 f7       	brge	.-24     	; 0xe28 <Int2bcd+0x10a>
     e40:	06 c0       	rjmp	.+12     	; 0xe4e <Int2bcd+0x130>
     e42:	0a 97       	sbiw	r24, 0x0a	; 10
     e44:	a1 09       	sbc	r26, r1
     e46:	b1 09       	sbc	r27, r1
     e48:	21 85       	ldd	r18, Z+9	; 0x09
     e4a:	2f 5f       	subi	r18, 0xFF	; 255
     e4c:	21 87       	std	Z+9, r18	; 0x09
     e4e:	8a 30       	cpi	r24, 0x0A	; 10
     e50:	91 05       	cpc	r25, r1
     e52:	a1 05       	cpc	r26, r1
     e54:	b1 05       	cpc	r27, r1
     e56:	ac f7       	brge	.-22     	; 0xe42 <Int2bcd+0x124>
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <Int2bcd+0x148>
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	a1 09       	sbc	r26, r1
     e5e:	b1 09       	sbc	r27, r1
     e60:	22 85       	ldd	r18, Z+10	; 0x0a
     e62:	2f 5f       	subi	r18, 0xFF	; 255
     e64:	22 87       	std	Z+10, r18	; 0x0a
     e66:	18 16       	cp	r1, r24
     e68:	19 06       	cpc	r1, r25
     e6a:	1a 06       	cpc	r1, r26
     e6c:	1b 06       	cpc	r1, r27
     e6e:	ac f3       	brlt	.-22     	; 0xe5a <Int2bcd+0x13c>
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <Int2bcd+0x158>
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	df 01       	movw	r26, r30
     e78:	a2 0f       	add	r26, r18
     e7a:	b1 1d       	adc	r27, r1
     e7c:	8c 91       	ld	r24, X
     e7e:	80 33       	cpi	r24, 0x30	; 48
     e80:	c9 f3       	breq	.-14     	; 0xe74 <Int2bcd+0x156>
     e82:	33 23       	and	r19, r19
     e84:	31 f0       	breq	.+12     	; 0xe92 <Int2bcd+0x174>
     e86:	21 50       	subi	r18, 0x01	; 1
     e88:	df 01       	movw	r26, r30
     e8a:	a2 0f       	add	r26, r18
     e8c:	b1 1d       	adc	r27, r1
     e8e:	8d e2       	ldi	r24, 0x2D	; 45
     e90:	8c 93       	st	X, r24
     e92:	4a e0       	ldi	r20, 0x0A	; 10
     e94:	42 1b       	sub	r20, r18
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	0d c0       	rjmp	.+26     	; 0xeb4 <Int2bcd+0x196>
     e9a:	83 2f       	mov	r24, r19
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	ef 01       	movw	r28, r30
     ea0:	c8 0f       	add	r28, r24
     ea2:	d9 1f       	adc	r29, r25
     ea4:	82 0f       	add	r24, r18
     ea6:	91 1d       	adc	r25, r1
     ea8:	df 01       	movw	r26, r30
     eaa:	a8 0f       	add	r26, r24
     eac:	b9 1f       	adc	r27, r25
     eae:	8c 91       	ld	r24, X
     eb0:	88 83       	st	Y, r24
     eb2:	3f 5f       	subi	r19, 0xFF	; 255
     eb4:	43 17       	cp	r20, r19
     eb6:	88 f7       	brcc	.-30     	; 0xe9a <Int2bcd+0x17c>
     eb8:	e3 0f       	add	r30, r19
     eba:	f1 1d       	adc	r31, r1
     ebc:	10 82       	st	Z, r1
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	08 95       	ret

00000ec4 <GLCD_Send>:
     ec4:	0f 93       	push	r16
     ec6:	1f 93       	push	r17
     ec8:	cf 93       	push	r28
     eca:	df 93       	push	r29
     ecc:	c8 2f       	mov	r28, r24
     ece:	8b 01       	movw	r16, r22
     ed0:	d4 2f       	mov	r29, r20
     ed2:	0e 94 41 0b 	call	0x1682	; 0x1682 <TWI_BeginTransmission>
     ed6:	88 e7       	ldi	r24, 0x78	; 120
     ed8:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <TWI_Transmit>
     edc:	8c 2f       	mov	r24, r28
     ede:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <TWI_Transmit>
     ee2:	c0 e0       	ldi	r28, 0x00	; 0
     ee4:	07 c0       	rjmp	.+14     	; 0xef4 <GLCD_Send+0x30>
     ee6:	f8 01       	movw	r30, r16
     ee8:	ec 0f       	add	r30, r28
     eea:	f1 1d       	adc	r31, r1
     eec:	80 81       	ld	r24, Z
     eee:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <TWI_Transmit>
     ef2:	cf 5f       	subi	r28, 0xFF	; 255
     ef4:	cd 17       	cp	r28, r29
     ef6:	b8 f3       	brcs	.-18     	; 0xee6 <GLCD_Send+0x22>
     ef8:	0e 94 4b 0b 	call	0x1696	; 0x1696 <TWI_EndTransmission>
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	08 95       	ret

00000f06 <GLCD_SendCommand>:
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	1f 92       	push	r1
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	be 01       	movw	r22, r28
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 62 07 	call	0xec4	; 0xec4 <GLCD_Send>
     f20:	0f 90       	pop	r0
     f22:	df 91       	pop	r29
     f24:	cf 91       	pop	r28
     f26:	08 95       	ret

00000f28 <GLCD_Render>:
     f28:	cf 93       	push	r28
     f2a:	81 e2       	ldi	r24, 0x21	; 33
     f2c:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     f36:	8f e7       	ldi	r24, 0x7F	; 127
     f38:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     f3c:	82 e2       	ldi	r24, 0x22	; 34
     f3e:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     f48:	87 e0       	ldi	r24, 0x07	; 7
     f4a:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     f4e:	c0 e0       	ldi	r28, 0x00	; 0
     f50:	0b c0       	rjmp	.+22     	; 0xf68 <GLCD_Render+0x40>
     f52:	80 e1       	ldi	r24, 0x10	; 16
     f54:	c8 9f       	mul	r28, r24
     f56:	b0 01       	movw	r22, r0
     f58:	11 24       	eor	r1, r1
     f5a:	6b 59       	subi	r22, 0x9B	; 155
     f5c:	7e 4f       	sbci	r23, 0xFE	; 254
     f5e:	40 e1       	ldi	r20, 0x10	; 16
     f60:	80 e4       	ldi	r24, 0x40	; 64
     f62:	0e 94 62 07 	call	0xec4	; 0xec4 <GLCD_Send>
     f66:	cf 5f       	subi	r28, 0xFF	; 255
     f68:	c0 34       	cpi	r28, 0x40	; 64
     f6a:	98 f3       	brcs	.-26     	; 0xf52 <GLCD_Render+0x2a>
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <GLCD_GotoX>:
     f70:	88 23       	and	r24, r24
     f72:	14 f0       	brlt	.+4      	; 0xf78 <GLCD_GotoX+0x8>
     f74:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__GLCD>
     f78:	08 95       	ret

00000f7a <GLCD_GotoY>:
     f7a:	80 34       	cpi	r24, 0x40	; 64
     f7c:	10 f4       	brcc	.+4      	; 0xf82 <GLCD_GotoY+0x8>
     f7e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <__GLCD+0x1>
     f82:	08 95       	ret

00000f84 <GLCD_GotoXY>:
     f84:	cf 93       	push	r28
     f86:	c6 2f       	mov	r28, r22
     f88:	0e 94 b8 07 	call	0xf70	; 0xf70 <GLCD_GotoX>
     f8c:	8c 2f       	mov	r24, r28
     f8e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <GLCD_GotoY>
     f92:	cf 91       	pop	r28
     f94:	08 95       	ret

00000f96 <GLCD_Setup>:
     f96:	0e 94 28 0b 	call	0x1650	; 0x1650 <TWI_Setup>
     f9a:	8e ea       	ldi	r24, 0xAE	; 174
     f9c:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fa0:	85 ed       	ldi	r24, 0xD5	; 213
     fa2:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fa6:	80 ef       	ldi	r24, 0xF0	; 240
     fa8:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fac:	88 ea       	ldi	r24, 0xA8	; 168
     fae:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fb2:	8f e3       	ldi	r24, 0x3F	; 63
     fb4:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fb8:	83 ed       	ldi	r24, 0xD3	; 211
     fba:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fc4:	8d e8       	ldi	r24, 0x8D	; 141
     fc6:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fca:	84 e1       	ldi	r24, 0x14	; 20
     fcc:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fd0:	80 e4       	ldi	r24, 0x40	; 64
     fd2:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fd6:	80 e2       	ldi	r24, 0x20	; 32
     fd8:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fe2:	81 ea       	ldi	r24, 0xA1	; 161
     fe4:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fe8:	88 ec       	ldi	r24, 0xC8	; 200
     fea:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     fee:	8a ed       	ldi	r24, 0xDA	; 218
     ff0:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     ff4:	82 e1       	ldi	r24, 0x12	; 18
     ff6:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
     ffa:	81 e8       	ldi	r24, 0x81	; 129
     ffc:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1006:	89 ed       	ldi	r24, 0xD9	; 217
    1008:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    100c:	81 ef       	ldi	r24, 0xF1	; 241
    100e:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1012:	8b ed       	ldi	r24, 0xDB	; 219
    1014:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1018:	80 e2       	ldi	r24, 0x20	; 32
    101a:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    101e:	84 ea       	ldi	r24, 0xA4	; 164
    1020:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1024:	86 ea       	ldi	r24, 0xA6	; 166
    1026:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    102a:	8e e2       	ldi	r24, 0x2E	; 46
    102c:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1030:	8f ea       	ldi	r24, 0xAF	; 175
    1032:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    103e:	ec e5       	ldi	r30, 0x5C	; 92
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	86 ea       	ldi	r24, 0xA6	; 166
    1044:	82 83       	std	Z+2, r24	; 0x02
    1046:	17 82       	std	Z+7, r1	; 0x07
    1048:	16 82       	std	Z+6, r1	; 0x06
    104a:	15 82       	std	Z+5, r1	; 0x05
    104c:	11 82       	std	Z+1, r1	; 0x01
    104e:	10 82       	st	Z, r1
    1050:	08 95       	ret

00001052 <GLCD_SetPixel>:
    1052:	ff 92       	push	r15
    1054:	0f 93       	push	r16
    1056:	1f 93       	push	r17
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	c6 2f       	mov	r28, r22
    105e:	14 2f       	mov	r17, r20
    1060:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    1064:	ec e5       	ldi	r30, 0x5C	; 92
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	f1 80       	ldd	r15, Z+1	; 0x01
    106a:	d0 81       	ld	r29, Z
    106c:	6f 2d       	mov	r22, r15
    106e:	8d 2f       	mov	r24, r29
    1070:	0e 94 81 06 	call	0xd02	; 0xd02 <GLCD_BufferRead>
    1074:	1f 3f       	cpi	r17, 0xFF	; 255
    1076:	79 f4       	brne	.+30     	; 0x1096 <GLCD_SetPixel+0x44>
    1078:	c7 70       	andi	r28, 0x07	; 7
    107a:	01 e0       	ldi	r16, 0x01	; 1
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	04 c0       	rjmp	.+8      	; 0x108c <GLCD_SetPixel+0x3a>
    1084:	00 0f       	add	r16, r16
    1086:	11 1f       	adc	r17, r17
    1088:	22 1f       	adc	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	ca 95       	dec	r28
    108e:	d2 f7       	brpl	.-12     	; 0x1084 <GLCD_SetPixel+0x32>
    1090:	48 2f       	mov	r20, r24
    1092:	40 2b       	or	r20, r16
    1094:	0f c0       	rjmp	.+30     	; 0x10b4 <GLCD_SetPixel+0x62>
    1096:	c7 70       	andi	r28, 0x07	; 7
    1098:	01 e0       	ldi	r16, 0x01	; 1
    109a:	10 e0       	ldi	r17, 0x00	; 0
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GLCD_SetPixel+0x58>
    10a2:	00 0f       	add	r16, r16
    10a4:	11 1f       	adc	r17, r17
    10a6:	22 1f       	adc	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	ca 95       	dec	r28
    10ac:	d2 f7       	brpl	.-12     	; 0x10a2 <GLCD_SetPixel+0x50>
    10ae:	00 95       	com	r16
    10b0:	40 2f       	mov	r20, r16
    10b2:	48 23       	and	r20, r24
    10b4:	6f 2d       	mov	r22, r15
    10b6:	8d 2f       	mov	r24, r29
    10b8:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	0f 91       	pop	r16
    10c4:	ff 90       	pop	r15
    10c6:	08 95       	ret

000010c8 <GLCD_SetPixels>:
    10c8:	6f 92       	push	r6
    10ca:	7f 92       	push	r7
    10cc:	8f 92       	push	r8
    10ce:	9f 92       	push	r9
    10d0:	af 92       	push	r10
    10d2:	bf 92       	push	r11
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	1f 93       	push	r17
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	88 23       	and	r24, r24
    10e6:	0c f4       	brge	.+2      	; 0x10ea <GLCD_SetPixels+0x22>
    10e8:	a7 c0       	rjmp	.+334    	; 0x1238 <GLCD_SetPixels+0x170>
    10ea:	44 23       	and	r20, r20
    10ec:	0c f4       	brge	.+2      	; 0x10f0 <GLCD_SetPixels+0x28>
    10ee:	a4 c0       	rjmp	.+328    	; 0x1238 <GLCD_SetPixels+0x170>
    10f0:	60 34       	cpi	r22, 0x40	; 64
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <GLCD_SetPixels+0x2e>
    10f4:	a1 c0       	rjmp	.+322    	; 0x1238 <GLCD_SetPixels+0x170>
    10f6:	20 34       	cpi	r18, 0x40	; 64
    10f8:	08 f0       	brcs	.+2      	; 0x10fc <GLCD_SetPixels+0x34>
    10fa:	9e c0       	rjmp	.+316    	; 0x1238 <GLCD_SetPixels+0x170>
    10fc:	26 1b       	sub	r18, r22
    10fe:	99 24       	eor	r9, r9
    1100:	93 94       	inc	r9
    1102:	92 0e       	add	r9, r18
    1104:	48 1b       	sub	r20, r24
    1106:	d1 e0       	ldi	r29, 0x01	; 1
    1108:	d4 0f       	add	r29, r20
    110a:	96 2f       	mov	r25, r22
    110c:	97 70       	andi	r25, 0x07	; 7
    110e:	16 2f       	mov	r17, r22
    1110:	19 1b       	sub	r17, r25
    1112:	e9 2c       	mov	r14, r9
    1114:	f1 2c       	mov	r15, r1
    1116:	28 e0       	ldi	r18, 0x08	; 8
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	29 1b       	sub	r18, r25
    111c:	31 09       	sbc	r19, r1
    111e:	e2 16       	cp	r14, r18
    1120:	f3 06       	cpc	r15, r19
    1122:	7c f4       	brge	.+30     	; 0x1142 <GLCD_SetPixels+0x7a>
    1124:	28 e0       	ldi	r18, 0x08	; 8
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	2e 19       	sub	r18, r14
    112a:	3f 09       	sbc	r19, r15
    112c:	4f ef       	ldi	r20, 0xFF	; 255
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	6a 01       	movw	r12, r20
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GLCD_SetPixels+0x70>
    1134:	d5 94       	asr	r13
    1136:	c7 94       	ror	r12
    1138:	2a 95       	dec	r18
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GLCD_SetPixels+0x6c>
    113c:	2c 2d       	mov	r18, r12
    113e:	b9 2c       	mov	r11, r9
    1140:	04 c0       	rjmp	.+8      	; 0x114a <GLCD_SetPixels+0x82>
    1142:	28 e0       	ldi	r18, 0x08	; 8
    1144:	b2 2e       	mov	r11, r18
    1146:	b9 1a       	sub	r11, r25
    1148:	2f ef       	ldi	r18, 0xFF	; 255
    114a:	a8 2e       	mov	r10, r24
    114c:	c2 2e       	mov	r12, r18
    114e:	d1 2c       	mov	r13, r1
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <GLCD_SetPixels+0x8e>
    1152:	cc 0c       	add	r12, r12
    1154:	dd 1c       	adc	r13, r13
    1156:	9a 95       	dec	r25
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <GLCD_SetPixels+0x8a>
    115a:	6c 2c       	mov	r6, r12
    115c:	61 2f       	mov	r22, r17
    115e:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    1162:	81 2c       	mov	r8, r1
    1164:	19 c0       	rjmp	.+50     	; 0x1198 <GLCD_SetPixels+0xd0>
    1166:	ec e5       	ldi	r30, 0x5C	; 92
    1168:	f1 e0       	ldi	r31, 0x01	; 1
    116a:	71 80       	ldd	r7, Z+1	; 0x01
    116c:	c0 81       	ld	r28, Z
    116e:	67 2d       	mov	r22, r7
    1170:	8c 2f       	mov	r24, r28
    1172:	0e 94 81 06 	call	0xd02	; 0xd02 <GLCD_BufferRead>
    1176:	0f 3f       	cpi	r16, 0xFF	; 255
    1178:	19 f4       	brne	.+6      	; 0x1180 <GLCD_SetPixels+0xb8>
    117a:	46 2d       	mov	r20, r6
    117c:	48 2b       	or	r20, r24
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <GLCD_SetPixels+0xbe>
    1180:	4c 2d       	mov	r20, r12
    1182:	40 95       	com	r20
    1184:	48 23       	and	r20, r24
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	8c 0f       	add	r24, r28
    118a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__GLCD>
    118e:	67 2d       	mov	r22, r7
    1190:	8c 2f       	mov	r24, r28
    1192:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    1196:	83 94       	inc	r8
    1198:	8d 16       	cp	r8, r29
    119a:	28 f3       	brcs	.-54     	; 0x1166 <GLCD_SetPixels+0x9e>
    119c:	16 c0       	rjmp	.+44     	; 0x11ca <GLCD_SetPixels+0x102>
    119e:	88 e0       	ldi	r24, 0x08	; 8
    11a0:	b8 0e       	add	r11, r24
    11a2:	18 5f       	subi	r17, 0xF8	; 248
    11a4:	61 2f       	mov	r22, r17
    11a6:	8a 2d       	mov	r24, r10
    11a8:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    11ac:	c0 e0       	ldi	r28, 0x00	; 0
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <GLCD_SetPixels+0xfe>
    11b0:	ec e5       	ldi	r30, 0x5C	; 92
    11b2:	f1 e0       	ldi	r31, 0x01	; 1
    11b4:	61 81       	ldd	r22, Z+1	; 0x01
    11b6:	80 81       	ld	r24, Z
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	98 0f       	add	r25, r24
    11bc:	90 83       	st	Z, r25
    11be:	40 2f       	mov	r20, r16
    11c0:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    11c4:	cf 5f       	subi	r28, 0xFF	; 255
    11c6:	cd 17       	cp	r28, r29
    11c8:	98 f3       	brcs	.-26     	; 0x11b0 <GLCD_SetPixels+0xe8>
    11ca:	8b 2d       	mov	r24, r11
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9c 01       	movw	r18, r24
    11d0:	28 5f       	subi	r18, 0xF8	; 248
    11d2:	3f 4f       	sbci	r19, 0xFF	; 255
    11d4:	e2 16       	cp	r14, r18
    11d6:	f3 06       	cpc	r15, r19
    11d8:	14 f7       	brge	.-60     	; 0x119e <GLCD_SetPixels+0xd6>
    11da:	b9 14       	cp	r11, r9
    11dc:	68 f5       	brcc	.+90     	; 0x1238 <GLCD_SetPixels+0x170>
    11de:	e8 1a       	sub	r14, r24
    11e0:	f9 0a       	sbc	r15, r25
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GLCD_SetPixels+0x124>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	ea 94       	dec	r14
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GLCD_SetPixels+0x120>
    11f0:	e8 2e       	mov	r14, r24
    11f2:	e0 94       	com	r14
    11f4:	68 e0       	ldi	r22, 0x08	; 8
    11f6:	61 0f       	add	r22, r17
    11f8:	8a 2d       	mov	r24, r10
    11fa:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    11fe:	10 e0       	ldi	r17, 0x00	; 0
    1200:	19 c0       	rjmp	.+50     	; 0x1234 <GLCD_SetPixels+0x16c>
    1202:	ec e5       	ldi	r30, 0x5C	; 92
    1204:	f1 e0       	ldi	r31, 0x01	; 1
    1206:	f1 80       	ldd	r15, Z+1	; 0x01
    1208:	c0 81       	ld	r28, Z
    120a:	6f 2d       	mov	r22, r15
    120c:	8c 2f       	mov	r24, r28
    120e:	0e 94 81 06 	call	0xd02	; 0xd02 <GLCD_BufferRead>
    1212:	0f 3f       	cpi	r16, 0xFF	; 255
    1214:	19 f4       	brne	.+6      	; 0x121c <GLCD_SetPixels+0x154>
    1216:	4e 2d       	mov	r20, r14
    1218:	48 2b       	or	r20, r24
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <GLCD_SetPixels+0x15a>
    121c:	4e 2d       	mov	r20, r14
    121e:	40 95       	com	r20
    1220:	48 23       	and	r20, r24
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	8c 0f       	add	r24, r28
    1226:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <__GLCD>
    122a:	6f 2d       	mov	r22, r15
    122c:	8c 2f       	mov	r24, r28
    122e:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    1232:	1f 5f       	subi	r17, 0xFF	; 255
    1234:	1d 17       	cp	r17, r29
    1236:	28 f3       	brcs	.-54     	; 0x1202 <GLCD_SetPixels+0x13a>
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	9f 90       	pop	r9
    124e:	8f 90       	pop	r8
    1250:	7f 90       	pop	r7
    1252:	6f 90       	pop	r6
    1254:	08 95       	ret

00001256 <GLCD_DrawRectangle>:
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	88 23       	and	r24, r24
    1266:	0c f4       	brge	.+2      	; 0x126a <GLCD_DrawRectangle+0x14>
    1268:	45 c0       	rjmp	.+138    	; 0x12f4 <GLCD_DrawRectangle+0x9e>
    126a:	44 23       	and	r20, r20
    126c:	0c f4       	brge	.+2      	; 0x1270 <GLCD_DrawRectangle+0x1a>
    126e:	42 c0       	rjmp	.+132    	; 0x12f4 <GLCD_DrawRectangle+0x9e>
    1270:	60 34       	cpi	r22, 0x40	; 64
    1272:	08 f0       	brcs	.+2      	; 0x1276 <GLCD_DrawRectangle+0x20>
    1274:	3f c0       	rjmp	.+126    	; 0x12f4 <GLCD_DrawRectangle+0x9e>
    1276:	20 34       	cpi	r18, 0x40	; 64
    1278:	e8 f5       	brcc	.+122    	; 0x12f4 <GLCD_DrawRectangle+0x9e>
    127a:	d0 2f       	mov	r29, r16
    127c:	12 2f       	mov	r17, r18
    127e:	d4 2e       	mov	r13, r20
    1280:	f6 2e       	mov	r15, r22
    1282:	e8 2e       	mov	r14, r24
    1284:	48 17       	cp	r20, r24
    1286:	18 f0       	brcs	.+6      	; 0x128e <GLCD_DrawRectangle+0x38>
    1288:	04 2f       	mov	r16, r20
    128a:	c8 2f       	mov	r28, r24
    128c:	09 c0       	rjmp	.+18     	; 0x12a0 <GLCD_DrawRectangle+0x4a>
    128e:	08 2f       	mov	r16, r24
    1290:	c4 2f       	mov	r28, r20
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <GLCD_DrawRectangle+0x4a>
    1294:	4d 2f       	mov	r20, r29
    1296:	6f 2d       	mov	r22, r15
    1298:	8c 2f       	mov	r24, r28
    129a:	0e 94 29 08 	call	0x1052	; 0x1052 <GLCD_SetPixel>
    129e:	cf 5f       	subi	r28, 0xFF	; 255
    12a0:	0c 17       	cp	r16, r28
    12a2:	c0 f7       	brcc	.-16     	; 0x1294 <GLCD_DrawRectangle+0x3e>
    12a4:	de 14       	cp	r13, r14
    12a6:	18 f0       	brcs	.+6      	; 0x12ae <GLCD_DrawRectangle+0x58>
    12a8:	0d 2d       	mov	r16, r13
    12aa:	ce 2d       	mov	r28, r14
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <GLCD_DrawRectangle+0x6a>
    12ae:	0e 2d       	mov	r16, r14
    12b0:	cd 2d       	mov	r28, r13
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <GLCD_DrawRectangle+0x6a>
    12b4:	4d 2f       	mov	r20, r29
    12b6:	61 2f       	mov	r22, r17
    12b8:	8c 2f       	mov	r24, r28
    12ba:	0e 94 29 08 	call	0x1052	; 0x1052 <GLCD_SetPixel>
    12be:	cf 5f       	subi	r28, 0xFF	; 255
    12c0:	0c 17       	cp	r16, r28
    12c2:	c0 f7       	brcc	.-16     	; 0x12b4 <GLCD_DrawRectangle+0x5e>
    12c4:	1f 15       	cp	r17, r15
    12c6:	18 f0       	brcs	.+6      	; 0x12ce <GLCD_DrawRectangle+0x78>
    12c8:	21 2f       	mov	r18, r17
    12ca:	6f 2d       	mov	r22, r15
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <GLCD_DrawRectangle+0x7c>
    12ce:	2f 2d       	mov	r18, r15
    12d0:	61 2f       	mov	r22, r17
    12d2:	0d 2f       	mov	r16, r29
    12d4:	4e 2d       	mov	r20, r14
    12d6:	8e 2d       	mov	r24, r14
    12d8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <GLCD_SetPixels>
    12dc:	1f 15       	cp	r17, r15
    12de:	18 f0       	brcs	.+6      	; 0x12e6 <GLCD_DrawRectangle+0x90>
    12e0:	21 2f       	mov	r18, r17
    12e2:	6f 2d       	mov	r22, r15
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GLCD_DrawRectangle+0x94>
    12e6:	2f 2d       	mov	r18, r15
    12e8:	61 2f       	mov	r22, r17
    12ea:	0d 2f       	mov	r16, r29
    12ec:	4d 2d       	mov	r20, r13
    12ee:	8d 2d       	mov	r24, r13
    12f0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <GLCD_SetPixels>
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	08 95       	ret

00001304 <GLCD_FillScreen>:
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	18 2f       	mov	r17, r24
    130c:	d0 e0       	ldi	r29, 0x00	; 0
    130e:	0b c0       	rjmp	.+22     	; 0x1326 <GLCD_FillScreen+0x22>
    1310:	41 2f       	mov	r20, r17
    1312:	6d 2f       	mov	r22, r29
    1314:	8c 2f       	mov	r24, r28
    1316:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    131a:	cf 5f       	subi	r28, 0xFF	; 255
    131c:	01 c0       	rjmp	.+2      	; 0x1320 <GLCD_FillScreen+0x1c>
    131e:	c0 e0       	ldi	r28, 0x00	; 0
    1320:	cc 23       	and	r28, r28
    1322:	b4 f7       	brge	.-20     	; 0x1310 <GLCD_FillScreen+0xc>
    1324:	d8 5f       	subi	r29, 0xF8	; 248
    1326:	d0 34       	cpi	r29, 0x40	; 64
    1328:	d0 f3       	brcs	.-12     	; 0x131e <GLCD_FillScreen+0x1a>
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	08 95       	ret

00001332 <GLCD_Clear>:
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 82 09 	call	0x1304	; 0x1304 <GLCD_FillScreen>
    1338:	08 95       	ret

0000133a <GLCD_InvertScreen>:
    133a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__GLCD+0x2>
    133e:	87 3a       	cpi	r24, 0xA7	; 167
    1340:	21 f4       	brne	.+8      	; 0x134a <GLCD_InvertScreen+0x10>
    1342:	86 ea       	ldi	r24, 0xA6	; 166
    1344:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__GLCD+0x2>
    1348:	03 c0       	rjmp	.+6      	; 0x1350 <GLCD_InvertScreen+0x16>
    134a:	87 ea       	ldi	r24, 0xA7	; 167
    134c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__GLCD+0x2>
    1350:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__GLCD+0x2>
    1354:	0e 94 83 07 	call	0xf06	; 0xf06 <GLCD_SendCommand>
    1358:	08 95       	ret

0000135a <GLCD_SetFont>:
    135a:	66 23       	and	r22, r22
    135c:	e4 f0       	brlt	.+56     	; 0x1396 <GLCD_SetFont+0x3c>
    135e:	40 34       	cpi	r20, 0x40	; 64
    1360:	d0 f4       	brcc	.+52     	; 0x1396 <GLCD_SetFont+0x3c>
    1362:	22 30       	cpi	r18, 0x02	; 2
    1364:	c0 f4       	brcc	.+48     	; 0x1396 <GLCD_SetFont+0x3c>
    1366:	ec e5       	ldi	r30, 0x5C	; 92
    1368:	f1 e0       	ldi	r31, 0x01	; 1
    136a:	94 83       	std	Z+4, r25	; 0x04
    136c:	83 83       	std	Z+3, r24	; 0x03
    136e:	65 83       	std	Z+5, r22	; 0x05
    1370:	46 83       	std	Z+6, r20	; 0x06
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	41 50       	subi	r20, 0x01	; 1
    1376:	51 09       	sbc	r21, r1
    1378:	ca 01       	movw	r24, r20
    137a:	99 23       	and	r25, r25
    137c:	0c f4       	brge	.+2      	; 0x1380 <GLCD_SetFont+0x26>
    137e:	07 96       	adiw	r24, 0x07	; 7
    1380:	95 95       	asr	r25
    1382:	87 95       	ror	r24
    1384:	95 95       	asr	r25
    1386:	87 95       	ror	r24
    1388:	95 95       	asr	r25
    138a:	87 95       	ror	r24
    138c:	ec e5       	ldi	r30, 0x5C	; 92
    138e:	f1 e0       	ldi	r31, 0x01	; 1
    1390:	8f 5f       	subi	r24, 0xFF	; 255
    1392:	87 83       	std	Z+7, r24	; 0x07
    1394:	20 87       	std	Z+8, r18	; 0x08
    1396:	08 95       	ret

00001398 <GLCD_PrintChar>:
    1398:	4f 92       	push	r4
    139a:	5f 92       	push	r5
    139c:	6f 92       	push	r6
    139e:	7f 92       	push	r7
    13a0:	8f 92       	push	r8
    13a2:	9f 92       	push	r9
    13a4:	af 92       	push	r10
    13a6:	bf 92       	push	r11
    13a8:	cf 92       	push	r12
    13aa:	df 92       	push	r13
    13ac:	ef 92       	push	r14
    13ae:	ff 92       	push	r15
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ac e5       	ldi	r26, 0x5C	; 92
    13ba:	b1 e0       	ldi	r27, 0x01	; 1
    13bc:	5c 90       	ld	r5, X
    13be:	11 96       	adiw	r26, 0x01	; 1
    13c0:	4c 90       	ld	r4, X
    13c2:	11 97       	sbiw	r26, 0x01	; 1
    13c4:	80 52       	subi	r24, 0x20	; 32
    13c6:	15 96       	adiw	r26, 0x05	; 5
    13c8:	9c 91       	ld	r25, X
    13ca:	15 97       	sbiw	r26, 0x05	; 5
    13cc:	17 96       	adiw	r26, 0x07	; 7
    13ce:	2c 91       	ld	r18, X
    13d0:	17 97       	sbiw	r26, 0x07	; 7
    13d2:	92 9f       	mul	r25, r18
    13d4:	90 01       	movw	r18, r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 5f       	subi	r18, 0xFF	; 255
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	82 9f       	mul	r24, r18
    13de:	a0 01       	movw	r20, r0
    13e0:	83 9f       	mul	r24, r19
    13e2:	50 0d       	add	r21, r0
    13e4:	11 24       	eor	r1, r1
    13e6:	13 96       	adiw	r26, 0x03	; 3
    13e8:	ed 91       	ld	r30, X+
    13ea:	fc 91       	ld	r31, X
    13ec:	14 97       	sbiw	r26, 0x04	; 4
    13ee:	5a 01       	movw	r10, r20
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	a8 1a       	sub	r10, r24
    13f4:	b8 0a       	sbc	r11, r24
    13f6:	e4 0f       	add	r30, r20
    13f8:	f5 1f       	adc	r31, r21
    13fa:	74 90       	lpm	r7, Z
    13fc:	84 2d       	mov	r24, r4
    13fe:	87 70       	andi	r24, 0x07	; 7
    1400:	98 2e       	mov	r9, r24
    1402:	64 2c       	mov	r6, r4
    1404:	81 2c       	mov	r8, r1
    1406:	5f c0       	rjmp	.+190    	; 0x14c6 <GLCD_PrintChar+0x12e>
    1408:	66 2d       	mov	r22, r6
    140a:	85 2d       	mov	r24, r5
    140c:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    1410:	75 01       	movw	r14, r10
    1412:	e8 0c       	add	r14, r8
    1414:	f1 1c       	adc	r15, r1
    1416:	67 01       	movw	r12, r14
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	c8 1a       	sub	r12, r24
    141c:	d1 08       	sbc	r13, r1
    141e:	10 e0       	ldi	r17, 0x00	; 0
    1420:	41 c0       	rjmp	.+130    	; 0x14a4 <GLCD_PrintChar+0x10c>
    1422:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <__GLCD+0x3>
    1426:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <__GLCD+0x4>
    142a:	fc 01       	movw	r30, r24
    142c:	ee 0d       	add	r30, r14
    142e:	ff 1d       	adc	r31, r15
    1430:	24 91       	lpm	r18, Z
    1432:	49 2d       	mov	r20, r9
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	09 2c       	mov	r0, r9
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GLCD_PrintChar+0xa8>
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GLCD_PrintChar+0xa4>
    1444:	02 2f       	mov	r16, r18
    1446:	88 20       	and	r8, r8
    1448:	a1 f0       	breq	.+40     	; 0x1472 <GLCD_PrintChar+0xda>
    144a:	fc 01       	movw	r30, r24
    144c:	ec 0d       	add	r30, r12
    144e:	fd 1d       	adc	r31, r13
    1450:	e4 91       	lpm	r30, Z
    1452:	88 e0       	ldi	r24, 0x08	; 8
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	84 1b       	sub	r24, r20
    1458:	95 0b       	sbc	r25, r21
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <GLCD_PrintChar+0xca>
    145e:	f5 95       	asr	r31
    1460:	e7 95       	ror	r30
    1462:	8a 95       	dec	r24
    1464:	e2 f7       	brpl	.-8      	; 0x145e <GLCD_PrintChar+0xc6>
    1466:	0e 2f       	mov	r16, r30
    1468:	02 2b       	or	r16, r18
    146a:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__GLCD+0x7>
    146e:	c8 0e       	add	r12, r24
    1470:	d1 1c       	adc	r13, r1
    1472:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__GLCD+0x8>
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	39 f4       	brne	.+14     	; 0x1488 <GLCD_PrintChar+0xf0>
    147a:	ec e5       	ldi	r30, 0x5C	; 92
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	61 81       	ldd	r22, Z+1	; 0x01
    1480:	80 81       	ld	r24, Z
    1482:	0e 94 81 06 	call	0xd02	; 0xd02 <GLCD_BufferRead>
    1486:	08 2b       	or	r16, r24
    1488:	cc e5       	ldi	r28, 0x5C	; 92
    148a:	d1 e0       	ldi	r29, 0x01	; 1
    148c:	69 81       	ldd	r22, Y+1	; 0x01
    148e:	88 81       	ld	r24, Y
    1490:	91 e0       	ldi	r25, 0x01	; 1
    1492:	98 0f       	add	r25, r24
    1494:	98 83       	st	Y, r25
    1496:	40 2f       	mov	r20, r16
    1498:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    149c:	8f 81       	ldd	r24, Y+7	; 0x07
    149e:	e8 0e       	add	r14, r24
    14a0:	f1 1c       	adc	r15, r1
    14a2:	1f 5f       	subi	r17, 0xFF	; 255
    14a4:	17 15       	cp	r17, r7
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <GLCD_PrintChar+0x112>
    14a8:	bc cf       	rjmp	.-136    	; 0x1422 <GLCD_PrintChar+0x8a>
    14aa:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__GLCD+0x8>
    14ae:	81 11       	cpse	r24, r1
    14b0:	07 c0       	rjmp	.+14     	; 0x14c0 <GLCD_PrintChar+0x128>
    14b2:	ec e5       	ldi	r30, 0x5C	; 92
    14b4:	f1 e0       	ldi	r31, 0x01	; 1
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	61 81       	ldd	r22, Z+1	; 0x01
    14ba:	80 81       	ld	r24, Z
    14bc:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    14c0:	88 e0       	ldi	r24, 0x08	; 8
    14c2:	68 0e       	add	r6, r24
    14c4:	83 94       	inc	r8
    14c6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <__GLCD+0x7>
    14ca:	88 16       	cp	r8, r24
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <GLCD_PrintChar+0x138>
    14ce:	9c cf       	rjmp	.-200    	; 0x1408 <GLCD_PrintChar+0x70>
    14d0:	24 2d       	mov	r18, r4
    14d2:	26 95       	lsr	r18
    14d4:	26 95       	lsr	r18
    14d6:	26 95       	lsr	r18
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__GLCD+0x6>
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	84 0d       	add	r24, r4
    14e2:	91 1d       	adc	r25, r1
    14e4:	01 97       	sbiw	r24, 0x01	; 1
    14e6:	ac 01       	movw	r20, r24
    14e8:	12 f4       	brpl	.+4      	; 0x14ee <GLCD_PrintChar+0x156>
    14ea:	49 5f       	subi	r20, 0xF9	; 249
    14ec:	5f 4f       	sbci	r21, 0xFF	; 255
    14ee:	55 95       	asr	r21
    14f0:	47 95       	ror	r20
    14f2:	55 95       	asr	r21
    14f4:	47 95       	ror	r20
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	24 17       	cp	r18, r20
    14fc:	35 07       	cpc	r19, r21
    14fe:	09 f4       	brne	.+2      	; 0x1502 <GLCD_PrintChar+0x16a>
    1500:	45 c0       	rjmp	.+138    	; 0x158c <GLCD_PrintChar+0x1f4>
    1502:	8f e3       	ldi	r24, 0x3F	; 63
    1504:	86 15       	cp	r24, r6
    1506:	08 f4       	brcc	.+2      	; 0x150a <GLCD_PrintChar+0x172>
    1508:	41 c0       	rjmp	.+130    	; 0x158c <GLCD_PrintChar+0x1f4>
    150a:	66 2d       	mov	r22, r6
    150c:	85 2d       	mov	r24, r5
    150e:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    1512:	a8 0c       	add	r10, r8
    1514:	b1 1c       	adc	r11, r1
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	a8 1a       	sub	r10, r24
    151a:	b1 08       	sbc	r11, r1
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	29 c0       	rjmp	.+82     	; 0x1572 <GLCD_PrintChar+0x1da>
    1520:	cc e5       	ldi	r28, 0x5C	; 92
    1522:	d1 e0       	ldi	r29, 0x01	; 1
    1524:	f9 80       	ldd	r15, Y+1	; 0x01
    1526:	18 81       	ld	r17, Y
    1528:	6f 2d       	mov	r22, r15
    152a:	81 2f       	mov	r24, r17
    152c:	0e 94 81 06 	call	0xd02	; 0xd02 <GLCD_BufferRead>
    1530:	eb 81       	ldd	r30, Y+3	; 0x03
    1532:	fc 81       	ldd	r31, Y+4	; 0x04
    1534:	ea 0d       	add	r30, r10
    1536:	fb 1d       	adc	r31, r11
    1538:	44 91       	lpm	r20, Z
    153a:	28 e0       	ldi	r18, 0x08	; 8
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	29 19       	sub	r18, r9
    1540:	31 09       	sbc	r19, r1
    1542:	50 e0       	ldi	r21, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GLCD_PrintChar+0x1b2>
    1546:	55 95       	asr	r21
    1548:	47 95       	ror	r20
    154a:	2a 95       	dec	r18
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GLCD_PrintChar+0x1ae>
    154e:	48 2b       	or	r20, r24
    1550:	98 85       	ldd	r25, Y+8	; 0x08
    1552:	91 30       	cpi	r25, 0x01	; 1
    1554:	09 f4       	brne	.+2      	; 0x1558 <GLCD_PrintChar+0x1c0>
    1556:	48 2b       	or	r20, r24
    1558:	cc e5       	ldi	r28, 0x5C	; 92
    155a:	d1 e0       	ldi	r29, 0x01	; 1
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	81 0f       	add	r24, r17
    1560:	88 83       	st	Y, r24
    1562:	6f 2d       	mov	r22, r15
    1564:	81 2f       	mov	r24, r17
    1566:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    156a:	8f 81       	ldd	r24, Y+7	; 0x07
    156c:	a8 0e       	add	r10, r24
    156e:	b1 1c       	adc	r11, r1
    1570:	0f 5f       	subi	r16, 0xFF	; 255
    1572:	07 15       	cp	r16, r7
    1574:	a8 f2       	brcs	.-86     	; 0x1520 <GLCD_PrintChar+0x188>
    1576:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__GLCD+0x8>
    157a:	81 11       	cpse	r24, r1
    157c:	07 c0       	rjmp	.+14     	; 0x158c <GLCD_PrintChar+0x1f4>
    157e:	ec e5       	ldi	r30, 0x5C	; 92
    1580:	f1 e0       	ldi	r31, 0x01	; 1
    1582:	40 e0       	ldi	r20, 0x00	; 0
    1584:	61 81       	ldd	r22, Z+1	; 0x01
    1586:	80 81       	ld	r24, Z
    1588:	0e 94 73 06 	call	0xce6	; 0xce6 <GLCD_BufferWrite>
    158c:	85 2d       	mov	r24, r5
    158e:	87 0d       	add	r24, r7
    1590:	64 2d       	mov	r22, r4
    1592:	8f 5f       	subi	r24, 0xFF	; 255
    1594:	0e 94 c2 07 	call	0xf84	; 0xf84 <GLCD_GotoXY>
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	1f 91       	pop	r17
    159e:	0f 91       	pop	r16
    15a0:	ff 90       	pop	r15
    15a2:	ef 90       	pop	r14
    15a4:	df 90       	pop	r13
    15a6:	cf 90       	pop	r12
    15a8:	bf 90       	pop	r11
    15aa:	af 90       	pop	r10
    15ac:	9f 90       	pop	r9
    15ae:	8f 90       	pop	r8
    15b0:	7f 90       	pop	r7
    15b2:	6f 90       	pop	r6
    15b4:	5f 90       	pop	r5
    15b6:	4f 90       	pop	r4
    15b8:	08 95       	ret

000015ba <GLCD_PrintString>:
    15ba:	cf 93       	push	r28
    15bc:	df 93       	push	r29
    15be:	ec 01       	movw	r28, r24
    15c0:	0d c0       	rjmp	.+26     	; 0x15dc <GLCD_PrintString+0x22>
    15c2:	ec e5       	ldi	r30, 0x5C	; 92
    15c4:	f1 e0       	ldi	r31, 0x01	; 1
    15c6:	90 81       	ld	r25, Z
    15c8:	25 81       	ldd	r18, Z+5	; 0x05
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	29 0f       	add	r18, r25
    15ce:	31 1d       	adc	r19, r1
    15d0:	20 38       	cpi	r18, 0x80	; 128
    15d2:	31 05       	cpc	r19, r1
    15d4:	34 f4       	brge	.+12     	; 0x15e2 <GLCD_PrintString+0x28>
    15d6:	21 96       	adiw	r28, 0x01	; 1
    15d8:	0e 94 cc 09 	call	0x1398	; 0x1398 <GLCD_PrintChar>
    15dc:	88 81       	ld	r24, Y
    15de:	81 11       	cpse	r24, r1
    15e0:	f0 cf       	rjmp	.-32     	; 0x15c2 <GLCD_PrintString+0x8>
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	08 95       	ret

000015e8 <GLCD_PrintInteger>:

void GLCD_PrintInteger(const int32_t Value)
{
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	2c 97       	sbiw	r28, 0x0c	; 12
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
	if (Value == 0)
    1600:	61 15       	cp	r22, r1
    1602:	71 05       	cpc	r23, r1
    1604:	81 05       	cpc	r24, r1
    1606:	91 05       	cpc	r25, r1
    1608:	21 f4       	brne	.+8      	; 0x1612 <GLCD_PrintInteger+0x2a>
	{
		GLCD_PrintChar('0');
    160a:	80 e3       	ldi	r24, 0x30	; 48
    160c:	0e 94 cc 09 	call	0x1398	; 0x1398 <GLCD_PrintChar>
    1610:	14 c0       	rjmp	.+40     	; 0x163a <GLCD_PrintInteger+0x52>
	}
	else if ((Value > INT32_MIN) && (Value <= INT32_MAX))
    1612:	61 15       	cp	r22, r1
    1614:	71 05       	cpc	r23, r1
    1616:	81 05       	cpc	r24, r1
    1618:	20 e8       	ldi	r18, 0x80	; 128
    161a:	92 07       	cpc	r25, r18
    161c:	71 f0       	breq	.+28     	; 0x163a <GLCD_PrintInteger+0x52>
	{
		//int32_max_bytes + sign + null = 12 bytes
		char bcd[12] = { '\0' };
    161e:	8e 01       	movw	r16, r28
    1620:	0f 5f       	subi	r16, 0xFF	; 255
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	2c e0       	ldi	r18, 0x0C	; 12
    1626:	f8 01       	movw	r30, r16
    1628:	11 92       	st	Z+, r1
    162a:	2a 95       	dec	r18
    162c:	e9 f7       	brne	.-6      	; 0x1628 <GLCD_PrintInteger+0x40>
		
		//Convert integer to array
		Int2bcd(Value, bcd);
    162e:	a8 01       	movw	r20, r16
    1630:	0e 94 8f 06 	call	0xd1e	; 0xd1e <Int2bcd>
		
		//Print from first non-zero digit
		GLCD_PrintString(bcd);
    1634:	c8 01       	movw	r24, r16
    1636:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <GLCD_PrintString>
	}
}
    163a:	2c 96       	adiw	r28, 0x0c	; 12
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	08 95       	ret

00001650 <TWI_Setup>:
//----- Functions -------------//
//Setup TWI hardwarw.
void TWI_Setup(void)
{
	//TWI pins as outputs
	PinMode(TWI_SDA, Output);
    1650:	87 b1       	in	r24, 0x07	; 7
    1652:	80 61       	ori	r24, 0x10	; 16
    1654:	87 b9       	out	0x07, r24	; 7
	PinMode(TWI_SCL, Output);
    1656:	87 b1       	in	r24, 0x07	; 7
    1658:	80 62       	ori	r24, 0x20	; 32
    165a:	87 b9       	out	0x07, r24	; 7
	//Activate internal pull-up resistors
	DigitalWrite(TWI_SDA, High);
    165c:	88 b1       	in	r24, 0x08	; 8
    165e:	80 61       	ori	r24, 0x10	; 16
    1660:	88 b9       	out	0x08, r24	; 8
	DigitalWrite(TWI_SCL, High);
    1662:	88 b1       	in	r24, 0x08	; 8
    1664:	80 62       	ori	r24, 0x20	; 32
    1666:	88 b9       	out	0x08, r24	; 8

	//Initialize TWI prescaler and bit rate
	TWSR = 0x00;	//Prescaler = 1
    1668:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = (uint8_t)(((F_CPU / F_SCL) - 16) / 2);
    166c:	88 e4       	ldi	r24, 0x48	; 72
    166e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	//F_SCL = F_CPU / (16 + 2 * TWBR * PRESCALER)
	//TWBR = ((F_CPU / F_SCL) - 16) / (2 * PRESCALER)

	//Enable TWI  module
	TWCR = (1<<TWEN);
    1672:	84 e0       	ldi	r24, 0x04	; 4
    1674:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    1678:	08 95       	ret

0000167a <TWI_Status>:
}

//Get TWI status. 
uint8_t TWI_Status(void)
{
	return (TWSR & 0xF8);
    167a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
}
    167e:	88 7f       	andi	r24, 0xF8	; 248
    1680:	08 95       	ret

00001682 <TWI_BeginTransmission>:

//Begin TWI transmission. 
uint8_t TWI_BeginTransmission(void)
{
	//Transmit START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1682:	84 ea       	ldi	r24, 0xA4	; 164
    1684:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for TWINT Flag set. This indicates that
	//the START condition has been transmitted.
	while (!BitCheck(TWCR, TWINT));
    1688:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    168c:	88 23       	and	r24, r24
    168e:	e4 f7       	brge	.-8      	; 0x1688 <TWI_BeginTransmission+0x6>

	//Return status register
	return (TWI_Status());
    1690:	0e 94 3d 0b 	call	0x167a	; 0x167a <TWI_Status>
}
    1694:	08 95       	ret

00001696 <TWI_EndTransmission>:

//End TWI transmission. 
void TWI_EndTransmission(void)
{
	//Transmit STOP condition
	TWCR = (1<<TWEN) | (1<<TWIE) | (1<<TWEA) | (1<<TWINT) | (1<<TWSTO);
    1696:	85 ed       	ldi	r24, 0xD5	; 213
    1698:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait for stop condition to be executed on bus
	//TWINT is not set after a stop condition!
	while(BitCheck(TWCR, TWSTO));
    169c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    16a0:	84 fd       	sbrc	r24, 4
    16a2:	fc cf       	rjmp	.-8      	; 0x169c <TWI_EndTransmission+0x6>
}
    16a4:	08 95       	ret

000016a6 <TWI_Transmit>:

//Transmit data. 
uint8_t TWI_Transmit(const uint8_t Data)
{
	//Data to be transmitted
	TWDR = Data;
    16a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	//Start transmission
	TWCR = (1<<TWINT) | (1<<TWEN);
    16aa:	84 e8       	ldi	r24, 0x84	; 132
    16ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	//Wait data to be shifted
	while (!BitCheck(TWCR, TWINT));
    16b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    16b4:	88 23       	and	r24, r24
    16b6:	e4 f7       	brge	.-8      	; 0x16b0 <TWI_Transmit+0xa>

	//Return status register
	return (TWI_Status());
    16b8:	0e 94 3d 0b 	call	0x167a	; 0x167a <TWI_Status>
}
    16bc:	08 95       	ret

000016be <__subsf3>:
    16be:	50 58       	subi	r21, 0x80	; 128

000016c0 <__addsf3>:
    16c0:	bb 27       	eor	r27, r27
    16c2:	aa 27       	eor	r26, r26
    16c4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <__addsf3x>
    16c8:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    16cc:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    16d0:	38 f0       	brcs	.+14     	; 0x16e0 <__addsf3+0x20>
    16d2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    16d6:	20 f0       	brcs	.+8      	; 0x16e0 <__addsf3+0x20>
    16d8:	39 f4       	brne	.+14     	; 0x16e8 <__addsf3+0x28>
    16da:	9f 3f       	cpi	r25, 0xFF	; 255
    16dc:	19 f4       	brne	.+6      	; 0x16e4 <__addsf3+0x24>
    16de:	26 f4       	brtc	.+8      	; 0x16e8 <__addsf3+0x28>
    16e0:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>
    16e4:	0e f4       	brtc	.+2      	; 0x16e8 <__addsf3+0x28>
    16e6:	e0 95       	com	r30
    16e8:	e7 fb       	bst	r30, 7
    16ea:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>

000016ee <__addsf3x>:
    16ee:	e9 2f       	mov	r30, r25
    16f0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    16f4:	58 f3       	brcs	.-42     	; 0x16cc <__addsf3+0xc>
    16f6:	ba 17       	cp	r27, r26
    16f8:	62 07       	cpc	r22, r18
    16fa:	73 07       	cpc	r23, r19
    16fc:	84 07       	cpc	r24, r20
    16fe:	95 07       	cpc	r25, r21
    1700:	20 f0       	brcs	.+8      	; 0x170a <__addsf3x+0x1c>
    1702:	79 f4       	brne	.+30     	; 0x1722 <__addsf3x+0x34>
    1704:	a6 f5       	brtc	.+104    	; 0x176e <__addsf3x+0x80>
    1706:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    170a:	0e f4       	brtc	.+2      	; 0x170e <__addsf3x+0x20>
    170c:	e0 95       	com	r30
    170e:	0b 2e       	mov	r0, r27
    1710:	ba 2f       	mov	r27, r26
    1712:	a0 2d       	mov	r26, r0
    1714:	0b 01       	movw	r0, r22
    1716:	b9 01       	movw	r22, r18
    1718:	90 01       	movw	r18, r0
    171a:	0c 01       	movw	r0, r24
    171c:	ca 01       	movw	r24, r20
    171e:	a0 01       	movw	r20, r0
    1720:	11 24       	eor	r1, r1
    1722:	ff 27       	eor	r31, r31
    1724:	59 1b       	sub	r21, r25
    1726:	99 f0       	breq	.+38     	; 0x174e <__addsf3x+0x60>
    1728:	59 3f       	cpi	r21, 0xF9	; 249
    172a:	50 f4       	brcc	.+20     	; 0x1740 <__addsf3x+0x52>
    172c:	50 3e       	cpi	r21, 0xE0	; 224
    172e:	68 f1       	brcs	.+90     	; 0x178a <__addsf3x+0x9c>
    1730:	1a 16       	cp	r1, r26
    1732:	f0 40       	sbci	r31, 0x00	; 0
    1734:	a2 2f       	mov	r26, r18
    1736:	23 2f       	mov	r18, r19
    1738:	34 2f       	mov	r19, r20
    173a:	44 27       	eor	r20, r20
    173c:	58 5f       	subi	r21, 0xF8	; 248
    173e:	f3 cf       	rjmp	.-26     	; 0x1726 <__addsf3x+0x38>
    1740:	46 95       	lsr	r20
    1742:	37 95       	ror	r19
    1744:	27 95       	ror	r18
    1746:	a7 95       	ror	r26
    1748:	f0 40       	sbci	r31, 0x00	; 0
    174a:	53 95       	inc	r21
    174c:	c9 f7       	brne	.-14     	; 0x1740 <__addsf3x+0x52>
    174e:	7e f4       	brtc	.+30     	; 0x176e <__addsf3x+0x80>
    1750:	1f 16       	cp	r1, r31
    1752:	ba 0b       	sbc	r27, r26
    1754:	62 0b       	sbc	r22, r18
    1756:	73 0b       	sbc	r23, r19
    1758:	84 0b       	sbc	r24, r20
    175a:	ba f0       	brmi	.+46     	; 0x178a <__addsf3x+0x9c>
    175c:	91 50       	subi	r25, 0x01	; 1
    175e:	a1 f0       	breq	.+40     	; 0x1788 <__addsf3x+0x9a>
    1760:	ff 0f       	add	r31, r31
    1762:	bb 1f       	adc	r27, r27
    1764:	66 1f       	adc	r22, r22
    1766:	77 1f       	adc	r23, r23
    1768:	88 1f       	adc	r24, r24
    176a:	c2 f7       	brpl	.-16     	; 0x175c <__addsf3x+0x6e>
    176c:	0e c0       	rjmp	.+28     	; 0x178a <__addsf3x+0x9c>
    176e:	ba 0f       	add	r27, r26
    1770:	62 1f       	adc	r22, r18
    1772:	73 1f       	adc	r23, r19
    1774:	84 1f       	adc	r24, r20
    1776:	48 f4       	brcc	.+18     	; 0x178a <__addsf3x+0x9c>
    1778:	87 95       	ror	r24
    177a:	77 95       	ror	r23
    177c:	67 95       	ror	r22
    177e:	b7 95       	ror	r27
    1780:	f7 95       	ror	r31
    1782:	9e 3f       	cpi	r25, 0xFE	; 254
    1784:	08 f0       	brcs	.+2      	; 0x1788 <__addsf3x+0x9a>
    1786:	b0 cf       	rjmp	.-160    	; 0x16e8 <__addsf3+0x28>
    1788:	93 95       	inc	r25
    178a:	88 0f       	add	r24, r24
    178c:	08 f0       	brcs	.+2      	; 0x1790 <__addsf3x+0xa2>
    178e:	99 27       	eor	r25, r25
    1790:	ee 0f       	add	r30, r30
    1792:	97 95       	ror	r25
    1794:	87 95       	ror	r24
    1796:	08 95       	ret

00001798 <__divsf3>:
    1798:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__divsf3x>
    179c:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    17a0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    17a4:	58 f0       	brcs	.+22     	; 0x17bc <__divsf3+0x24>
    17a6:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    17aa:	40 f0       	brcs	.+16     	; 0x17bc <__divsf3+0x24>
    17ac:	29 f4       	brne	.+10     	; 0x17b8 <__divsf3+0x20>
    17ae:	5f 3f       	cpi	r21, 0xFF	; 255
    17b0:	29 f0       	breq	.+10     	; 0x17bc <__divsf3+0x24>
    17b2:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    17b6:	51 11       	cpse	r21, r1
    17b8:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    17bc:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>

000017c0 <__divsf3x>:
    17c0:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    17c4:	68 f3       	brcs	.-38     	; 0x17a0 <__divsf3+0x8>

000017c6 <__divsf3_pse>:
    17c6:	99 23       	and	r25, r25
    17c8:	b1 f3       	breq	.-20     	; 0x17b6 <__divsf3+0x1e>
    17ca:	55 23       	and	r21, r21
    17cc:	91 f3       	breq	.-28     	; 0x17b2 <__divsf3+0x1a>
    17ce:	95 1b       	sub	r25, r21
    17d0:	55 0b       	sbc	r21, r21
    17d2:	bb 27       	eor	r27, r27
    17d4:	aa 27       	eor	r26, r26
    17d6:	62 17       	cp	r22, r18
    17d8:	73 07       	cpc	r23, r19
    17da:	84 07       	cpc	r24, r20
    17dc:	38 f0       	brcs	.+14     	; 0x17ec <__divsf3_pse+0x26>
    17de:	9f 5f       	subi	r25, 0xFF	; 255
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	22 0f       	add	r18, r18
    17e4:	33 1f       	adc	r19, r19
    17e6:	44 1f       	adc	r20, r20
    17e8:	aa 1f       	adc	r26, r26
    17ea:	a9 f3       	breq	.-22     	; 0x17d6 <__divsf3_pse+0x10>
    17ec:	35 d0       	rcall	.+106    	; 0x1858 <__divsf3_pse+0x92>
    17ee:	0e 2e       	mov	r0, r30
    17f0:	3a f0       	brmi	.+14     	; 0x1800 <__divsf3_pse+0x3a>
    17f2:	e0 e8       	ldi	r30, 0x80	; 128
    17f4:	32 d0       	rcall	.+100    	; 0x185a <__divsf3_pse+0x94>
    17f6:	91 50       	subi	r25, 0x01	; 1
    17f8:	50 40       	sbci	r21, 0x00	; 0
    17fa:	e6 95       	lsr	r30
    17fc:	00 1c       	adc	r0, r0
    17fe:	ca f7       	brpl	.-14     	; 0x17f2 <__divsf3_pse+0x2c>
    1800:	2b d0       	rcall	.+86     	; 0x1858 <__divsf3_pse+0x92>
    1802:	fe 2f       	mov	r31, r30
    1804:	29 d0       	rcall	.+82     	; 0x1858 <__divsf3_pse+0x92>
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	88 1f       	adc	r24, r24
    180c:	bb 1f       	adc	r27, r27
    180e:	26 17       	cp	r18, r22
    1810:	37 07       	cpc	r19, r23
    1812:	48 07       	cpc	r20, r24
    1814:	ab 07       	cpc	r26, r27
    1816:	b0 e8       	ldi	r27, 0x80	; 128
    1818:	09 f0       	breq	.+2      	; 0x181c <__divsf3_pse+0x56>
    181a:	bb 0b       	sbc	r27, r27
    181c:	80 2d       	mov	r24, r0
    181e:	bf 01       	movw	r22, r30
    1820:	ff 27       	eor	r31, r31
    1822:	93 58       	subi	r25, 0x83	; 131
    1824:	5f 4f       	sbci	r21, 0xFF	; 255
    1826:	3a f0       	brmi	.+14     	; 0x1836 <__divsf3_pse+0x70>
    1828:	9e 3f       	cpi	r25, 0xFE	; 254
    182a:	51 05       	cpc	r21, r1
    182c:	78 f0       	brcs	.+30     	; 0x184c <__divsf3_pse+0x86>
    182e:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1832:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1836:	5f 3f       	cpi	r21, 0xFF	; 255
    1838:	e4 f3       	brlt	.-8      	; 0x1832 <__divsf3_pse+0x6c>
    183a:	98 3e       	cpi	r25, 0xE8	; 232
    183c:	d4 f3       	brlt	.-12     	; 0x1832 <__divsf3_pse+0x6c>
    183e:	86 95       	lsr	r24
    1840:	77 95       	ror	r23
    1842:	67 95       	ror	r22
    1844:	b7 95       	ror	r27
    1846:	f7 95       	ror	r31
    1848:	9f 5f       	subi	r25, 0xFF	; 255
    184a:	c9 f7       	brne	.-14     	; 0x183e <__divsf3_pse+0x78>
    184c:	88 0f       	add	r24, r24
    184e:	91 1d       	adc	r25, r1
    1850:	96 95       	lsr	r25
    1852:	87 95       	ror	r24
    1854:	97 f9       	bld	r25, 7
    1856:	08 95       	ret
    1858:	e1 e0       	ldi	r30, 0x01	; 1
    185a:	66 0f       	add	r22, r22
    185c:	77 1f       	adc	r23, r23
    185e:	88 1f       	adc	r24, r24
    1860:	bb 1f       	adc	r27, r27
    1862:	62 17       	cp	r22, r18
    1864:	73 07       	cpc	r23, r19
    1866:	84 07       	cpc	r24, r20
    1868:	ba 07       	cpc	r27, r26
    186a:	20 f0       	brcs	.+8      	; 0x1874 <__divsf3_pse+0xae>
    186c:	62 1b       	sub	r22, r18
    186e:	73 0b       	sbc	r23, r19
    1870:	84 0b       	sbc	r24, r20
    1872:	ba 0b       	sbc	r27, r26
    1874:	ee 1f       	adc	r30, r30
    1876:	88 f7       	brcc	.-30     	; 0x185a <__divsf3_pse+0x94>
    1878:	e0 95       	com	r30
    187a:	08 95       	ret

0000187c <__fixunssfsi>:
    187c:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fp_splitA>
    1880:	88 f0       	brcs	.+34     	; 0x18a4 <__fixunssfsi+0x28>
    1882:	9f 57       	subi	r25, 0x7F	; 127
    1884:	98 f0       	brcs	.+38     	; 0x18ac <__fixunssfsi+0x30>
    1886:	b9 2f       	mov	r27, r25
    1888:	99 27       	eor	r25, r25
    188a:	b7 51       	subi	r27, 0x17	; 23
    188c:	b0 f0       	brcs	.+44     	; 0x18ba <__fixunssfsi+0x3e>
    188e:	e1 f0       	breq	.+56     	; 0x18c8 <__fixunssfsi+0x4c>
    1890:	66 0f       	add	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	88 1f       	adc	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	1a f0       	brmi	.+6      	; 0x18a0 <__fixunssfsi+0x24>
    189a:	ba 95       	dec	r27
    189c:	c9 f7       	brne	.-14     	; 0x1890 <__fixunssfsi+0x14>
    189e:	14 c0       	rjmp	.+40     	; 0x18c8 <__fixunssfsi+0x4c>
    18a0:	b1 30       	cpi	r27, 0x01	; 1
    18a2:	91 f0       	breq	.+36     	; 0x18c8 <__fixunssfsi+0x4c>
    18a4:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__fp_zero>
    18a8:	b1 e0       	ldi	r27, 0x01	; 1
    18aa:	08 95       	ret
    18ac:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    18b0:	67 2f       	mov	r22, r23
    18b2:	78 2f       	mov	r23, r24
    18b4:	88 27       	eor	r24, r24
    18b6:	b8 5f       	subi	r27, 0xF8	; 248
    18b8:	39 f0       	breq	.+14     	; 0x18c8 <__fixunssfsi+0x4c>
    18ba:	b9 3f       	cpi	r27, 0xF9	; 249
    18bc:	cc f3       	brlt	.-14     	; 0x18b0 <__fixunssfsi+0x34>
    18be:	86 95       	lsr	r24
    18c0:	77 95       	ror	r23
    18c2:	67 95       	ror	r22
    18c4:	b3 95       	inc	r27
    18c6:	d9 f7       	brne	.-10     	; 0x18be <__fixunssfsi+0x42>
    18c8:	3e f4       	brtc	.+14     	; 0x18d8 <__fixunssfsi+0x5c>
    18ca:	90 95       	com	r25
    18cc:	80 95       	com	r24
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255
    18d4:	8f 4f       	sbci	r24, 0xFF	; 255
    18d6:	9f 4f       	sbci	r25, 0xFF	; 255
    18d8:	08 95       	ret

000018da <__floatunsisf>:
    18da:	e8 94       	clt
    18dc:	09 c0       	rjmp	.+18     	; 0x18f0 <__floatsisf+0x12>

000018de <__floatsisf>:
    18de:	97 fb       	bst	r25, 7
    18e0:	3e f4       	brtc	.+14     	; 0x18f0 <__floatsisf+0x12>
    18e2:	90 95       	com	r25
    18e4:	80 95       	com	r24
    18e6:	70 95       	com	r23
    18e8:	61 95       	neg	r22
    18ea:	7f 4f       	sbci	r23, 0xFF	; 255
    18ec:	8f 4f       	sbci	r24, 0xFF	; 255
    18ee:	9f 4f       	sbci	r25, 0xFF	; 255
    18f0:	99 23       	and	r25, r25
    18f2:	a9 f0       	breq	.+42     	; 0x191e <__floatsisf+0x40>
    18f4:	f9 2f       	mov	r31, r25
    18f6:	96 e9       	ldi	r25, 0x96	; 150
    18f8:	bb 27       	eor	r27, r27
    18fa:	93 95       	inc	r25
    18fc:	f6 95       	lsr	r31
    18fe:	87 95       	ror	r24
    1900:	77 95       	ror	r23
    1902:	67 95       	ror	r22
    1904:	b7 95       	ror	r27
    1906:	f1 11       	cpse	r31, r1
    1908:	f8 cf       	rjmp	.-16     	; 0x18fa <__floatsisf+0x1c>
    190a:	fa f4       	brpl	.+62     	; 0x194a <__floatsisf+0x6c>
    190c:	bb 0f       	add	r27, r27
    190e:	11 f4       	brne	.+4      	; 0x1914 <__floatsisf+0x36>
    1910:	60 ff       	sbrs	r22, 0
    1912:	1b c0       	rjmp	.+54     	; 0x194a <__floatsisf+0x6c>
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	8f 4f       	sbci	r24, 0xFF	; 255
    191a:	9f 4f       	sbci	r25, 0xFF	; 255
    191c:	16 c0       	rjmp	.+44     	; 0x194a <__floatsisf+0x6c>
    191e:	88 23       	and	r24, r24
    1920:	11 f0       	breq	.+4      	; 0x1926 <__floatsisf+0x48>
    1922:	96 e9       	ldi	r25, 0x96	; 150
    1924:	11 c0       	rjmp	.+34     	; 0x1948 <__floatsisf+0x6a>
    1926:	77 23       	and	r23, r23
    1928:	21 f0       	breq	.+8      	; 0x1932 <__floatsisf+0x54>
    192a:	9e e8       	ldi	r25, 0x8E	; 142
    192c:	87 2f       	mov	r24, r23
    192e:	76 2f       	mov	r23, r22
    1930:	05 c0       	rjmp	.+10     	; 0x193c <__floatsisf+0x5e>
    1932:	66 23       	and	r22, r22
    1934:	71 f0       	breq	.+28     	; 0x1952 <__floatsisf+0x74>
    1936:	96 e8       	ldi	r25, 0x86	; 134
    1938:	86 2f       	mov	r24, r22
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	60 e0       	ldi	r22, 0x00	; 0
    193e:	2a f0       	brmi	.+10     	; 0x194a <__floatsisf+0x6c>
    1940:	9a 95       	dec	r25
    1942:	66 0f       	add	r22, r22
    1944:	77 1f       	adc	r23, r23
    1946:	88 1f       	adc	r24, r24
    1948:	da f7       	brpl	.-10     	; 0x1940 <__floatsisf+0x62>
    194a:	88 0f       	add	r24, r24
    194c:	96 95       	lsr	r25
    194e:	87 95       	ror	r24
    1950:	97 f9       	bld	r25, 7
    1952:	08 95       	ret

00001954 <__fp_inf>:
    1954:	97 f9       	bld	r25, 7
    1956:	9f 67       	ori	r25, 0x7F	; 127
    1958:	80 e8       	ldi	r24, 0x80	; 128
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	08 95       	ret

00001960 <__fp_nan>:
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	80 ec       	ldi	r24, 0xC0	; 192
    1964:	08 95       	ret

00001966 <__fp_pscA>:
    1966:	00 24       	eor	r0, r0
    1968:	0a 94       	dec	r0
    196a:	16 16       	cp	r1, r22
    196c:	17 06       	cpc	r1, r23
    196e:	18 06       	cpc	r1, r24
    1970:	09 06       	cpc	r0, r25
    1972:	08 95       	ret

00001974 <__fp_pscB>:
    1974:	00 24       	eor	r0, r0
    1976:	0a 94       	dec	r0
    1978:	12 16       	cp	r1, r18
    197a:	13 06       	cpc	r1, r19
    197c:	14 06       	cpc	r1, r20
    197e:	05 06       	cpc	r0, r21
    1980:	08 95       	ret

00001982 <__fp_round>:
    1982:	09 2e       	mov	r0, r25
    1984:	03 94       	inc	r0
    1986:	00 0c       	add	r0, r0
    1988:	11 f4       	brne	.+4      	; 0x198e <__fp_round+0xc>
    198a:	88 23       	and	r24, r24
    198c:	52 f0       	brmi	.+20     	; 0x19a2 <__fp_round+0x20>
    198e:	bb 0f       	add	r27, r27
    1990:	40 f4       	brcc	.+16     	; 0x19a2 <__fp_round+0x20>
    1992:	bf 2b       	or	r27, r31
    1994:	11 f4       	brne	.+4      	; 0x199a <__fp_round+0x18>
    1996:	60 ff       	sbrs	r22, 0
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <__fp_round+0x20>
    199a:	6f 5f       	subi	r22, 0xFF	; 255
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <__fp_split3>:
    19a4:	57 fd       	sbrc	r21, 7
    19a6:	90 58       	subi	r25, 0x80	; 128
    19a8:	44 0f       	add	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <__fp_splitA+0x10>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	71 f0       	breq	.+28     	; 0x19ce <__fp_splitA+0x1a>
    19b2:	47 95       	ror	r20

000019b4 <__fp_splitA>:
    19b4:	88 0f       	add	r24, r24
    19b6:	97 fb       	bst	r25, 7
    19b8:	99 1f       	adc	r25, r25
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <__fp_splitA+0x20>
    19bc:	9f 3f       	cpi	r25, 0xFF	; 255
    19be:	79 f0       	breq	.+30     	; 0x19de <__fp_splitA+0x2a>
    19c0:	87 95       	ror	r24
    19c2:	08 95       	ret
    19c4:	12 16       	cp	r1, r18
    19c6:	13 06       	cpc	r1, r19
    19c8:	14 06       	cpc	r1, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	f2 cf       	rjmp	.-28     	; 0x19b2 <__fp_split3+0xe>
    19ce:	46 95       	lsr	r20
    19d0:	f1 df       	rcall	.-30     	; 0x19b4 <__fp_splitA>
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <__fp_splitA+0x30>
    19d4:	16 16       	cp	r1, r22
    19d6:	17 06       	cpc	r1, r23
    19d8:	18 06       	cpc	r1, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <__fp_splitA+0xc>
    19de:	86 95       	lsr	r24
    19e0:	71 05       	cpc	r23, r1
    19e2:	61 05       	cpc	r22, r1
    19e4:	08 94       	sec
    19e6:	08 95       	ret

000019e8 <__fp_zero>:
    19e8:	e8 94       	clt

000019ea <__fp_szero>:
    19ea:	bb 27       	eor	r27, r27
    19ec:	66 27       	eor	r22, r22
    19ee:	77 27       	eor	r23, r23
    19f0:	cb 01       	movw	r24, r22
    19f2:	97 f9       	bld	r25, 7
    19f4:	08 95       	ret

000019f6 <__mulsf3>:
    19f6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3x>
    19fa:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    19fe:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    1a02:	38 f0       	brcs	.+14     	; 0x1a12 <__mulsf3+0x1c>
    1a04:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    1a08:	20 f0       	brcs	.+8      	; 0x1a12 <__mulsf3+0x1c>
    1a0a:	95 23       	and	r25, r21
    1a0c:	11 f0       	breq	.+4      	; 0x1a12 <__mulsf3+0x1c>
    1a0e:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1a12:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>
    1a16:	11 24       	eor	r1, r1
    1a18:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>

00001a1c <__mulsf3x>:
    1a1c:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    1a20:	70 f3       	brcs	.-36     	; 0x19fe <__mulsf3+0x8>

00001a22 <__mulsf3_pse>:
    1a22:	95 9f       	mul	r25, r21
    1a24:	c1 f3       	breq	.-16     	; 0x1a16 <__mulsf3+0x20>
    1a26:	95 0f       	add	r25, r21
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	55 1f       	adc	r21, r21
    1a2c:	62 9f       	mul	r22, r18
    1a2e:	f0 01       	movw	r30, r0
    1a30:	72 9f       	mul	r23, r18
    1a32:	bb 27       	eor	r27, r27
    1a34:	f0 0d       	add	r31, r0
    1a36:	b1 1d       	adc	r27, r1
    1a38:	63 9f       	mul	r22, r19
    1a3a:	aa 27       	eor	r26, r26
    1a3c:	f0 0d       	add	r31, r0
    1a3e:	b1 1d       	adc	r27, r1
    1a40:	aa 1f       	adc	r26, r26
    1a42:	64 9f       	mul	r22, r20
    1a44:	66 27       	eor	r22, r22
    1a46:	b0 0d       	add	r27, r0
    1a48:	a1 1d       	adc	r26, r1
    1a4a:	66 1f       	adc	r22, r22
    1a4c:	82 9f       	mul	r24, r18
    1a4e:	22 27       	eor	r18, r18
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	62 1f       	adc	r22, r18
    1a56:	73 9f       	mul	r23, r19
    1a58:	b0 0d       	add	r27, r0
    1a5a:	a1 1d       	adc	r26, r1
    1a5c:	62 1f       	adc	r22, r18
    1a5e:	83 9f       	mul	r24, r19
    1a60:	a0 0d       	add	r26, r0
    1a62:	61 1d       	adc	r22, r1
    1a64:	22 1f       	adc	r18, r18
    1a66:	74 9f       	mul	r23, r20
    1a68:	33 27       	eor	r19, r19
    1a6a:	a0 0d       	add	r26, r0
    1a6c:	61 1d       	adc	r22, r1
    1a6e:	23 1f       	adc	r18, r19
    1a70:	84 9f       	mul	r24, r20
    1a72:	60 0d       	add	r22, r0
    1a74:	21 1d       	adc	r18, r1
    1a76:	82 2f       	mov	r24, r18
    1a78:	76 2f       	mov	r23, r22
    1a7a:	6a 2f       	mov	r22, r26
    1a7c:	11 24       	eor	r1, r1
    1a7e:	9f 57       	subi	r25, 0x7F	; 127
    1a80:	50 40       	sbci	r21, 0x00	; 0
    1a82:	9a f0       	brmi	.+38     	; 0x1aaa <__mulsf3_pse+0x88>
    1a84:	f1 f0       	breq	.+60     	; 0x1ac2 <__mulsf3_pse+0xa0>
    1a86:	88 23       	and	r24, r24
    1a88:	4a f0       	brmi	.+18     	; 0x1a9c <__mulsf3_pse+0x7a>
    1a8a:	ee 0f       	add	r30, r30
    1a8c:	ff 1f       	adc	r31, r31
    1a8e:	bb 1f       	adc	r27, r27
    1a90:	66 1f       	adc	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	91 50       	subi	r25, 0x01	; 1
    1a98:	50 40       	sbci	r21, 0x00	; 0
    1a9a:	a9 f7       	brne	.-22     	; 0x1a86 <__mulsf3_pse+0x64>
    1a9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a9e:	51 05       	cpc	r21, r1
    1aa0:	80 f0       	brcs	.+32     	; 0x1ac2 <__mulsf3_pse+0xa0>
    1aa2:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1aa6:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1aaa:	5f 3f       	cpi	r21, 0xFF	; 255
    1aac:	e4 f3       	brlt	.-8      	; 0x1aa6 <__mulsf3_pse+0x84>
    1aae:	98 3e       	cpi	r25, 0xE8	; 232
    1ab0:	d4 f3       	brlt	.-12     	; 0x1aa6 <__mulsf3_pse+0x84>
    1ab2:	86 95       	lsr	r24
    1ab4:	77 95       	ror	r23
    1ab6:	67 95       	ror	r22
    1ab8:	b7 95       	ror	r27
    1aba:	f7 95       	ror	r31
    1abc:	e7 95       	ror	r30
    1abe:	9f 5f       	subi	r25, 0xFF	; 255
    1ac0:	c1 f7       	brne	.-16     	; 0x1ab2 <__mulsf3_pse+0x90>
    1ac2:	fe 2b       	or	r31, r30
    1ac4:	88 0f       	add	r24, r24
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	96 95       	lsr	r25
    1aca:	87 95       	ror	r24
    1acc:	97 f9       	bld	r25, 7
    1ace:	08 95       	ret

00001ad0 <__udivmodsi4>:
    1ad0:	a1 e2       	ldi	r26, 0x21	; 33
    1ad2:	1a 2e       	mov	r1, r26
    1ad4:	aa 1b       	sub	r26, r26
    1ad6:	bb 1b       	sub	r27, r27
    1ad8:	fd 01       	movw	r30, r26
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <__udivmodsi4_ep>

00001adc <__udivmodsi4_loop>:
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	ee 1f       	adc	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	a2 17       	cp	r26, r18
    1ae6:	b3 07       	cpc	r27, r19
    1ae8:	e4 07       	cpc	r30, r20
    1aea:	f5 07       	cpc	r31, r21
    1aec:	20 f0       	brcs	.+8      	; 0x1af6 <__udivmodsi4_ep>
    1aee:	a2 1b       	sub	r26, r18
    1af0:	b3 0b       	sbc	r27, r19
    1af2:	e4 0b       	sbc	r30, r20
    1af4:	f5 0b       	sbc	r31, r21

00001af6 <__udivmodsi4_ep>:
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	1a 94       	dec	r1
    1b00:	69 f7       	brne	.-38     	; 0x1adc <__udivmodsi4_loop>
    1b02:	60 95       	com	r22
    1b04:	70 95       	com	r23
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	9b 01       	movw	r18, r22
    1b0c:	ac 01       	movw	r20, r24
    1b0e:	bd 01       	movw	r22, r26
    1b10:	cf 01       	movw	r24, r30
    1b12:	08 95       	ret

00001b14 <__divmodsi4>:
    1b14:	05 2e       	mov	r0, r21
    1b16:	97 fb       	bst	r25, 7
    1b18:	1e f4       	brtc	.+6      	; 0x1b20 <__divmodsi4+0xc>
    1b1a:	00 94       	com	r0
    1b1c:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <__negsi2>
    1b20:	57 fd       	sbrc	r21, 7
    1b22:	07 d0       	rcall	.+14     	; 0x1b32 <__divmodsi4_neg2>
    1b24:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__udivmodsi4>
    1b28:	07 fc       	sbrc	r0, 7
    1b2a:	03 d0       	rcall	.+6      	; 0x1b32 <__divmodsi4_neg2>
    1b2c:	4e f4       	brtc	.+18     	; 0x1b40 <__divmodsi4_exit>
    1b2e:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__negsi2>

00001b32 <__divmodsi4_neg2>:
    1b32:	50 95       	com	r21
    1b34:	40 95       	com	r20
    1b36:	30 95       	com	r19
    1b38:	21 95       	neg	r18
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b3e:	5f 4f       	sbci	r21, 0xFF	; 255

00001b40 <__divmodsi4_exit>:
    1b40:	08 95       	ret

00001b42 <__negsi2>:
    1b42:	90 95       	com	r25
    1b44:	80 95       	com	r24
    1b46:	70 95       	com	r23
    1b48:	61 95       	neg	r22
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	08 95       	ret

00001b52 <__umulhisi3>:
    1b52:	a2 9f       	mul	r26, r18
    1b54:	b0 01       	movw	r22, r0
    1b56:	b3 9f       	mul	r27, r19
    1b58:	c0 01       	movw	r24, r0
    1b5a:	a3 9f       	mul	r26, r19
    1b5c:	70 0d       	add	r23, r0
    1b5e:	81 1d       	adc	r24, r1
    1b60:	11 24       	eor	r1, r1
    1b62:	91 1d       	adc	r25, r1
    1b64:	b2 9f       	mul	r27, r18
    1b66:	70 0d       	add	r23, r0
    1b68:	81 1d       	adc	r24, r1
    1b6a:	11 24       	eor	r1, r1
    1b6c:	91 1d       	adc	r25, r1
    1b6e:	08 95       	ret

00001b70 <__muluhisi3>:
    1b70:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <__umulhisi3>
    1b74:	a5 9f       	mul	r26, r21
    1b76:	90 0d       	add	r25, r0
    1b78:	b4 9f       	mul	r27, r20
    1b7a:	90 0d       	add	r25, r0
    1b7c:	a4 9f       	mul	r26, r20
    1b7e:	80 0d       	add	r24, r0
    1b80:	91 1d       	adc	r25, r1
    1b82:	11 24       	eor	r1, r1
    1b84:	08 95       	ret

00001b86 <atoi>:
    1b86:	fc 01       	movw	r30, r24
    1b88:	88 27       	eor	r24, r24
    1b8a:	99 27       	eor	r25, r25
    1b8c:	e8 94       	clt
    1b8e:	21 91       	ld	r18, Z+
    1b90:	20 32       	cpi	r18, 0x20	; 32
    1b92:	e9 f3       	breq	.-6      	; 0x1b8e <atoi+0x8>
    1b94:	29 30       	cpi	r18, 0x09	; 9
    1b96:	10 f0       	brcs	.+4      	; 0x1b9c <atoi+0x16>
    1b98:	2e 30       	cpi	r18, 0x0E	; 14
    1b9a:	c8 f3       	brcs	.-14     	; 0x1b8e <atoi+0x8>
    1b9c:	2b 32       	cpi	r18, 0x2B	; 43
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <atoi+0x2a>
    1ba0:	2d 32       	cpi	r18, 0x2D	; 45
    1ba2:	39 f4       	brne	.+14     	; 0x1bb2 <atoi+0x2c>
    1ba4:	68 94       	set
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <atoi+0x2a>
    1ba8:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__mulhi_const_10>
    1bac:	82 0f       	add	r24, r18
    1bae:	91 1d       	adc	r25, r1
    1bb0:	21 91       	ld	r18, Z+
    1bb2:	20 53       	subi	r18, 0x30	; 48
    1bb4:	2a 30       	cpi	r18, 0x0A	; 10
    1bb6:	c0 f3       	brcs	.-16     	; 0x1ba8 <atoi+0x22>
    1bb8:	1e f4       	brtc	.+6      	; 0x1bc0 <atoi+0x3a>
    1bba:	90 95       	com	r25
    1bbc:	81 95       	neg	r24
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	08 95       	ret

00001bc2 <itoa>:
    1bc2:	45 32       	cpi	r20, 0x25	; 37
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	20 f4       	brcc	.+8      	; 0x1bd0 <itoa+0xe>
    1bc8:	42 30       	cpi	r20, 0x02	; 2
    1bca:	10 f0       	brcs	.+4      	; 0x1bd0 <itoa+0xe>
    1bcc:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__itoa_ncheck>
    1bd0:	fb 01       	movw	r30, r22
    1bd2:	10 82       	st	Z, r1
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	08 95       	ret

00001bd8 <__itoa_ncheck>:
    1bd8:	bb 27       	eor	r27, r27
    1bda:	4a 30       	cpi	r20, 0x0A	; 10
    1bdc:	31 f4       	brne	.+12     	; 0x1bea <__itoa_ncheck+0x12>
    1bde:	99 23       	and	r25, r25
    1be0:	22 f4       	brpl	.+8      	; 0x1bea <__itoa_ncheck+0x12>
    1be2:	bd e2       	ldi	r27, 0x2D	; 45
    1be4:	90 95       	com	r25
    1be6:	81 95       	neg	r24
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	0c 94 00 0e 	jmp	0x1c00	; 0x1c00 <__utoa_common>

00001bee <__mulhi_const_10>:
    1bee:	7a e0       	ldi	r23, 0x0A	; 10
    1bf0:	97 9f       	mul	r25, r23
    1bf2:	90 2d       	mov	r25, r0
    1bf4:	87 9f       	mul	r24, r23
    1bf6:	80 2d       	mov	r24, r0
    1bf8:	91 0d       	add	r25, r1
    1bfa:	11 24       	eor	r1, r1
    1bfc:	08 95       	ret

00001bfe <__utoa_ncheck>:
    1bfe:	bb 27       	eor	r27, r27

00001c00 <__utoa_common>:
    1c00:	fb 01       	movw	r30, r22
    1c02:	55 27       	eor	r21, r21
    1c04:	aa 27       	eor	r26, r26
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	aa 1f       	adc	r26, r26
    1c0c:	a4 17       	cp	r26, r20
    1c0e:	10 f0       	brcs	.+4      	; 0x1c14 <__utoa_common+0x14>
    1c10:	a4 1b       	sub	r26, r20
    1c12:	83 95       	inc	r24
    1c14:	50 51       	subi	r21, 0x10	; 16
    1c16:	b9 f7       	brne	.-18     	; 0x1c06 <__utoa_common+0x6>
    1c18:	a0 5d       	subi	r26, 0xD0	; 208
    1c1a:	aa 33       	cpi	r26, 0x3A	; 58
    1c1c:	08 f0       	brcs	.+2      	; 0x1c20 <__utoa_common+0x20>
    1c1e:	a9 5d       	subi	r26, 0xD9	; 217
    1c20:	a1 93       	st	Z+, r26
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	79 f7       	brne	.-34     	; 0x1c04 <__utoa_common+0x4>
    1c26:	b1 11       	cpse	r27, r1
    1c28:	b1 93       	st	Z+, r27
    1c2a:	11 92       	st	Z+, r1
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <strrev>

00001c32 <strrev>:
    1c32:	dc 01       	movw	r26, r24
    1c34:	fc 01       	movw	r30, r24
    1c36:	67 2f       	mov	r22, r23
    1c38:	71 91       	ld	r23, Z+
    1c3a:	77 23       	and	r23, r23
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <strrev+0x4>
    1c3e:	32 97       	sbiw	r30, 0x02	; 2
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <strrev+0x18>
    1c42:	7c 91       	ld	r23, X
    1c44:	6d 93       	st	X+, r22
    1c46:	70 83       	st	Z, r23
    1c48:	62 91       	ld	r22, -Z
    1c4a:	ae 17       	cp	r26, r30
    1c4c:	bf 07       	cpc	r27, r31
    1c4e:	c8 f3       	brcs	.-14     	; 0x1c42 <strrev+0x10>
    1c50:	08 95       	ret

00001c52 <eeprom_read_byte>:
    1c52:	f9 99       	sbic	0x1f, 1	; 31
    1c54:	fe cf       	rjmp	.-4      	; 0x1c52 <eeprom_read_byte>
    1c56:	92 bd       	out	0x22, r25	; 34
    1c58:	81 bd       	out	0x21, r24	; 33
    1c5a:	f8 9a       	sbi	0x1f, 0	; 31
    1c5c:	99 27       	eor	r25, r25
    1c5e:	80 b5       	in	r24, 0x20	; 32
    1c60:	08 95       	ret

00001c62 <eeprom_write_byte>:
    1c62:	26 2f       	mov	r18, r22

00001c64 <eeprom_write_r18>:
    1c64:	f9 99       	sbic	0x1f, 1	; 31
    1c66:	fe cf       	rjmp	.-4      	; 0x1c64 <eeprom_write_r18>
    1c68:	1f ba       	out	0x1f, r1	; 31
    1c6a:	92 bd       	out	0x22, r25	; 34
    1c6c:	81 bd       	out	0x21, r24	; 33
    1c6e:	20 bd       	out	0x20, r18	; 32
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	fa 9a       	sbi	0x1f, 2	; 31
    1c76:	f9 9a       	sbi	0x1f, 1	; 31
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	01 96       	adiw	r24, 0x01	; 1
    1c7c:	08 95       	ret

00001c7e <_exit>:
    1c7e:	f8 94       	cli

00001c80 <__stop_program>:
    1c80:	ff cf       	rjmp	.-2      	; 0x1c80 <__stop_program>
